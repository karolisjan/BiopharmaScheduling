/* Generated by Cython 0.26 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "biopharma_scheduling/batch.h",
            "biopharma_scheduling/campaign.h",
            "biopharma_scheduling/gene.h",
            "biopharma_scheduling/input_data.h",
            "biopharma_scheduling/nsga_chromosome.h",
            "biopharma_scheduling/nsgaii.h",
            "biopharma_scheduling/schedule.h",
            "biopharma_scheduling/scheduling_models.h",
            "biopharma_scheduling/single_objective_chromosome.h",
            "biopharma_scheduling/single_objective_ga.h"
        ],
        "include_dirs": [
            "biopharma_scheduling/single_site",
            "./biopharma_scheduling",
            "./biopharma_scheduling/single_site"
        ],
        "language": "c++",
        "name": "biopharma_scheduling.single_site.stochastic",
        "sources": [
            "biopharma_scheduling/single_site/stochastic.pyx"
        ]
    },
    "module_name": "biopharma_scheduling.single_site.stochastic"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_26"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX < 0x030700A0 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject **args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #ifdef __cplusplus
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough) || (defined(__GNUC__) && defined(__attribute__))
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__biopharma_scheduling__single_site__stochastic
#define __PYX_HAVE_API__biopharma_scheduling__single_site__stochastic
#include <utility>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <string.h>
#include <string>
#include <vector>
#include <unordered_map>
#include "batch.h"
#include "campaign.h"
#include "schedule.h"
#include "../input_data.h"
#include "../scheduling_models.h"
#include <algorithm>
#include "nsgaii.h"
#include "nsga_chromosome.h"
#include "single_objective_ga.h"
#include "single_objective_chromosome.h"
#include "gene.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "biopharma_scheduling/single_site/stochastic.pyx",
  "stringsource",
};

/*--- Type declarations ---*/
struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple;
struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule;

/* "biopharma_scheduling/single_site/stochastic.pyx":29
 * 
 * 
 * cdef class StochSingleSiteSimple:             # <<<<<<<<<<<<<<
 *     '''
 *         Continuous-time capacity planning of a single multi-product
 */
struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple {
  PyObject_HEAD
  struct __pyx_vtabstruct_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *__pyx_vtab;
  stochastic::SingleSiteSimpleInputData input_data;
  stochastic::SingleSiteSimpleModel single_site_simple;
  PyObject *history;
  PyObject *schedules;
  PyObject *start_date;
  PyObject *product_labels;
  PyObject *due_dates;
  PyObject *objectives;
  PyObject *objectives_coefficients_list;
  int num_mc_simulations;
  int num_runs;
  int num_gens;
  int popsize;
  int starting_length;
  int num_threads;
  int mc_random_state;
  int random_state;
  int verbose;
  int save_history;
  double p_xo;
  double p_product_mut;
  double p_plus_batch_mut;
  double p_minus_batch_mut;
  double p_gene_swap;
};


/* "biopharma_scheduling/single_site/stochastic.pyx":581
 *             pbar.close()
 * 
 *     cdef __make_pyschedule(self, SingleSiteSimpleSchedule &schedule):             # <<<<<<<<<<<<<<
 *         def get_date_of(delta):
 *             return pd.Timedelta('%d days' % delta) + pd.to_datetime(self.start_date).date()
 */
struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule {
  PyObject_HEAD
  struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *__pyx_v_self;
};



/* "biopharma_scheduling/single_site/stochastic.pyx":29
 * 
 * 
 * cdef class StochSingleSiteSimple:             # <<<<<<<<<<<<<<
 *     '''
 *         Continuous-time capacity planning of a single multi-product
 */

struct __pyx_vtabstruct_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple {
  PyObject *(*__pyx___make_pyschedule)(struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *, struct types::SingleSiteSimpleSchedule &);
};
static struct __pyx_vtabstruct_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *__pyx_vtabptr_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_EqObjC(op1, op2, intval, inplace)\
    PyObject_RichCompare(op1, op2, Py_EQ)
    #endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CLineInTraceback.proto */
static int __Pyx_CLineForTraceback(int c_line);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__stochastic_3a__3a_OBJECTIVES(enum stochastic::OBJECTIVES value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum stochastic::OBJECTIVES __Pyx_PyInt_As_enum__stochastic_3a__3a_OBJECTIVES(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple___make_pyschedule(struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *__pyx_v_self, struct types::SingleSiteSimpleSchedule &__pyx_v_schedule); /* proto*/

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.unordered_map' */

/* Module declarations from 'biopharma_scheduling.batch' */

/* Module declarations from 'biopharma_scheduling.campaign' */

/* Module declarations from 'biopharma_scheduling.schedule' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.algorithm' */

/* Module declarations from 'biopharma_scheduling.nsgaii' */

/* Module declarations from 'biopharma_scheduling.nsgaii_chromosome' */

/* Module declarations from 'biopharma_scheduling.single_objective_ga' */

/* Module declarations from 'biopharma_scheduling.single_objective_chromosome' */

/* Module declarations from 'biopharma_scheduling.gene' */

/* Module declarations from 'biopharma_scheduling.single_site.stochastic' */
static PyTypeObject *__pyx_ptype_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple = 0;
static PyTypeObject *__pyx_ptype_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule = 0;
static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *); /*proto*/
static std::vector<std::vector<double> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(PyObject *); /*proto*/
static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *); /*proto*/
static std::vector<std::vector<int> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "biopharma_scheduling.single_site.stochastic"
int __pyx_module_is_main_biopharma_scheduling__single_site__stochastic = 0;

/* Implementation of 'biopharma_scheduling.single_site.stochastic' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_TypeError;
static const char __pyx_k_Kg[] = "Kg";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_pd[] = "pd";
static const char __pyx_k_DSP[] = "DSP";
static const char __pyx_k_all[] = "all";
static const char __pyx_k_Done[] = "Done";
static const char __pyx_k_Seed[] = "Seed";
static const char __pyx_k_Task[] = "Task";
static const char __pyx_k_axis[] = "axis";
static const char __pyx_k_core[] = "core";
static const char __pyx_k_date[] = "date";
static const char __pyx_k_days[] = "days";
static const char __pyx_k_drop[] = "drop";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_p_xo[] = "p_xo";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_tqdm[] = "tqdm";
static const char __pyx_k_Start[] = "Start";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_delta[] = "delta";
static const char __pyx_k_frame[] = "frame";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_total[] = "total";
static const char __pyx_k_utils[] = "utils";
static const char __pyx_k_Finish[] = "Finish";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_d_days[] = "%d days";
static const char __pyx_k_fillna[] = "fillna";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_pandas[] = "pandas";
static const char __pyx_k_remove[] = "remove";
static const char __pyx_k_tolist[] = "tolist";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_Batches[] = "Batches";
static const char __pyx_k_Product[] = "Product";
static const char __pyx_k_columns[] = "columns";
static const char __pyx_k_popsize[] = "popsize";
static const char __pyx_k_product[] = "product";
static const char __pyx_k_verbose[] = "verbose";
static const char __pyx_k_dsp_days[] = "dsp_days";
static const char __pyx_k_kg_waste[] = "kg_waste";
static const char __pyx_k_num_gens[] = "num_gens";
static const char __pyx_k_num_runs[] = "num_runs";
static const char __pyx_k_usp_days[] = "usp_days";
static const char __pyx_k_DataFrame[] = "DataFrame";
static const char __pyx_k_Stored_on[] = "Stored on";
static const char __pyx_k_Timedelta[] = "Timedelta";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_due_dates[] = "due_dates";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_kg_supply[] = "kg_supply";
static const char __pyx_k_seed_days[] = "seed_days";
static const char __pyx_k_transpose[] = "transpose";
static const char __pyx_k_Expires_on[] = "Expires on";
static const char __pyx_k_Last_Batch[] = "Last Batch";
static const char __pyx_k_Production[] = "Production";
static const char __pyx_k_count_days[] = "__count_days";
static const char __pyx_k_kg_backlog[] = "kg_backlog";
static const char __pyx_k_objectives[] = "objectives";
static const char __pyx_k_pyschedule[] = "pyschedule";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_run_nsgaii[] = "__run_nsgaii";
static const char __pyx_k_start_date[] = "start_date";
static const char __pyx_k_Approved_on[] = "Approved on";
static const char __pyx_k_First_Batch[] = "First Batch";
static const char __pyx_k_Inoculation[] = "Inoculation";
static const char __pyx_k_OrderedDict[] = "OrderedDict";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_constraints[] = "constraints";
static const char __pyx_k_get_date_of[] = "get_date_of";
static const char __pyx_k_hypervolume[] = "hypervolume";
static const char __pyx_k_num_threads[] = "num_threads";
static const char __pyx_k_p_gene_swap[] = "p_gene_swap";
static const char __pyx_k_tasks_table[] = "tasks_table";
static const char __pyx_k_to_datetime[] = "to_datetime";
static const char __pyx_k_Harvested_on[] = "Harvested on";
static const char __pyx_k_kg_inventory[] = "kg_inventory";
static const char __pyx_k_product_data[] = "product_data";
static const char __pyx_k_random_state[] = "random_state";
static const char __pyx_k_save_history[] = "save_history";
static const char __pyx_k_First_Harvest[] = "First Harvest";
static const char __pyx_k_approval_days[] = "approval_days";
static const char __pyx_k_batches_table[] = "batches_table";
static const char __pyx_k_kg_demand_max[] = "kg_demand_max";
static const char __pyx_k_kg_demand_min[] = "kg_demand_min";
static const char __pyx_k_p_product_mut[] = "p_product_mut";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_kg_demand_mode[] = "kg_demand_mode";
static const char __pyx_k_validate_input[] = "__validate_input";
static const char __pyx_k_campaigns_table[] = "campaigns_table";
static const char __pyx_k_changeover_days[] = "changeover_days";
static const char __pyx_k_mc_random_state[] = "mc_random_state";
static const char __pyx_k_production_days[] = "production_days";
static const char __pyx_k_set_description[] = "set_description";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_shelf_life_days[] = "shelf_life_days";
static const char __pyx_k_starting_length[] = "starting_length";
static const char __pyx_k_total_cost_mean[] = "total_cost_mean";
static const char __pyx_k_inoculation_days[] = "inoculation_days";
static const char __pyx_k_kg_opening_stock[] = "kg_opening_stock";
static const char __pyx_k_p_plus_batch_mut[] = "p_plus_batch_mut";
static const char __pyx_k_GA_is_running_d_d[] = "GA is running %d/%d";
static const char __pyx_k_kg_storage_limits[] = "kg_storage_limits";
static const char __pyx_k_p_minus_batch_mut[] = "p_minus_batch_mut";
static const char __pyx_k_sell_price_per_kg[] = "sell_price_per_kg";
static const char __pyx_k_total_profit_mean[] = "total_profit_mean";
static const char __pyx_k_waste_cost_per_kg[] = "waste_cost_per_kg";
static const char __pyx_k_Processing_history[] = "Processing history";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_num_mc_simulations[] = "num_mc_simulations";
static const char __pyx_k_total_revenue_mean[] = "total_revenue_mean";
static const char __pyx_k_kg_inventory_target[] = "kg_inventory_target";
static const char __pyx_k_storage_cost_per_kg[] = "storage_cost_per_kg";
static const char __pyx_k_total_kg_waste_mean[] = "total_kg_waste_mean";
static const char __pyx_k_AVAILABLE_OBJECTIVES[] = "AVAILABLE_OBJECTIVES";
static const char __pyx_k_Collecting_schedules[] = "Collecting schedules";
static const char __pyx_k_total_kg_supply_mean[] = "total_kg_supply_mean";
static const char __pyx_k_total_kg_backlog_mean[] = "total_kg_backlog_mean";
static const char __pyx_k_total_waste_cost_mean[] = "total_waste_cost_mean";
static const char __pyx_k_backlog_penalty_per_kg[] = "backlog_penalty_per_kg";
static const char __pyx_k_kg_yield_per_batch_max[] = "kg_yield_per_batch_max";
static const char __pyx_k_kg_yield_per_batch_min[] = "kg_yield_per_batch_min";
static const char __pyx_k_production_cost_per_kg[] = "production_cost_per_kg";
static const char __pyx_k_kg_yield_per_batch_mode[] = "kg_yield_per_batch_mode";
static const char __pyx_k_run_single_objective_ga[] = "__run_single_objective_ga";
static const char __pyx_k_total_storage_cost_mean[] = "total_storage_cost_mean";
static const char __pyx_k_inventory_penalty_per_kg[] = "inventory_penalty_per_kg";
static const char __pyx_k_max_batches_per_campaign[] = "max_batches_per_campaign";
static const char __pyx_k_min_batches_per_campaign[] = "min_batches_per_campaign";
static const char __pyx_k_total_kg_throughput_mean[] = "total_kg_throughput_mean";
static const char __pyx_k_PySingleSiteSimpleSchedule[] = "PySingleSiteSimpleSchedule";
static const char __pyx_k_total_backlog_penalty_mean[] = "total_backlog_penalty_mean";
static const char __pyx_k_total_production_cost_mean[] = "total_production_cost_mean";
static const char __pyx_k_total_inventory_penalty_mean[] = "total_inventory_penalty_mean";
static const char __pyx_k_PySingleSiteMultiSuiteSchedule[] = "PySingleSiteMultiSuiteSchedule";
static const char __pyx_k_constraints_needs_to_be_a_dict[] = "'constraints' needs to be a 'dict', is a '{}'.";
static const char __pyx_k_is_not_allowed_as_a_constraint[] = "'{}' is not allowed as a constraint.";
static const char __pyx_k_is_not_allowed_as_an_objective[] = "'{}' is not allowed as an objective.";
static const char __pyx_k_kg_demand_max_must_have_a_date[] = "'kg_demand_max' must have a 'date' index.";
static const char __pyx_k_kg_demand_min_must_have_a_date[] = "'kg_demand_min' must have a 'date' index.";
static const char __pyx_k_num_mc_simulations_needs_to_be[] = "'num_mc_simulations' needs to be a positive integer number.";
static const char __pyx_k_p_plus_batch_mut_needs_to_be_a[] = "'p_plus_batch_mut' needs to be a positive floating point number in range [0.0 - 1.0].";
static const char __pyx_k_popsize_needs_to_be_a_positive[] = "'popsize' needs to be a positive integer number.";
static const char __pyx_k_product_data_is_missing_column[] = "'product_data' is missing '{}' column.";
static const char __pyx_k_Constraint_coefficient_can_only[] = "Constraint coefficient can only be -1 or 1.";
static const char __pyx_k_constraints_are_expected_to_hol[] = "'constraints' are expected to hold a coeffcient and a bound.";
static const char __pyx_k_date_indices_from_kg_demand_max[] = "'date' indices from 'kg_demand_max' and 'kg_demand_mode' do not match.";
static const char __pyx_k_date_indices_from_kg_demand_min[] = "'date' indices from 'kg_demand_min' and 'kg_demand_mode' do not match.";
static const char __pyx_k_date_indices_from_kg_demand_mod[] = "'date' indices from 'kg_demand_mode' and 'kg_inventory_target' do not match.";
static const char __pyx_k_kg_demand_mode_must_have_a_date[] = "'kg_demand_mode' must have a 'date' index.";
static const char __pyx_k_kg_inventory_target_must_have_a[] = "'kg_inventory_target' must have a 'date' index.";
static const char __pyx_k_num_gens_needs_to_be_a_positive[] = "'num_gens' needs to be a positive integer number.";
static const char __pyx_k_num_runs_needs_to_be_a_positive[] = "'num_runs' needs to be a positive integer number.";
static const char __pyx_k_objectives_needs_to_be_a_dict_i[] = "'objectives' needs to be a 'dict', is a '{}'.";
static const char __pyx_k_p_gene_swap_needs_to_be_a_posit[] = "'p_gene_swap' needs to be a positive floating point number in range [0.0 - 1.0].";
static const char __pyx_k_p_minus_batch_mut_needs_to_be_a[] = "'p_minus_batch_mut' needs to be a positive floating point number in range [0.0 - 1.0].";
static const char __pyx_k_p_product_mut_needs_to_be_a_pos[] = "'p_product_mut' needs to be a positive floating point number in range [0.0 - 1.0].";
static const char __pyx_k_p_xo_needs_to_be_a_positive_flo[] = "'p_xo' needs to be a positive floating point number in range [0.0 - 1.0].";
static const char __pyx_k_product_column_is_missing_in_ch[] = "'product' column is missing in 'changeover_days'.";
static const char __pyx_k_starting_length_needs_to_be_a_p[] = "'starting_length' needs to be a positive integer number.";
static const char __pyx_k_total_kg_inventory_deficit_mean[] = "total_kg_inventory_deficit_mean";
static const char __pyx_k_Input_data_must_be_a_pd_core_fra[] = "Input data must be a 'pd.core.frame.DataFrame', is a '{}'";
static const char __pyx_k_Objective_coefficient_can_only_b[] = "Objective coefficient can only be -1 or 1.";
static const char __pyx_k_Product_labels_from_kg_demand_an[] = "Product labels from 'kg_demand' and 'product_data' do not match.";
static const char __pyx_k_Product_labels_from_kg_demand_ma[] = "Product labels from 'kg_demand_max' and 'kg_demand_mode' do not match.";
static const char __pyx_k_Product_labels_from_kg_demand_mi[] = "Product labels from 'kg_demand_min' and 'kg_demand_mode' do not match.";
static const char __pyx_k_Product_labels_from_kg_demand_mo[] = "Product labels from 'kg_demand_mode' and 'kg_inventory_target' do not match.";
static const char __pyx_k_Product_labels_in_product_column[] = "Product labels in 'product' column do not match with the actual product columns in 'changeover_days_product_columns'.";
static const char __pyx_k_StochSingleSiteSimple___make_pys[] = "StochSingleSiteSimple.__make_pyschedule.<locals>.get_date_of";
static const char __pyx_k_batches_multiples_of_per_campaig[] = "batches_multiples_of_per_campaign";
static const char __pyx_k_biopharma_scheduling_single_site[] = "biopharma_scheduling/single_site/stochastic.pyx";
static const char __pyx_k_self_input_data_self_single_site[] = "self.input_data,self.single_site_simple cannot be converted to a Python object for pickling";
static const char __pyx_k_date_indices_from_kg_demand_max_2[] = "'date' indices from 'kg_demand_max' and 'kg_inventory_target' do not match.";
static const char __pyx_k_date_indices_from_kg_demand_min_2[] = "'date' indices from 'kg_demand_min' and 'kg_inventory_target' do not match.";
static const char __pyx_k_Product_labels_from_kg_demand_an_2[] = "Product labels from 'kg_demand' and 'changeover_days' do not match.";
static const char __pyx_k_Product_labels_from_kg_demand_ma_2[] = "Product labels from 'kg_demand_max' and 'kg_inventory_target' do not match.";
static const char __pyx_k_Product_labels_from_kg_demand_mi_2[] = "Product labels from 'kg_demand_min' and 'kg_inventory_target' do not match.";
static const char __pyx_k_biopharma_scheduling_single_site_2[] = "biopharma_scheduling.single_site.stochastic";
static PyObject *__pyx_n_s_AVAILABLE_OBJECTIVES;
static PyObject *__pyx_kp_s_Approved_on;
static PyObject *__pyx_n_s_Batches;
static PyObject *__pyx_kp_s_Collecting_schedules;
static PyObject *__pyx_kp_s_Constraint_coefficient_can_only;
static PyObject *__pyx_n_s_DSP;
static PyObject *__pyx_n_s_DataFrame;
static PyObject *__pyx_n_s_Done;
static PyObject *__pyx_kp_s_Expires_on;
static PyObject *__pyx_n_s_Finish;
static PyObject *__pyx_kp_s_First_Batch;
static PyObject *__pyx_kp_s_First_Harvest;
static PyObject *__pyx_kp_s_GA_is_running_d_d;
static PyObject *__pyx_kp_s_Harvested_on;
static PyObject *__pyx_n_s_Inoculation;
static PyObject *__pyx_kp_s_Input_data_must_be_a_pd_core_fra;
static PyObject *__pyx_n_s_Kg;
static PyObject *__pyx_kp_s_Last_Batch;
static PyObject *__pyx_kp_s_Objective_coefficient_can_only_b;
static PyObject *__pyx_n_s_OrderedDict;
static PyObject *__pyx_kp_s_Processing_history;
static PyObject *__pyx_n_s_Product;
static PyObject *__pyx_kp_s_Product_labels_from_kg_demand_an;
static PyObject *__pyx_kp_s_Product_labels_from_kg_demand_an_2;
static PyObject *__pyx_kp_s_Product_labels_from_kg_demand_ma;
static PyObject *__pyx_kp_s_Product_labels_from_kg_demand_ma_2;
static PyObject *__pyx_kp_s_Product_labels_from_kg_demand_mi;
static PyObject *__pyx_kp_s_Product_labels_from_kg_demand_mi_2;
static PyObject *__pyx_kp_s_Product_labels_from_kg_demand_mo;
static PyObject *__pyx_kp_s_Product_labels_in_product_column;
static PyObject *__pyx_n_s_Production;
static PyObject *__pyx_n_s_PySingleSiteMultiSuiteSchedule;
static PyObject *__pyx_n_s_PySingleSiteSimpleSchedule;
static PyObject *__pyx_n_s_Seed;
static PyObject *__pyx_n_s_Start;
static PyObject *__pyx_n_s_StochSingleSiteSimple___make_pys;
static PyObject *__pyx_kp_s_Stored_on;
static PyObject *__pyx_n_s_Task;
static PyObject *__pyx_n_s_Timedelta;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_approval_days;
static PyObject *__pyx_n_s_axis;
static PyObject *__pyx_n_s_backlog_penalty_per_kg;
static PyObject *__pyx_n_s_batches_multiples_of_per_campaig;
static PyObject *__pyx_n_s_batches_table;
static PyObject *__pyx_kp_s_biopharma_scheduling_single_site;
static PyObject *__pyx_n_s_biopharma_scheduling_single_site_2;
static PyObject *__pyx_n_s_campaigns_table;
static PyObject *__pyx_n_s_changeover_days;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_columns;
static PyObject *__pyx_n_s_constraints;
static PyObject *__pyx_kp_s_constraints_are_expected_to_hol;
static PyObject *__pyx_kp_s_constraints_needs_to_be_a_dict;
static PyObject *__pyx_n_s_core;
static PyObject *__pyx_n_s_count_days;
static PyObject *__pyx_kp_s_d_days;
static PyObject *__pyx_n_s_date;
static PyObject *__pyx_kp_s_date_indices_from_kg_demand_max;
static PyObject *__pyx_kp_s_date_indices_from_kg_demand_max_2;
static PyObject *__pyx_kp_s_date_indices_from_kg_demand_min;
static PyObject *__pyx_kp_s_date_indices_from_kg_demand_min_2;
static PyObject *__pyx_kp_s_date_indices_from_kg_demand_mod;
static PyObject *__pyx_n_s_days;
static PyObject *__pyx_n_s_delta;
static PyObject *__pyx_n_s_drop;
static PyObject *__pyx_n_s_dsp_days;
static PyObject *__pyx_n_s_due_dates;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_fillna;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_frame;
static PyObject *__pyx_n_s_get_date_of;
static PyObject *__pyx_n_s_hypervolume;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_inoculation_days;
static PyObject *__pyx_n_s_inventory_penalty_per_kg;
static PyObject *__pyx_kp_s_is_not_allowed_as_a_constraint;
static PyObject *__pyx_kp_s_is_not_allowed_as_an_objective;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_kg_backlog;
static PyObject *__pyx_n_s_kg_demand_max;
static PyObject *__pyx_kp_s_kg_demand_max_must_have_a_date;
static PyObject *__pyx_n_s_kg_demand_min;
static PyObject *__pyx_kp_s_kg_demand_min_must_have_a_date;
static PyObject *__pyx_n_s_kg_demand_mode;
static PyObject *__pyx_kp_s_kg_demand_mode_must_have_a_date;
static PyObject *__pyx_n_s_kg_inventory;
static PyObject *__pyx_n_s_kg_inventory_target;
static PyObject *__pyx_kp_s_kg_inventory_target_must_have_a;
static PyObject *__pyx_n_s_kg_opening_stock;
static PyObject *__pyx_n_s_kg_storage_limits;
static PyObject *__pyx_n_s_kg_supply;
static PyObject *__pyx_n_s_kg_waste;
static PyObject *__pyx_n_s_kg_yield_per_batch_max;
static PyObject *__pyx_n_s_kg_yield_per_batch_min;
static PyObject *__pyx_n_s_kg_yield_per_batch_mode;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max_batches_per_campaign;
static PyObject *__pyx_n_s_mc_random_state;
static PyObject *__pyx_n_s_min_batches_per_campaign;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_num_gens;
static PyObject *__pyx_kp_s_num_gens_needs_to_be_a_positive;
static PyObject *__pyx_n_s_num_mc_simulations;
static PyObject *__pyx_kp_s_num_mc_simulations_needs_to_be;
static PyObject *__pyx_n_s_num_runs;
static PyObject *__pyx_kp_s_num_runs_needs_to_be_a_positive;
static PyObject *__pyx_n_s_num_threads;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_objectives;
static PyObject *__pyx_kp_s_objectives_needs_to_be_a_dict_i;
static PyObject *__pyx_n_s_p_gene_swap;
static PyObject *__pyx_kp_s_p_gene_swap_needs_to_be_a_posit;
static PyObject *__pyx_n_s_p_minus_batch_mut;
static PyObject *__pyx_kp_s_p_minus_batch_mut_needs_to_be_a;
static PyObject *__pyx_n_s_p_plus_batch_mut;
static PyObject *__pyx_kp_s_p_plus_batch_mut_needs_to_be_a;
static PyObject *__pyx_n_s_p_product_mut;
static PyObject *__pyx_kp_s_p_product_mut_needs_to_be_a_pos;
static PyObject *__pyx_n_s_p_xo;
static PyObject *__pyx_kp_s_p_xo_needs_to_be_a_positive_flo;
static PyObject *__pyx_n_s_pandas;
static PyObject *__pyx_n_s_pd;
static PyObject *__pyx_n_s_popsize;
static PyObject *__pyx_kp_s_popsize_needs_to_be_a_positive;
static PyObject *__pyx_n_s_product;
static PyObject *__pyx_kp_s_product_column_is_missing_in_ch;
static PyObject *__pyx_n_s_product_data;
static PyObject *__pyx_kp_s_product_data_is_missing_column;
static PyObject *__pyx_n_s_production_cost_per_kg;
static PyObject *__pyx_n_s_production_days;
static PyObject *__pyx_n_s_pyschedule;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_random_state;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_remove;
static PyObject *__pyx_n_s_run_nsgaii;
static PyObject *__pyx_n_s_run_single_objective_ga;
static PyObject *__pyx_n_s_save_history;
static PyObject *__pyx_n_s_seed_days;
static PyObject *__pyx_kp_s_self_input_data_self_single_site;
static PyObject *__pyx_n_s_sell_price_per_kg;
static PyObject *__pyx_n_s_set_description;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shelf_life_days;
static PyObject *__pyx_n_s_start_date;
static PyObject *__pyx_n_s_starting_length;
static PyObject *__pyx_kp_s_starting_length_needs_to_be_a_p;
static PyObject *__pyx_n_s_storage_cost_per_kg;
static PyObject *__pyx_n_s_tasks_table;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_to_datetime;
static PyObject *__pyx_n_s_tolist;
static PyObject *__pyx_n_s_total;
static PyObject *__pyx_n_s_total_backlog_penalty_mean;
static PyObject *__pyx_n_s_total_cost_mean;
static PyObject *__pyx_n_s_total_inventory_penalty_mean;
static PyObject *__pyx_n_s_total_kg_backlog_mean;
static PyObject *__pyx_n_s_total_kg_inventory_deficit_mean;
static PyObject *__pyx_n_s_total_kg_supply_mean;
static PyObject *__pyx_n_s_total_kg_throughput_mean;
static PyObject *__pyx_n_s_total_kg_waste_mean;
static PyObject *__pyx_n_s_total_production_cost_mean;
static PyObject *__pyx_n_s_total_profit_mean;
static PyObject *__pyx_n_s_total_revenue_mean;
static PyObject *__pyx_n_s_total_storage_cost_mean;
static PyObject *__pyx_n_s_total_waste_cost_mean;
static PyObject *__pyx_n_s_tqdm;
static PyObject *__pyx_n_s_transpose;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_usp_days;
static PyObject *__pyx_n_s_utils;
static PyObject *__pyx_n_s_validate_input;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_n_s_verbose;
static PyObject *__pyx_n_s_waste_cost_per_kg;
static int __pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple___init__(struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *__pyx_v_self, PyObject *__pyx_v_num_mc_simulations, PyObject *__pyx_v_num_runs, PyObject *__pyx_v_num_gens, PyObject *__pyx_v_popsize, PyObject *__pyx_v_starting_length, PyObject *__pyx_v_p_xo, PyObject *__pyx_v_p_product_mut, PyObject *__pyx_v_p_plus_batch_mut, PyObject *__pyx_v_p_minus_batch_mut, PyObject *__pyx_v_p_gene_swap, PyObject *__pyx_v_num_threads, PyObject *__pyx_v_mc_random_state, PyObject *__pyx_v_random_state, PyObject *__pyx_v_verbose, PyObject *__pyx_v_save_history); /* proto */
static PyObject *__pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_2fit(struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *__pyx_v_self, PyObject *__pyx_v_start_date, PyObject *__pyx_v_objectives, PyObject *__pyx_v_kg_demand_min, PyObject *__pyx_v_kg_demand_mode, PyObject *__pyx_v_kg_demand_max, PyObject *__pyx_v_product_data, PyObject *__pyx_v_changeover_days, PyObject *__pyx_v_kg_inventory_target, PyObject *__pyx_v_constraints); /* proto */
static PyObject *__pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_4__validate_input(struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *__pyx_v_self, PyObject *__pyx_v_objectives, PyObject *__pyx_v_constraints, PyObject *__pyx_v_kg_demand_min, PyObject *__pyx_v_kg_demand_mode, PyObject *__pyx_v_kg_demand_max, PyObject *__pyx_v_kg_inventory_target, PyObject *__pyx_v_product_data, PyObject *__pyx_v_changeover_days); /* proto */
static PyObject *__pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_6__count_days(struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *__pyx_v_self, PyObject *__pyx_v_start_date, PyObject *__pyx_v_due_dates); /* proto */
static PyObject *__pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_8__run_single_objective_ga(struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_10__run_nsgaii(struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_17__make_pyschedule_get_date_of(PyObject *__pyx_self, PyObject *__pyx_v_delta); /* proto */
static PyObject *__pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_9schedules___get__(struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_7history___get__(struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_float_0_017718;
static PyObject *__pyx_float_0_130878;
static PyObject *__pyx_float_0_531073;
static PyObject *__pyx_float_0_707202;
static PyObject *__pyx_float_0_834735;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_20;
static PyObject *__pyx_int_100;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_codeobj__37;

/* "biopharma_scheduling/single_site/stochastic.pyx":85
 *     }
 * 
 *     def __init__(             # <<<<<<<<<<<<<<
 *         self,
 *         num_mc_simulations: int=100,
 */

/* Python wrapper */
static int __pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple___init__[] = "\n            PARAMETERS:\n\n                num_mc_simulations: int, default 100\n                    Number of Monte Carlo simulation trials.\n\n                num_runs: int, default 10\n                    Number of times the genetic algorithm will be run with different seeds\n                    for the random number generator. The population is re-generated before \n                    the start of each run.\n\n                num_gens: int, default 1000\n                    Number of generations of the genetic algorithm for a single run.\n\n                popsize: int, default 100\n                    Number of candidate chromosomes.\n\n                starting_length: int, default 1\n                    Starting length of candidate chromosome, i.e. number of genes.\n\n                p_xo: float, default 0.820769\n                    Uniform crossover probability [0.0 - 1.0].\n\n                p_product_mut: float, default 0.141214\n                    Product label mutation probability (per campaign) [0.0 - 1.0].\n\n                p_plus_batch_mut: float, default 0.121224\n                    Probability (per campaign) of increasing the number of batches by 1 [0.0 - 1.0].\n\n                p_minus_batch_mut: float, default 0.213939\n                    Probability (per campaign) of decreasing the number of batches by 1 [0.0 - 1.0].\n\n                p_gene_swap: float, default 0.766782\n                    Probability (per chromosome) of swapping two genes within the chromosome \n                    at random [0.0 - 1.0].\n\n                num_threads: int, optional, default 1\n                    Number of threads to use for evaluating the chromosome StochSingleSiteSimple. \n                    If num_threads = -1, all CPUs are used. If num_threads = 0 or 1, 1 CPU is used.\n\n                mc_random_state, int, optional, default None\n                    If int, mc_random_state is the seed used by the Monter Carlo simulation\n                    ra""ndom number generator.\n\n                random_state, int, optional, default None\n                    If int, random_state is the seed used by the random number generator.\n                \n                verbose: bool, default False\n                    If True, will print out the progress of the algorithm and display a progress bar.\n\n                save_history: bool, default False\n                    If True, will save best solution(s) from each GA run.\n\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple___init__;
#endif
static int __pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_num_mc_simulations = 0;
  PyObject *__pyx_v_num_runs = 0;
  PyObject *__pyx_v_num_gens = 0;
  PyObject *__pyx_v_popsize = 0;
  PyObject *__pyx_v_starting_length = 0;
  PyObject *__pyx_v_p_xo = 0;
  PyObject *__pyx_v_p_product_mut = 0;
  PyObject *__pyx_v_p_plus_batch_mut = 0;
  PyObject *__pyx_v_p_minus_batch_mut = 0;
  PyObject *__pyx_v_p_gene_swap = 0;
  PyObject *__pyx_v_num_threads = 0;
  PyObject *__pyx_v_mc_random_state = 0;
  PyObject *__pyx_v_random_state = 0;
  PyObject *__pyx_v_verbose = 0;
  PyObject *__pyx_v_save_history = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_num_mc_simulations,&__pyx_n_s_num_runs,&__pyx_n_s_num_gens,&__pyx_n_s_popsize,&__pyx_n_s_starting_length,&__pyx_n_s_p_xo,&__pyx_n_s_p_product_mut,&__pyx_n_s_p_plus_batch_mut,&__pyx_n_s_p_minus_batch_mut,&__pyx_n_s_p_gene_swap,&__pyx_n_s_num_threads,&__pyx_n_s_mc_random_state,&__pyx_n_s_random_state,&__pyx_n_s_verbose,&__pyx_n_s_save_history,0};
    PyObject* values[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[0] = ((PyObject *)__pyx_int_100);
    values[1] = ((PyObject *)__pyx_int_20);
    values[2] = ((PyObject *)__pyx_int_100);
    values[3] = ((PyObject *)__pyx_int_100);
    values[4] = ((PyObject *)__pyx_int_1);
    values[5] = ((PyObject *)__pyx_float_0_130878);
    values[6] = ((PyObject *)__pyx_float_0_017718);
    values[7] = ((PyObject *)__pyx_float_0_707202);
    values[8] = ((PyObject *)__pyx_float_0_834735);
    values[9] = ((PyObject *)__pyx_float_0_531073);
    values[10] = ((PyObject *)__pyx_int_1);

    /* "biopharma_scheduling/single_site/stochastic.pyx":98
 *         p_gene_swap: float=0.531073,
 *         num_threads: int=1,
 *         mc_random_state: int=None,             # <<<<<<<<<<<<<<
 *         random_state: int=None,
 *         verbose: bool=False,
 */
    values[11] = ((PyObject *)Py_None);

    /* "biopharma_scheduling/single_site/stochastic.pyx":99
 *         num_threads: int=1,
 *         mc_random_state: int=None,
 *         random_state: int=None,             # <<<<<<<<<<<<<<
 *         verbose: bool=False,
 *         save_history: bool=False,
 */
    values[12] = ((PyObject *)Py_None);

    /* "biopharma_scheduling/single_site/stochastic.pyx":100
 *         mc_random_state: int=None,
 *         random_state: int=None,
 *         verbose: bool=False,             # <<<<<<<<<<<<<<
 *         save_history: bool=False,
 *     ):
 */
    values[13] = ((PyObject *)Py_False);

    /* "biopharma_scheduling/single_site/stochastic.pyx":101
 *         random_state: int=None,
 *         verbose: bool=False,
 *         save_history: bool=False,             # <<<<<<<<<<<<<<
 *     ):
 *         '''
 */
    values[14] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_num_mc_simulations);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_num_runs);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_num_gens);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_popsize);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_starting_length);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_xo);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_product_mut);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_plus_batch_mut);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_minus_batch_mut);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_gene_swap);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_num_threads);
          if (value) { values[10] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mc_random_state);
          if (value) { values[11] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_random_state);
          if (value) { values[12] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_verbose);
          if (value) { values[13] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_save_history);
          if (value) { values[14] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 85, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_num_mc_simulations = values[0];
    __pyx_v_num_runs = values[1];
    __pyx_v_num_gens = values[2];
    __pyx_v_popsize = values[3];
    __pyx_v_starting_length = values[4];
    __pyx_v_p_xo = values[5];
    __pyx_v_p_product_mut = values[6];
    __pyx_v_p_plus_batch_mut = values[7];
    __pyx_v_p_minus_batch_mut = values[8];
    __pyx_v_p_gene_swap = values[9];
    __pyx_v_num_threads = values[10];
    __pyx_v_mc_random_state = values[11];
    __pyx_v_random_state = values[12];
    __pyx_v_verbose = values[13];
    __pyx_v_save_history = values[14];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 15, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 85, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("biopharma_scheduling.single_site.stochastic.StochSingleSiteSimple.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple___init__(((struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *)__pyx_v_self), __pyx_v_num_mc_simulations, __pyx_v_num_runs, __pyx_v_num_gens, __pyx_v_popsize, __pyx_v_starting_length, __pyx_v_p_xo, __pyx_v_p_product_mut, __pyx_v_p_plus_batch_mut, __pyx_v_p_minus_batch_mut, __pyx_v_p_gene_swap, __pyx_v_num_threads, __pyx_v_mc_random_state, __pyx_v_random_state, __pyx_v_verbose, __pyx_v_save_history);

  /* "biopharma_scheduling/single_site/stochastic.pyx":85
 *     }
 * 
 *     def __init__(             # <<<<<<<<<<<<<<
 *         self,
 *         num_mc_simulations: int=100,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple___init__(struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *__pyx_v_self, PyObject *__pyx_v_num_mc_simulations, PyObject *__pyx_v_num_runs, PyObject *__pyx_v_num_gens, PyObject *__pyx_v_popsize, PyObject *__pyx_v_starting_length, PyObject *__pyx_v_p_xo, PyObject *__pyx_v_p_product_mut, PyObject *__pyx_v_p_plus_batch_mut, PyObject *__pyx_v_p_minus_batch_mut, PyObject *__pyx_v_p_gene_swap, PyObject *__pyx_v_num_threads, PyObject *__pyx_v_mc_random_state, PyObject *__pyx_v_random_state, PyObject *__pyx_v_verbose, PyObject *__pyx_v_save_history) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  double __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "biopharma_scheduling/single_site/stochastic.pyx":157
 * 
 *         '''
 *         assert num_mc_simulations >= 1, "'num_mc_simulations' needs to be a positive integer number."             # <<<<<<<<<<<<<<
 *         self.num_mc_simulations = num_mc_simulations
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_num_mc_simulations, __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_num_mc_simulations_needs_to_be);
      __PYX_ERR(0, 157, __pyx_L1_error)
    }
  }
  #endif

  /* "biopharma_scheduling/single_site/stochastic.pyx":158
 *         '''
 *         assert num_mc_simulations >= 1, "'num_mc_simulations' needs to be a positive integer number."
 *         self.num_mc_simulations = num_mc_simulations             # <<<<<<<<<<<<<<
 * 
 *         assert num_runs >= 1, "'num_runs' needs to be a positive integer number."
 */
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_num_mc_simulations); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 158, __pyx_L1_error)
  __pyx_v_self->num_mc_simulations = __pyx_t_3;

  /* "biopharma_scheduling/single_site/stochastic.pyx":160
 *         self.num_mc_simulations = num_mc_simulations
 * 
 *         assert num_runs >= 1, "'num_runs' needs to be a positive integer number."             # <<<<<<<<<<<<<<
 *         self.num_runs = num_runs
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_num_runs, __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 160, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 160, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_num_runs_needs_to_be_a_positive);
      __PYX_ERR(0, 160, __pyx_L1_error)
    }
  }
  #endif

  /* "biopharma_scheduling/single_site/stochastic.pyx":161
 * 
 *         assert num_runs >= 1, "'num_runs' needs to be a positive integer number."
 *         self.num_runs = num_runs             # <<<<<<<<<<<<<<
 * 
 *         assert num_gens >= 1, "'num_gens' needs to be a positive integer number."
 */
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_num_runs); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 161, __pyx_L1_error)
  __pyx_v_self->num_runs = __pyx_t_3;

  /* "biopharma_scheduling/single_site/stochastic.pyx":163
 *         self.num_runs = num_runs
 * 
 *         assert num_gens >= 1, "'num_gens' needs to be a positive integer number."             # <<<<<<<<<<<<<<
 *         self.num_gens = num_gens
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_num_gens, __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 163, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 163, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_num_gens_needs_to_be_a_positive);
      __PYX_ERR(0, 163, __pyx_L1_error)
    }
  }
  #endif

  /* "biopharma_scheduling/single_site/stochastic.pyx":164
 * 
 *         assert num_gens >= 1, "'num_gens' needs to be a positive integer number."
 *         self.num_gens = num_gens             # <<<<<<<<<<<<<<
 * 
 *         assert popsize >= 1, "'popsize' needs to be a positive integer number."
 */
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_num_gens); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 164, __pyx_L1_error)
  __pyx_v_self->num_gens = __pyx_t_3;

  /* "biopharma_scheduling/single_site/stochastic.pyx":166
 *         self.num_gens = num_gens
 * 
 *         assert popsize >= 1, "'popsize' needs to be a positive integer number."             # <<<<<<<<<<<<<<
 *         self.popsize = popsize
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_popsize, __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 166, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 166, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_popsize_needs_to_be_a_positive);
      __PYX_ERR(0, 166, __pyx_L1_error)
    }
  }
  #endif

  /* "biopharma_scheduling/single_site/stochastic.pyx":167
 * 
 *         assert popsize >= 1, "'popsize' needs to be a positive integer number."
 *         self.popsize = popsize             # <<<<<<<<<<<<<<
 * 
 *         assert starting_length >= 1, "'starting_length' needs to be a positive integer number."
 */
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_popsize); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 167, __pyx_L1_error)
  __pyx_v_self->popsize = __pyx_t_3;

  /* "biopharma_scheduling/single_site/stochastic.pyx":169
 *         self.popsize = popsize
 * 
 *         assert starting_length >= 1, "'starting_length' needs to be a positive integer number."             # <<<<<<<<<<<<<<
 *         self.starting_length = starting_length
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_starting_length, __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 169, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_starting_length_needs_to_be_a_p);
      __PYX_ERR(0, 169, __pyx_L1_error)
    }
  }
  #endif

  /* "biopharma_scheduling/single_site/stochastic.pyx":170
 * 
 *         assert starting_length >= 1, "'starting_length' needs to be a positive integer number."
 *         self.starting_length = starting_length             # <<<<<<<<<<<<<<
 * 
 *         assert p_xo >= 0.0 and p_xo <= 1.0, \
 */
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_starting_length); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 170, __pyx_L1_error)
  __pyx_v_self->starting_length = __pyx_t_3;

  /* "biopharma_scheduling/single_site/stochastic.pyx":172
 *         self.starting_length = starting_length
 * 
 *         assert p_xo >= 0.0 and p_xo <= 1.0, \             # <<<<<<<<<<<<<<
 *         "'p_xo' needs to be a positive floating point number in range [0.0 - 1.0]."
 *         self.p_xo = p_xo
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_p_xo, __pyx_float_0_0, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 172, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 172, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_p_xo, __pyx_float_1_0, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 172, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 172, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_p_xo_needs_to_be_a_positive_flo);
      __PYX_ERR(0, 172, __pyx_L1_error)
    }
  }
  #endif

  /* "biopharma_scheduling/single_site/stochastic.pyx":174
 *         assert p_xo >= 0.0 and p_xo <= 1.0, \
 *         "'p_xo' needs to be a positive floating point number in range [0.0 - 1.0]."
 *         self.p_xo = p_xo             # <<<<<<<<<<<<<<
 * 
 *         assert p_product_mut >= 0.0 and p_product_mut <= 1.0, \
 */
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_p_xo); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 174, __pyx_L1_error)
  __pyx_v_self->p_xo = __pyx_t_5;

  /* "biopharma_scheduling/single_site/stochastic.pyx":176
 *         self.p_xo = p_xo
 * 
 *         assert p_product_mut >= 0.0 and p_product_mut <= 1.0, \             # <<<<<<<<<<<<<<
 *         "'p_product_mut' needs to be a positive floating point number in range [0.0 - 1.0]."
 *         self.p_product_mut = p_product_mut
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_p_product_mut, __pyx_float_0_0, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_p_product_mut, __pyx_float_1_0, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_4;
    __pyx_L5_bool_binop_done:;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_p_product_mut_needs_to_be_a_pos);
      __PYX_ERR(0, 176, __pyx_L1_error)
    }
  }
  #endif

  /* "biopharma_scheduling/single_site/stochastic.pyx":178
 *         assert p_product_mut >= 0.0 and p_product_mut <= 1.0, \
 *         "'p_product_mut' needs to be a positive floating point number in range [0.0 - 1.0]."
 *         self.p_product_mut = p_product_mut             # <<<<<<<<<<<<<<
 * 
 *         assert p_plus_batch_mut >= 0.0 and p_plus_batch_mut <= 1.0, \
 */
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_p_product_mut); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 178, __pyx_L1_error)
  __pyx_v_self->p_product_mut = __pyx_t_5;

  /* "biopharma_scheduling/single_site/stochastic.pyx":180
 *         self.p_product_mut = p_product_mut
 * 
 *         assert p_plus_batch_mut >= 0.0 and p_plus_batch_mut <= 1.0, \             # <<<<<<<<<<<<<<
 *         "'p_plus_batch_mut' needs to be a positive floating point number in range [0.0 - 1.0]."
 *         self.p_plus_batch_mut = p_plus_batch_mut
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_p_plus_batch_mut, __pyx_float_0_0, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_p_plus_batch_mut, __pyx_float_1_0, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_4;
    __pyx_L7_bool_binop_done:;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_p_plus_batch_mut_needs_to_be_a);
      __PYX_ERR(0, 180, __pyx_L1_error)
    }
  }
  #endif

  /* "biopharma_scheduling/single_site/stochastic.pyx":182
 *         assert p_plus_batch_mut >= 0.0 and p_plus_batch_mut <= 1.0, \
 *         "'p_plus_batch_mut' needs to be a positive floating point number in range [0.0 - 1.0]."
 *         self.p_plus_batch_mut = p_plus_batch_mut             # <<<<<<<<<<<<<<
 * 
 *         assert p_minus_batch_mut >= 0.0 and p_minus_batch_mut <= 1.0, \
 */
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_p_plus_batch_mut); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 182, __pyx_L1_error)
  __pyx_v_self->p_plus_batch_mut = __pyx_t_5;

  /* "biopharma_scheduling/single_site/stochastic.pyx":184
 *         self.p_plus_batch_mut = p_plus_batch_mut
 * 
 *         assert p_minus_batch_mut >= 0.0 and p_minus_batch_mut <= 1.0, \             # <<<<<<<<<<<<<<
 *         "'p_minus_batch_mut' needs to be a positive floating point number in range [0.0 - 1.0]."
 *         self.p_minus_batch_mut = p_minus_batch_mut
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_p_minus_batch_mut, __pyx_float_0_0, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_p_minus_batch_mut, __pyx_float_1_0, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_4;
    __pyx_L9_bool_binop_done:;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_p_minus_batch_mut_needs_to_be_a);
      __PYX_ERR(0, 184, __pyx_L1_error)
    }
  }
  #endif

  /* "biopharma_scheduling/single_site/stochastic.pyx":186
 *         assert p_minus_batch_mut >= 0.0 and p_minus_batch_mut <= 1.0, \
 *         "'p_minus_batch_mut' needs to be a positive floating point number in range [0.0 - 1.0]."
 *         self.p_minus_batch_mut = p_minus_batch_mut             # <<<<<<<<<<<<<<
 * 
 *         assert p_gene_swap >= 0.0 and p_gene_swap <= 1.0, \
 */
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_p_minus_batch_mut); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 186, __pyx_L1_error)
  __pyx_v_self->p_minus_batch_mut = __pyx_t_5;

  /* "biopharma_scheduling/single_site/stochastic.pyx":188
 *         self.p_minus_batch_mut = p_minus_batch_mut
 * 
 *         assert p_gene_swap >= 0.0 and p_gene_swap <= 1.0, \             # <<<<<<<<<<<<<<
 *         "'p_gene_swap' needs to be a positive floating point number in range [0.0 - 1.0]."
 *         self.p_gene_swap = p_gene_swap
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_p_gene_swap, __pyx_float_0_0, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 188, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_p_gene_swap, __pyx_float_1_0, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 188, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_4;
    __pyx_L11_bool_binop_done:;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_p_gene_swap_needs_to_be_a_posit);
      __PYX_ERR(0, 188, __pyx_L1_error)
    }
  }
  #endif

  /* "biopharma_scheduling/single_site/stochastic.pyx":190
 *         assert p_gene_swap >= 0.0 and p_gene_swap <= 1.0, \
 *         "'p_gene_swap' needs to be a positive floating point number in range [0.0 - 1.0]."
 *         self.p_gene_swap = p_gene_swap             # <<<<<<<<<<<<<<
 * 
 *         self.num_threads = num_threads
 */
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_p_gene_swap); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 190, __pyx_L1_error)
  __pyx_v_self->p_gene_swap = __pyx_t_5;

  /* "biopharma_scheduling/single_site/stochastic.pyx":192
 *         self.p_gene_swap = p_gene_swap
 * 
 *         self.num_threads = num_threads             # <<<<<<<<<<<<<<
 *         self.mc_random_state = mc_random_state if mc_random_state else -1
 *         self.random_state = random_state if random_state else -1
 */
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_num_threads); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 192, __pyx_L1_error)
  __pyx_v_self->num_threads = __pyx_t_3;

  /* "biopharma_scheduling/single_site/stochastic.pyx":193
 * 
 *         self.num_threads = num_threads
 *         self.mc_random_state = mc_random_state if mc_random_state else -1             # <<<<<<<<<<<<<<
 *         self.random_state = random_state if random_state else -1
 *         self.verbose = verbose
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_mc_random_state); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 193, __pyx_L1_error)
  if (__pyx_t_2) {
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_mc_random_state); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 193, __pyx_L1_error)
    __pyx_t_3 = __pyx_t_6;
  } else {
    __pyx_t_3 = -1;
  }
  __pyx_v_self->mc_random_state = __pyx_t_3;

  /* "biopharma_scheduling/single_site/stochastic.pyx":194
 *         self.num_threads = num_threads
 *         self.mc_random_state = mc_random_state if mc_random_state else -1
 *         self.random_state = random_state if random_state else -1             # <<<<<<<<<<<<<<
 *         self.verbose = verbose
 *         self.save_history = save_history
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_random_state); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 194, __pyx_L1_error)
  if (__pyx_t_2) {
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_random_state); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 194, __pyx_L1_error)
    __pyx_t_3 = __pyx_t_6;
  } else {
    __pyx_t_3 = -1;
  }
  __pyx_v_self->random_state = __pyx_t_3;

  /* "biopharma_scheduling/single_site/stochastic.pyx":195
 *         self.mc_random_state = mc_random_state if mc_random_state else -1
 *         self.random_state = random_state if random_state else -1
 *         self.verbose = verbose             # <<<<<<<<<<<<<<
 *         self.save_history = save_history
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_verbose); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 195, __pyx_L1_error)
  __pyx_v_self->verbose = __pyx_t_3;

  /* "biopharma_scheduling/single_site/stochastic.pyx":196
 *         self.random_state = random_state if random_state else -1
 *         self.verbose = verbose
 *         self.save_history = save_history             # <<<<<<<<<<<<<<
 * 
 *         self.objectives = {
 */
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_save_history); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 196, __pyx_L1_error)
  __pyx_v_self->save_history = __pyx_t_3;

  /* "biopharma_scheduling/single_site/stochastic.pyx":199
 * 
 *         self.objectives = {
 *             'total_kg_inventory_deficit_mean': OBJECTIVES.TOTAL_KG_INVENTORY_DEFICIT_MEAN,             # <<<<<<<<<<<<<<
 *             'total_kg_throughput_mean': OBJECTIVES.TOTAL_KG_THROUGHPUT_MEAN,
 *             'total_kg_backlog_mean': OBJECTIVES.TOTAL_KG_BACKLOG_MEAN,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyInt_From_enum__stochastic_3a__3a_OBJECTIVES(stochastic::TOTAL_KG_INVENTORY_DEFICIT_MEAN); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_total_kg_inventory_deficit_mean, __pyx_t_7) < 0) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":200
 *         self.objectives = {
 *             'total_kg_inventory_deficit_mean': OBJECTIVES.TOTAL_KG_INVENTORY_DEFICIT_MEAN,
 *             'total_kg_throughput_mean': OBJECTIVES.TOTAL_KG_THROUGHPUT_MEAN,             # <<<<<<<<<<<<<<
 *             'total_kg_backlog_mean': OBJECTIVES.TOTAL_KG_BACKLOG_MEAN,
 *             'total_kg_supply_mean': OBJECTIVES.TOTAL_KG_SUPPLY_MEAN,
 */
  __pyx_t_7 = __Pyx_PyInt_From_enum__stochastic_3a__3a_OBJECTIVES(stochastic::TOTAL_KG_THROUGHPUT_MEAN); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_total_kg_throughput_mean, __pyx_t_7) < 0) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":201
 *             'total_kg_inventory_deficit_mean': OBJECTIVES.TOTAL_KG_INVENTORY_DEFICIT_MEAN,
 *             'total_kg_throughput_mean': OBJECTIVES.TOTAL_KG_THROUGHPUT_MEAN,
 *             'total_kg_backlog_mean': OBJECTIVES.TOTAL_KG_BACKLOG_MEAN,             # <<<<<<<<<<<<<<
 *             'total_kg_supply_mean': OBJECTIVES.TOTAL_KG_SUPPLY_MEAN,
 *             'total_kg_waste_mean': OBJECTIVES.TOTAL_KG_WASTE_MEAN,
 */
  __pyx_t_7 = __Pyx_PyInt_From_enum__stochastic_3a__3a_OBJECTIVES(stochastic::TOTAL_KG_BACKLOG_MEAN); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_total_kg_backlog_mean, __pyx_t_7) < 0) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":202
 *             'total_kg_throughput_mean': OBJECTIVES.TOTAL_KG_THROUGHPUT_MEAN,
 *             'total_kg_backlog_mean': OBJECTIVES.TOTAL_KG_BACKLOG_MEAN,
 *             'total_kg_supply_mean': OBJECTIVES.TOTAL_KG_SUPPLY_MEAN,             # <<<<<<<<<<<<<<
 *             'total_kg_waste_mean': OBJECTIVES.TOTAL_KG_WASTE_MEAN,
 *             'total_inventory_penalty_mean': OBJECTIVES.TOTAL_INVENTORY_PENALTY_MEAN,
 */
  __pyx_t_7 = __Pyx_PyInt_From_enum__stochastic_3a__3a_OBJECTIVES(stochastic::TOTAL_KG_SUPPLY_MEAN); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_total_kg_supply_mean, __pyx_t_7) < 0) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":203
 *             'total_kg_backlog_mean': OBJECTIVES.TOTAL_KG_BACKLOG_MEAN,
 *             'total_kg_supply_mean': OBJECTIVES.TOTAL_KG_SUPPLY_MEAN,
 *             'total_kg_waste_mean': OBJECTIVES.TOTAL_KG_WASTE_MEAN,             # <<<<<<<<<<<<<<
 *             'total_inventory_penalty_mean': OBJECTIVES.TOTAL_INVENTORY_PENALTY_MEAN,
 *             'total_backlog_penalty_mean': OBJECTIVES.TOTAL_BACKLOG_PENALTY_MEAN,
 */
  __pyx_t_7 = __Pyx_PyInt_From_enum__stochastic_3a__3a_OBJECTIVES(stochastic::TOTAL_KG_WASTE_MEAN); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_total_kg_waste_mean, __pyx_t_7) < 0) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":204
 *             'total_kg_supply_mean': OBJECTIVES.TOTAL_KG_SUPPLY_MEAN,
 *             'total_kg_waste_mean': OBJECTIVES.TOTAL_KG_WASTE_MEAN,
 *             'total_inventory_penalty_mean': OBJECTIVES.TOTAL_INVENTORY_PENALTY_MEAN,             # <<<<<<<<<<<<<<
 *             'total_backlog_penalty_mean': OBJECTIVES.TOTAL_BACKLOG_PENALTY_MEAN,
 *             'total_production_cost_mean': OBJECTIVES.TOTAL_PRODUCTION_COST_MEAN,
 */
  __pyx_t_7 = __Pyx_PyInt_From_enum__stochastic_3a__3a_OBJECTIVES(stochastic::TOTAL_INVENTORY_PENALTY_MEAN); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_total_inventory_penalty_mean, __pyx_t_7) < 0) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":205
 *             'total_kg_waste_mean': OBJECTIVES.TOTAL_KG_WASTE_MEAN,
 *             'total_inventory_penalty_mean': OBJECTIVES.TOTAL_INVENTORY_PENALTY_MEAN,
 *             'total_backlog_penalty_mean': OBJECTIVES.TOTAL_BACKLOG_PENALTY_MEAN,             # <<<<<<<<<<<<<<
 *             'total_production_cost_mean': OBJECTIVES.TOTAL_PRODUCTION_COST_MEAN,
 *             'total_storage_cost_mean': OBJECTIVES.TOTAL_STORAGE_COST_MEAN,
 */
  __pyx_t_7 = __Pyx_PyInt_From_enum__stochastic_3a__3a_OBJECTIVES(stochastic::TOTAL_BACKLOG_PENALTY_MEAN); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_total_backlog_penalty_mean, __pyx_t_7) < 0) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":206
 *             'total_inventory_penalty_mean': OBJECTIVES.TOTAL_INVENTORY_PENALTY_MEAN,
 *             'total_backlog_penalty_mean': OBJECTIVES.TOTAL_BACKLOG_PENALTY_MEAN,
 *             'total_production_cost_mean': OBJECTIVES.TOTAL_PRODUCTION_COST_MEAN,             # <<<<<<<<<<<<<<
 *             'total_storage_cost_mean': OBJECTIVES.TOTAL_STORAGE_COST_MEAN,
 *             'total_waste_cost_mean': OBJECTIVES.TOTAL_WASTE_COST_MEAN,
 */
  __pyx_t_7 = __Pyx_PyInt_From_enum__stochastic_3a__3a_OBJECTIVES(stochastic::TOTAL_PRODUCTION_COST_MEAN); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_total_production_cost_mean, __pyx_t_7) < 0) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":207
 *             'total_backlog_penalty_mean': OBJECTIVES.TOTAL_BACKLOG_PENALTY_MEAN,
 *             'total_production_cost_mean': OBJECTIVES.TOTAL_PRODUCTION_COST_MEAN,
 *             'total_storage_cost_mean': OBJECTIVES.TOTAL_STORAGE_COST_MEAN,             # <<<<<<<<<<<<<<
 *             'total_waste_cost_mean': OBJECTIVES.TOTAL_WASTE_COST_MEAN,
 *             'total_revenue_mean': OBJECTIVES.TOTAL_REVENUE_MEAN,
 */
  __pyx_t_7 = __Pyx_PyInt_From_enum__stochastic_3a__3a_OBJECTIVES(stochastic::TOTAL_STORAGE_COST_MEAN); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_total_storage_cost_mean, __pyx_t_7) < 0) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":208
 *             'total_production_cost_mean': OBJECTIVES.TOTAL_PRODUCTION_COST_MEAN,
 *             'total_storage_cost_mean': OBJECTIVES.TOTAL_STORAGE_COST_MEAN,
 *             'total_waste_cost_mean': OBJECTIVES.TOTAL_WASTE_COST_MEAN,             # <<<<<<<<<<<<<<
 *             'total_revenue_mean': OBJECTIVES.TOTAL_REVENUE_MEAN,
 *             'total_profit_mean': OBJECTIVES.TOTAL_PROFIT_MEAN,
 */
  __pyx_t_7 = __Pyx_PyInt_From_enum__stochastic_3a__3a_OBJECTIVES(stochastic::TOTAL_WASTE_COST_MEAN); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_total_waste_cost_mean, __pyx_t_7) < 0) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":209
 *             'total_storage_cost_mean': OBJECTIVES.TOTAL_STORAGE_COST_MEAN,
 *             'total_waste_cost_mean': OBJECTIVES.TOTAL_WASTE_COST_MEAN,
 *             'total_revenue_mean': OBJECTIVES.TOTAL_REVENUE_MEAN,             # <<<<<<<<<<<<<<
 *             'total_profit_mean': OBJECTIVES.TOTAL_PROFIT_MEAN,
 *             'total_cost_mean': OBJECTIVES.TOTAL_COST_MEAN
 */
  __pyx_t_7 = __Pyx_PyInt_From_enum__stochastic_3a__3a_OBJECTIVES(stochastic::TOTAL_REVENUE_MEAN); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_total_revenue_mean, __pyx_t_7) < 0) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":210
 *             'total_waste_cost_mean': OBJECTIVES.TOTAL_WASTE_COST_MEAN,
 *             'total_revenue_mean': OBJECTIVES.TOTAL_REVENUE_MEAN,
 *             'total_profit_mean': OBJECTIVES.TOTAL_PROFIT_MEAN,             # <<<<<<<<<<<<<<
 *             'total_cost_mean': OBJECTIVES.TOTAL_COST_MEAN
 *         }
 */
  __pyx_t_7 = __Pyx_PyInt_From_enum__stochastic_3a__3a_OBJECTIVES(stochastic::TOTAL_PROFIT_MEAN); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_total_profit_mean, __pyx_t_7) < 0) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":211
 *             'total_revenue_mean': OBJECTIVES.TOTAL_REVENUE_MEAN,
 *             'total_profit_mean': OBJECTIVES.TOTAL_PROFIT_MEAN,
 *             'total_cost_mean': OBJECTIVES.TOTAL_COST_MEAN             # <<<<<<<<<<<<<<
 *         }
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_enum__stochastic_3a__3a_OBJECTIVES(stochastic::TOTAL_COST_MEAN); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_total_cost_mean, __pyx_t_7) < 0) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":198
 *         self.save_history = save_history
 * 
 *         self.objectives = {             # <<<<<<<<<<<<<<
 *             'total_kg_inventory_deficit_mean': OBJECTIVES.TOTAL_KG_INVENTORY_DEFICIT_MEAN,
 *             'total_kg_throughput_mean': OBJECTIVES.TOTAL_KG_THROUGHPUT_MEAN,
 */
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->objectives);
  __Pyx_DECREF(__pyx_v_self->objectives);
  __pyx_v_self->objectives = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":85
 *     }
 * 
 *     def __init__(             # <<<<<<<<<<<<<<
 *         self,
 *         num_mc_simulations: int=100,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("biopharma_scheduling.single_site.stochastic.StochSingleSiteSimple.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "biopharma_scheduling/single_site/stochastic.pyx":214
 *         }
 * 
 *     def fit(             # <<<<<<<<<<<<<<
 *         self,
 *         start_date: str,
 */

/* Python wrapper */
static PyObject *__pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_3fit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_3fit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_start_date = 0;
  PyObject *__pyx_v_objectives = 0;
  PyObject *__pyx_v_kg_demand_min = 0;
  PyObject *__pyx_v_kg_demand_mode = 0;
  PyObject *__pyx_v_kg_demand_max = 0;
  PyObject *__pyx_v_product_data = 0;
  PyObject *__pyx_v_changeover_days = 0;
  PyObject *__pyx_v_kg_inventory_target = 0;
  PyObject *__pyx_v_constraints = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fit (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_start_date,&__pyx_n_s_objectives,&__pyx_n_s_kg_demand_min,&__pyx_n_s_kg_demand_mode,&__pyx_n_s_kg_demand_max,&__pyx_n_s_product_data,&__pyx_n_s_changeover_days,&__pyx_n_s_kg_inventory_target,&__pyx_n_s_constraints,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};

    /* "biopharma_scheduling/single_site/stochastic.pyx":223
 *         product_data: pd.core.frame.DataFrame,
 *         changeover_days: pd.core.frame.DataFrame,
 *         kg_inventory_target: pd.core.frame.DataFrame=None,             # <<<<<<<<<<<<<<
 *         constraints: dict=None,
 *     ):
 */
    values[7] = ((PyObject *)Py_None);

    /* "biopharma_scheduling/single_site/stochastic.pyx":224
 *         changeover_days: pd.core.frame.DataFrame,
 *         kg_inventory_target: pd.core.frame.DataFrame=None,
 *         constraints: dict=None,             # <<<<<<<<<<<<<<
 *     ):
 *         self.__validate_input(
 */
    values[8] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_start_date)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_objectives)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fit", 0, 7, 9, 1); __PYX_ERR(0, 214, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_kg_demand_min)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fit", 0, 7, 9, 2); __PYX_ERR(0, 214, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_kg_demand_mode)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fit", 0, 7, 9, 3); __PYX_ERR(0, 214, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_kg_demand_max)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fit", 0, 7, 9, 4); __PYX_ERR(0, 214, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_product_data)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fit", 0, 7, 9, 5); __PYX_ERR(0, 214, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_changeover_days)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fit", 0, 7, 9, 6); __PYX_ERR(0, 214, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_kg_inventory_target);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_constraints);
          if (value) { values[8] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fit") < 0)) __PYX_ERR(0, 214, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_start_date = values[0];
    __pyx_v_objectives = values[1];
    __pyx_v_kg_demand_min = values[2];
    __pyx_v_kg_demand_mode = values[3];
    __pyx_v_kg_demand_max = values[4];
    __pyx_v_product_data = values[5];
    __pyx_v_changeover_days = values[6];
    __pyx_v_kg_inventory_target = values[7];
    __pyx_v_constraints = values[8];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fit", 0, 7, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 214, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("biopharma_scheduling.single_site.stochastic.StochSingleSiteSimple.fit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_2fit(((struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *)__pyx_v_self), __pyx_v_start_date, __pyx_v_objectives, __pyx_v_kg_demand_min, __pyx_v_kg_demand_mode, __pyx_v_kg_demand_max, __pyx_v_product_data, __pyx_v_changeover_days, __pyx_v_kg_inventory_target, __pyx_v_constraints);

  /* "biopharma_scheduling/single_site/stochastic.pyx":214
 *         }
 * 
 *     def fit(             # <<<<<<<<<<<<<<
 *         self,
 *         start_date: str,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_2fit(struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *__pyx_v_self, PyObject *__pyx_v_start_date, PyObject *__pyx_v_objectives, PyObject *__pyx_v_kg_demand_min, PyObject *__pyx_v_kg_demand_mode, PyObject *__pyx_v_kg_demand_max, PyObject *__pyx_v_product_data, PyObject *__pyx_v_changeover_days, PyObject *__pyx_v_kg_inventory_target, PyObject *__pyx_v_constraints) {
  PyObject *__pyx_v_days_per_period = NULL;
  std::unordered_map<enum stochastic::OBJECTIVES,int>  __pyx_v_cpp_objectives;
  PyObject *__pyx_v_obj = NULL;
  PyObject *__pyx_v_coef = NULL;
  std::pair<int,double>  __pyx_v_p;
  std::unordered_map<enum stochastic::OBJECTIVES,std::pair<int,double> >  __pyx_v_cpp_constraints;
  PyObject *__pyx_v_cons = NULL;
  PyObject *__pyx_v_bound = NULL;
  std::vector<std::vector<double> >  __pyx_v_cpp_kg_inventory_target;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *(*__pyx_t_9)(PyObject *);
  enum stochastic::OBJECTIVES __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  double __pyx_t_15;
  int __pyx_t_16;
  std::vector<std::vector<double> >  __pyx_t_17;
  std::vector<int>  __pyx_t_18;
  std::vector<std::vector<double> >  __pyx_t_19;
  std::vector<std::vector<double> >  __pyx_t_20;
  std::vector<double>  __pyx_t_21;
  std::vector<double>  __pyx_t_22;
  std::vector<double>  __pyx_t_23;
  std::vector<double>  __pyx_t_24;
  std::vector<double>  __pyx_t_25;
  std::vector<double>  __pyx_t_26;
  std::vector<double>  __pyx_t_27;
  std::vector<double>  __pyx_t_28;
  std::vector<double>  __pyx_t_29;
  std::vector<double>  __pyx_t_30;
  std::vector<double>  __pyx_t_31;
  std::vector<int>  __pyx_t_32;
  std::vector<int>  __pyx_t_33;
  std::vector<int>  __pyx_t_34;
  std::vector<int>  __pyx_t_35;
  std::vector<int>  __pyx_t_36;
  std::vector<int>  __pyx_t_37;
  std::vector<int>  __pyx_t_38;
  std::vector<int>  __pyx_t_39;
  std::vector<int>  __pyx_t_40;
  std::vector<int>  __pyx_t_41;
  std::vector<std::vector<int> >  __pyx_t_42;
  std::vector<std::vector<double> >  *__pyx_t_43;
  std::unordered_map<enum stochastic::OBJECTIVES,std::pair<int,double> >  *__pyx_t_44;
  __Pyx_RefNannySetupContext("fit", 0);

  /* "biopharma_scheduling/single_site/stochastic.pyx":226
 *         constraints: dict=None,
 *     ):
 *         self.__validate_input(             # <<<<<<<<<<<<<<
 *             objectives,
 *             constraints,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_validate_input); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "biopharma_scheduling/single_site/stochastic.pyx":235
 *             product_data,
 *             changeover_days
 *         )             # <<<<<<<<<<<<<<
 * 
 *         days_per_period = self.__count_days(start_date, kg_demand_mode.index.values.tolist())
 */
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[9] = {__pyx_t_3, __pyx_v_objectives, __pyx_v_constraints, __pyx_v_kg_demand_min, __pyx_v_kg_demand_mode, __pyx_v_kg_demand_max, __pyx_v_kg_inventory_target, __pyx_v_product_data, __pyx_v_changeover_days};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 8+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[9] = {__pyx_t_3, __pyx_v_objectives, __pyx_v_constraints, __pyx_v_kg_demand_min, __pyx_v_kg_demand_mode, __pyx_v_kg_demand_max, __pyx_v_kg_inventory_target, __pyx_v_product_data, __pyx_v_changeover_days};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 8+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(8+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_objectives);
    __Pyx_GIVEREF(__pyx_v_objectives);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_objectives);
    __Pyx_INCREF(__pyx_v_constraints);
    __Pyx_GIVEREF(__pyx_v_constraints);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_constraints);
    __Pyx_INCREF(__pyx_v_kg_demand_min);
    __Pyx_GIVEREF(__pyx_v_kg_demand_min);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_kg_demand_min);
    __Pyx_INCREF(__pyx_v_kg_demand_mode);
    __Pyx_GIVEREF(__pyx_v_kg_demand_mode);
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_v_kg_demand_mode);
    __Pyx_INCREF(__pyx_v_kg_demand_max);
    __Pyx_GIVEREF(__pyx_v_kg_demand_max);
    PyTuple_SET_ITEM(__pyx_t_5, 4+__pyx_t_4, __pyx_v_kg_demand_max);
    __Pyx_INCREF(__pyx_v_kg_inventory_target);
    __Pyx_GIVEREF(__pyx_v_kg_inventory_target);
    PyTuple_SET_ITEM(__pyx_t_5, 5+__pyx_t_4, __pyx_v_kg_inventory_target);
    __Pyx_INCREF(__pyx_v_product_data);
    __Pyx_GIVEREF(__pyx_v_product_data);
    PyTuple_SET_ITEM(__pyx_t_5, 6+__pyx_t_4, __pyx_v_product_data);
    __Pyx_INCREF(__pyx_v_changeover_days);
    __Pyx_GIVEREF(__pyx_v_changeover_days);
    PyTuple_SET_ITEM(__pyx_t_5, 7+__pyx_t_4, __pyx_v_changeover_days);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":237
 *         )
 * 
 *         days_per_period = self.__count_days(start_date, kg_demand_mode.index.values.tolist())             # <<<<<<<<<<<<<<
 * 
 *         self.objectives_coefficients_list = []
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_count_days); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_mode, __pyx_n_s_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tolist); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 237, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_start_date, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_start_date, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_start_date);
    __Pyx_GIVEREF(__pyx_v_start_date);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_4, __pyx_v_start_date);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_4, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_days_per_period = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":239
 *         days_per_period = self.__count_days(start_date, kg_demand_mode.index.values.tolist())
 * 
 *         self.objectives_coefficients_list = []             # <<<<<<<<<<<<<<
 *         cdef unordered_map[OBJECTIVES, int] cpp_objectives
 *         for obj, coef in objectives.items():
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->objectives_coefficients_list);
  __Pyx_DECREF(__pyx_v_self->objectives_coefficients_list);
  __pyx_v_self->objectives_coefficients_list = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":241
 *         self.objectives_coefficients_list = []
 *         cdef unordered_map[OBJECTIVES, int] cpp_objectives
 *         for obj, coef in objectives.items():             # <<<<<<<<<<<<<<
 *             cpp_objectives[self.objectives[obj]] = coef
 *             self.objectives_coefficients_list.append((obj, coef))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_objectives, __pyx_n_s_items); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 241, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 241, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 241, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_8(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 241, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 241, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 241, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 241, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 241, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_3)->tp_iternext;
      index = 0; __pyx_t_6 = __pyx_t_9(__pyx_t_3); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 1; __pyx_t_5 = __pyx_t_9(__pyx_t_3); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_3), 2) < 0) __PYX_ERR(0, 241, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 241, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_obj, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_coef, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":242
 *         cdef unordered_map[OBJECTIVES, int] cpp_objectives
 *         for obj, coef in objectives.items():
 *             cpp_objectives[self.objectives[obj]] = coef             # <<<<<<<<<<<<<<
 *             self.objectives_coefficients_list.append((obj, coef))
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_coef); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 242, __pyx_L1_error)
    __pyx_t_1 = PyObject_GetItem(__pyx_v_self->objectives, __pyx_v_obj); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = ((enum stochastic::OBJECTIVES)__Pyx_PyInt_As_enum__stochastic_3a__3a_OBJECTIVES(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 242, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    (__pyx_v_cpp_objectives[__pyx_t_10]) = __pyx_t_4;

    /* "biopharma_scheduling/single_site/stochastic.pyx":243
 *         for obj, coef in objectives.items():
 *             cpp_objectives[self.objectives[obj]] = coef
 *             self.objectives_coefficients_list.append((obj, coef))             # <<<<<<<<<<<<<<
 * 
 *         cdef pair[int, double] p
 */
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_obj);
    __Pyx_GIVEREF(__pyx_v_obj);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_obj);
    __Pyx_INCREF(__pyx_v_coef);
    __Pyx_GIVEREF(__pyx_v_coef);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_coef);
    __pyx_t_11 = __Pyx_PyObject_Append(__pyx_v_self->objectives_coefficients_list, __pyx_t_1); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":241
 *         self.objectives_coefficients_list = []
 *         cdef unordered_map[OBJECTIVES, int] cpp_objectives
 *         for obj, coef in objectives.items():             # <<<<<<<<<<<<<<
 *             cpp_objectives[self.objectives[obj]] = coef
 *             self.objectives_coefficients_list.append((obj, coef))
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":247
 *         cdef pair[int, double] p
 *         cdef unordered_map[OBJECTIVES, pair[int, double]] cpp_constraints
 *         if constraints:             # <<<<<<<<<<<<<<
 *             for cons, [coef, bound] in constraints.items():
 *                 p.first = coef
 */
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_constraints); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 247, __pyx_L1_error)
  if (__pyx_t_12) {

    /* "biopharma_scheduling/single_site/stochastic.pyx":248
 *         cdef unordered_map[OBJECTIVES, pair[int, double]] cpp_constraints
 *         if constraints:
 *             for cons, [coef, bound] in constraints.items():             # <<<<<<<<<<<<<<
 *                 p.first = coef
 *                 p.second = bound
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_constraints, __pyx_n_s_items); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 248, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 248, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 248, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 248, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 248, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 248, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 248, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 248, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_8(__pyx_t_1);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 248, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
        PyObject* sequence = __pyx_t_2;
        #if !CYTHON_COMPILING_IN_PYPY
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 248, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        #else
        __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 248, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 248, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 248, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_9 = Py_TYPE(__pyx_t_3)->tp_iternext;
        index = 0; __pyx_t_5 = __pyx_t_9(__pyx_t_3); if (unlikely(!__pyx_t_5)) goto __pyx_L10_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        index = 1; __pyx_t_6 = __pyx_t_9(__pyx_t_3); if (unlikely(!__pyx_t_6)) goto __pyx_L10_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_3), 2) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
        __pyx_t_9 = NULL;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        goto __pyx_L11_unpacking_done;
        __pyx_L10_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_9 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 248, __pyx_L1_error)
        __pyx_L11_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_cons, __pyx_t_5);
      __pyx_t_5 = 0;
      if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
        PyObject* sequence = __pyx_t_6;
        #if !CYTHON_COMPILING_IN_PYPY
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 248, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_13 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_13 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_13);
        #else
        __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 248, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_13 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 248, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        #endif
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_14 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 248, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_9 = Py_TYPE(__pyx_t_14)->tp_iternext;
        index = 0; __pyx_t_3 = __pyx_t_9(__pyx_t_14); if (unlikely(!__pyx_t_3)) goto __pyx_L12_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_3);
        index = 1; __pyx_t_13 = __pyx_t_9(__pyx_t_14); if (unlikely(!__pyx_t_13)) goto __pyx_L12_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_13);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_14), 2) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
        __pyx_t_9 = NULL;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        goto __pyx_L13_unpacking_done;
        __pyx_L12_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_9 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 248, __pyx_L1_error)
        __pyx_L13_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_coef, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_XDECREF_SET(__pyx_v_bound, __pyx_t_13);
      __pyx_t_13 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":249
 *         if constraints:
 *             for cons, [coef, bound] in constraints.items():
 *                 p.first = coef             # <<<<<<<<<<<<<<
 *                 p.second = bound
 *                 cpp_constraints[self.objectives[cons]] = p
 */
      __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_coef); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 249, __pyx_L1_error)
      __pyx_v_p.first = __pyx_t_4;

      /* "biopharma_scheduling/single_site/stochastic.pyx":250
 *             for cons, [coef, bound] in constraints.items():
 *                 p.first = coef
 *                 p.second = bound             # <<<<<<<<<<<<<<
 *                 cpp_constraints[self.objectives[cons]] = p
 * 
 */
      __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_v_bound); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 250, __pyx_L1_error)
      __pyx_v_p.second = __pyx_t_15;

      /* "biopharma_scheduling/single_site/stochastic.pyx":251
 *                 p.first = coef
 *                 p.second = bound
 *                 cpp_constraints[self.objectives[cons]] = p             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[vector[double]] cpp_kg_inventory_target
 */
      __pyx_t_2 = PyObject_GetItem(__pyx_v_self->objectives, __pyx_v_cons); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 251, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = ((enum stochastic::OBJECTIVES)__Pyx_PyInt_As_enum__stochastic_3a__3a_OBJECTIVES(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 251, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      (__pyx_v_cpp_constraints[__pyx_t_10]) = __pyx_v_p;

      /* "biopharma_scheduling/single_site/stochastic.pyx":248
 *         cdef unordered_map[OBJECTIVES, pair[int, double]] cpp_constraints
 *         if constraints:
 *             for cons, [coef, bound] in constraints.items():             # <<<<<<<<<<<<<<
 *                 p.first = coef
 *                 p.second = bound
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":247
 *         cdef pair[int, double] p
 *         cdef unordered_map[OBJECTIVES, pair[int, double]] cpp_constraints
 *         if constraints:             # <<<<<<<<<<<<<<
 *             for cons, [coef, bound] in constraints.items():
 *                 p.first = coef
 */
  }

  /* "biopharma_scheduling/single_site/stochastic.pyx":254
 * 
 *         cdef vector[vector[double]] cpp_kg_inventory_target
 *         if kg_inventory_target is not None:             # <<<<<<<<<<<<<<
 *             cpp_kg_inventory_target = kg_inventory_target.fillna(0).transpose().values.tolist()
 * 
 */
  __pyx_t_12 = (__pyx_v_kg_inventory_target != Py_None);
  __pyx_t_16 = (__pyx_t_12 != 0);
  if (__pyx_t_16) {

    /* "biopharma_scheduling/single_site/stochastic.pyx":255
 *         cdef vector[vector[double]] cpp_kg_inventory_target
 *         if kg_inventory_target is not None:
 *             cpp_kg_inventory_target = kg_inventory_target.fillna(0).transpose().values.tolist()             # <<<<<<<<<<<<<<
 * 
 *         self.input_data = SingleSiteSimpleInputData(
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_inventory_target, __pyx_n_s_fillna); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_transpose); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 255, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 255, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tolist); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 255, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 255, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_17 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 255, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_cpp_kg_inventory_target = __pyx_t_17;

    /* "biopharma_scheduling/single_site/stochastic.pyx":254
 * 
 *         cdef vector[vector[double]] cpp_kg_inventory_target
 *         if kg_inventory_target is not None:             # <<<<<<<<<<<<<<
 *             cpp_kg_inventory_target = kg_inventory_target.fillna(0).transpose().values.tolist()
 * 
 */
  }

  /* "biopharma_scheduling/single_site/stochastic.pyx":262
 * 
 *             cpp_objectives,
 *             days_per_period,             # <<<<<<<<<<<<<<
 * 
 *             kg_demand_min.fillna(0).transpose().values.tolist(),
 */
  __pyx_t_18 = __pyx_convert_vector_from_py_int(__pyx_v_days_per_period); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 262, __pyx_L1_error)

  /* "biopharma_scheduling/single_site/stochastic.pyx":264
 *             days_per_period,
 * 
 *             kg_demand_min.fillna(0).transpose().values.tolist(),             # <<<<<<<<<<<<<<
 *             kg_demand_mode.fillna(0).transpose().values.tolist(),
 *             kg_demand_max.fillna(0).transpose().values.tolist(),
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_min, __pyx_n_s_fillna); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_transpose); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 264, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tolist); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_17 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":265
 * 
 *             kg_demand_min.fillna(0).transpose().values.tolist(),
 *             kg_demand_mode.fillna(0).transpose().values.tolist(),             # <<<<<<<<<<<<<<
 *             kg_demand_max.fillna(0).transpose().values.tolist(),
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_mode, __pyx_n_s_fillna); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_transpose); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 265, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 265, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tolist); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_19 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":266
 *             kg_demand_min.fillna(0).transpose().values.tolist(),
 *             kg_demand_mode.fillna(0).transpose().values.tolist(),
 *             kg_demand_max.fillna(0).transpose().values.tolist(),             # <<<<<<<<<<<<<<
 * 
 *             product_data.kg_yield_per_batch_min.fillna(0).values,
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_max, __pyx_n_s_fillna); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_transpose); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 266, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 266, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tolist); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_20 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":268
 *             kg_demand_max.fillna(0).transpose().values.tolist(),
 * 
 *             product_data.kg_yield_per_batch_min.fillna(0).values,             # <<<<<<<<<<<<<<
 *             product_data.kg_yield_per_batch_mode.fillna(0).values,
 *             product_data.kg_yield_per_batch_max.fillna(0).values,
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_product_data, __pyx_n_s_kg_yield_per_batch_min); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_fillna); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_values); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_21 = __pyx_convert_vector_from_py_double(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":269
 * 
 *             product_data.kg_yield_per_batch_min.fillna(0).values,
 *             product_data.kg_yield_per_batch_mode.fillna(0).values,             # <<<<<<<<<<<<<<
 *             product_data.kg_yield_per_batch_max.fillna(0).values,
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_product_data, __pyx_n_s_kg_yield_per_batch_mode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_fillna); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_values); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_22 = __pyx_convert_vector_from_py_double(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":270
 *             product_data.kg_yield_per_batch_min.fillna(0).values,
 *             product_data.kg_yield_per_batch_mode.fillna(0).values,
 *             product_data.kg_yield_per_batch_max.fillna(0).values,             # <<<<<<<<<<<<<<
 * 
 *             product_data.kg_opening_stock.fillna(0).values.tolist(),
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_product_data, __pyx_n_s_kg_yield_per_batch_max); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_fillna); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_values); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_23 = __pyx_convert_vector_from_py_double(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":272
 *             product_data.kg_yield_per_batch_max.fillna(0).values,
 * 
 *             product_data.kg_opening_stock.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.kg_storage_limits.fillna(0).values.tolist(),
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_product_data, __pyx_n_s_kg_opening_stock); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_fillna); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tolist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 272, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 272, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_24 = __pyx_convert_vector_from_py_double(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":273
 * 
 *             product_data.kg_opening_stock.fillna(0).values.tolist(),
 *             product_data.kg_storage_limits.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 * 
 *             product_data.inventory_penalty_per_kg.fillna(0).values.tolist(),
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_product_data, __pyx_n_s_kg_storage_limits); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_fillna); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tolist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 273, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_25 = __pyx_convert_vector_from_py_double(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":275
 *             product_data.kg_storage_limits.fillna(0).values.tolist(),
 * 
 *             product_data.inventory_penalty_per_kg.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.backlog_penalty_per_kg.fillna(0).values.tolist(),
 *             product_data.production_cost_per_kg.fillna(0).values.tolist(),
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_product_data, __pyx_n_s_inventory_penalty_per_kg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_fillna); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tolist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 275, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 275, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_26 = __pyx_convert_vector_from_py_double(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":276
 * 
 *             product_data.inventory_penalty_per_kg.fillna(0).values.tolist(),
 *             product_data.backlog_penalty_per_kg.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.production_cost_per_kg.fillna(0).values.tolist(),
 *             product_data.storage_cost_per_kg.fillna(0).values.tolist(),
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_product_data, __pyx_n_s_backlog_penalty_per_kg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_fillna); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tolist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 276, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 276, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_27 = __pyx_convert_vector_from_py_double(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":277
 *             product_data.inventory_penalty_per_kg.fillna(0).values.tolist(),
 *             product_data.backlog_penalty_per_kg.fillna(0).values.tolist(),
 *             product_data.production_cost_per_kg.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.storage_cost_per_kg.fillna(0).values.tolist(),
 *             product_data.waste_cost_per_kg.fillna(0).values.tolist(),
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_product_data, __pyx_n_s_production_cost_per_kg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_fillna); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tolist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 277, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_28 = __pyx_convert_vector_from_py_double(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":278
 *             product_data.backlog_penalty_per_kg.fillna(0).values.tolist(),
 *             product_data.production_cost_per_kg.fillna(0).values.tolist(),
 *             product_data.storage_cost_per_kg.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.waste_cost_per_kg.fillna(0).values.tolist(),
 *             product_data.sell_price_per_kg.fillna(0).values.tolist(),
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_product_data, __pyx_n_s_storage_cost_per_kg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_fillna); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tolist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 278, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_29 = __pyx_convert_vector_from_py_double(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":279
 *             product_data.production_cost_per_kg.fillna(0).values.tolist(),
 *             product_data.storage_cost_per_kg.fillna(0).values.tolist(),
 *             product_data.waste_cost_per_kg.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.sell_price_per_kg.fillna(0).values.tolist(),
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_product_data, __pyx_n_s_waste_cost_per_kg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_fillna); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tolist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 279, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 279, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_30 = __pyx_convert_vector_from_py_double(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":280
 *             product_data.storage_cost_per_kg.fillna(0).values.tolist(),
 *             product_data.waste_cost_per_kg.fillna(0).values.tolist(),
 *             product_data.sell_price_per_kg.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 * 
 *             product_data.inoculation_days.fillna(0).values.tolist(),
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_product_data, __pyx_n_s_sell_price_per_kg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_fillna); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tolist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 280, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 280, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_31 = __pyx_convert_vector_from_py_double(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":282
 *             product_data.sell_price_per_kg.fillna(0).values.tolist(),
 * 
 *             product_data.inoculation_days.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.seed_days.fillna(0).values.tolist(),
 *             product_data.production_days.fillna(0).values.tolist(),
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_product_data, __pyx_n_s_inoculation_days); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_fillna); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tolist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 282, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 282, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_32 = __pyx_convert_vector_from_py_int(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":283
 * 
 *             product_data.inoculation_days.fillna(0).values.tolist(),
 *             product_data.seed_days.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.production_days.fillna(0).values.tolist(),
 *             product_data.usp_days.fillna(0).values.tolist(),
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_product_data, __pyx_n_s_seed_days); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_fillna); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tolist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 283, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 283, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_33 = __pyx_convert_vector_from_py_int(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":284
 *             product_data.inoculation_days.fillna(0).values.tolist(),
 *             product_data.seed_days.fillna(0).values.tolist(),
 *             product_data.production_days.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.usp_days.fillna(0).values.tolist(),
 *             product_data.dsp_days.fillna(0).values.tolist(),
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_product_data, __pyx_n_s_production_days); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_fillna); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tolist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 284, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 284, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_34 = __pyx_convert_vector_from_py_int(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":285
 *             product_data.seed_days.fillna(0).values.tolist(),
 *             product_data.production_days.fillna(0).values.tolist(),
 *             product_data.usp_days.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.dsp_days.fillna(0).values.tolist(),
 *             product_data.approval_days.fillna(0).values.tolist(),
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_product_data, __pyx_n_s_usp_days); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_fillna); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tolist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 285, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_35 = __pyx_convert_vector_from_py_int(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":286
 *             product_data.production_days.fillna(0).values.tolist(),
 *             product_data.usp_days.fillna(0).values.tolist(),
 *             product_data.dsp_days.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.approval_days.fillna(0).values.tolist(),
 *             product_data.shelf_life_days.fillna(0).values.tolist(),
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_product_data, __pyx_n_s_dsp_days); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_fillna); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tolist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 286, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_36 = __pyx_convert_vector_from_py_int(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":287
 *             product_data.usp_days.fillna(0).values.tolist(),
 *             product_data.dsp_days.fillna(0).values.tolist(),
 *             product_data.approval_days.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.shelf_life_days.fillna(0).values.tolist(),
 *             product_data.min_batches_per_campaign.fillna(0).values.tolist(),
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_product_data, __pyx_n_s_approval_days); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_fillna); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tolist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 287, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 287, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_37 = __pyx_convert_vector_from_py_int(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":288
 *             product_data.dsp_days.fillna(0).values.tolist(),
 *             product_data.approval_days.fillna(0).values.tolist(),
 *             product_data.shelf_life_days.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.min_batches_per_campaign.fillna(0).values.tolist(),
 *             product_data.max_batches_per_campaign.fillna(0).values.tolist(),
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_product_data, __pyx_n_s_shelf_life_days); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_fillna); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tolist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 288, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_38 = __pyx_convert_vector_from_py_int(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":289
 *             product_data.approval_days.fillna(0).values.tolist(),
 *             product_data.shelf_life_days.fillna(0).values.tolist(),
 *             product_data.min_batches_per_campaign.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.max_batches_per_campaign.fillna(0).values.tolist(),
 *             product_data.batches_multiples_of_per_campaign.fillna(0).values.tolist(),
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_product_data, __pyx_n_s_min_batches_per_campaign); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_fillna); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tolist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 289, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_39 = __pyx_convert_vector_from_py_int(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":290
 *             product_data.shelf_life_days.fillna(0).values.tolist(),
 *             product_data.min_batches_per_campaign.fillna(0).values.tolist(),
 *             product_data.max_batches_per_campaign.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.batches_multiples_of_per_campaign.fillna(0).values.tolist(),
 *             changeover_days.drop('product', axis=1).fillna(0).values.tolist(),
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_product_data, __pyx_n_s_max_batches_per_campaign); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_fillna); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tolist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 290, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 290, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_40 = __pyx_convert_vector_from_py_int(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":291
 *             product_data.min_batches_per_campaign.fillna(0).values.tolist(),
 *             product_data.max_batches_per_campaign.fillna(0).values.tolist(),
 *             product_data.batches_multiples_of_per_campaign.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             changeover_days.drop('product', axis=1).fillna(0).values.tolist(),
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_product_data, __pyx_n_s_batches_multiples_of_per_campaig); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_fillna); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tolist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 291, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 291, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_41 = __pyx_convert_vector_from_py_int(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":292
 *             product_data.max_batches_per_campaign.fillna(0).values.tolist(),
 *             product_data.batches_multiples_of_per_campaign.fillna(0).values.tolist(),
 *             changeover_days.drop('product', axis=1).fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 * 
 *             &cpp_kg_inventory_target if kg_inventory_target is not None else NULL,
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_changeover_days, __pyx_n_s_drop); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_axis, __pyx_int_1) < 0) __PYX_ERR(0, 292, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__26, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_fillna); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_tolist); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 292, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 292, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_42 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":294
 *             changeover_days.drop('product', axis=1).fillna(0).values.tolist(),
 * 
 *             &cpp_kg_inventory_target if kg_inventory_target is not None else NULL,             # <<<<<<<<<<<<<<
 *             &cpp_constraints if constraints is not None else NULL
 *         )
 */
  __pyx_t_16 = (__pyx_v_kg_inventory_target != Py_None);
  if ((__pyx_t_16 != 0)) {
    __pyx_t_43 = (&__pyx_v_cpp_kg_inventory_target);
  } else {
    __pyx_t_43 = NULL;
  }

  /* "biopharma_scheduling/single_site/stochastic.pyx":295
 * 
 *             &cpp_kg_inventory_target if kg_inventory_target is not None else NULL,
 *             &cpp_constraints if constraints is not None else NULL             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_16 = (__pyx_v_constraints != Py_None);
  if ((__pyx_t_16 != 0)) {
    __pyx_t_44 = (&__pyx_v_cpp_constraints);
  } else {
    __pyx_t_44 = NULL;
  }

  /* "biopharma_scheduling/single_site/stochastic.pyx":257
 *             cpp_kg_inventory_target = kg_inventory_target.fillna(0).transpose().values.tolist()
 * 
 *         self.input_data = SingleSiteSimpleInputData(             # <<<<<<<<<<<<<<
 *             self.mc_random_state,
 *             self.num_mc_simulations,
 */
  __pyx_v_self->input_data = stochastic::SingleSiteSimpleInputData(__pyx_v_self->mc_random_state, __pyx_v_self->num_mc_simulations, __pyx_v_cpp_objectives, __pyx_t_18, __pyx_t_17, __pyx_t_19, __pyx_t_20, __pyx_t_21, __pyx_t_22, __pyx_t_23, __pyx_t_24, __pyx_t_25, __pyx_t_26, __pyx_t_27, __pyx_t_28, __pyx_t_29, __pyx_t_30, __pyx_t_31, __pyx_t_32, __pyx_t_33, __pyx_t_34, __pyx_t_35, __pyx_t_36, __pyx_t_37, __pyx_t_38, __pyx_t_39, __pyx_t_40, __pyx_t_41, __pyx_t_42, __pyx_t_43, __pyx_t_44);

  /* "biopharma_scheduling/single_site/stochastic.pyx":298
 *         )
 * 
 *         self.single_site_simple = SingleSiteSimpleModel(self.input_data)             # <<<<<<<<<<<<<<
 * 
 *         if len(objectives) == 1:
 */
  __pyx_v_self->single_site_simple = stochastic::SingleSiteSimpleModel(__pyx_v_self->input_data);

  /* "biopharma_scheduling/single_site/stochastic.pyx":300
 *         self.single_site_simple = SingleSiteSimpleModel(self.input_data)
 * 
 *         if len(objectives) == 1:             # <<<<<<<<<<<<<<
 *             self.__run_single_objective_ga()
 *         else:
 */
  __pyx_t_7 = PyObject_Length(__pyx_v_objectives); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 300, __pyx_L1_error)
  __pyx_t_16 = ((__pyx_t_7 == 1) != 0);
  if (__pyx_t_16) {

    /* "biopharma_scheduling/single_site/stochastic.pyx":301
 * 
 *         if len(objectives) == 1:
 *             self.__run_single_objective_ga()             # <<<<<<<<<<<<<<
 *         else:
 *             self.__run_nsgaii()
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_run_single_objective_ga); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 301, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 301, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":300
 *         self.single_site_simple = SingleSiteSimpleModel(self.input_data)
 * 
 *         if len(objectives) == 1:             # <<<<<<<<<<<<<<
 *             self.__run_single_objective_ga()
 *         else:
 */
    goto __pyx_L15;
  }

  /* "biopharma_scheduling/single_site/stochastic.pyx":303
 *             self.__run_single_objective_ga()
 *         else:
 *             self.__run_nsgaii()             # <<<<<<<<<<<<<<
 * 
 *         return self
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_run_nsgaii); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 303, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 303, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L15:;

  /* "biopharma_scheduling/single_site/stochastic.pyx":305
 *             self.__run_nsgaii()
 * 
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __validate_input(
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":214
 *         }
 * 
 *     def fit(             # <<<<<<<<<<<<<<
 *         self,
 *         start_date: str,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("biopharma_scheduling.single_site.stochastic.StochSingleSiteSimple.fit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_days_per_period);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_coef);
  __Pyx_XDECREF(__pyx_v_cons);
  __Pyx_XDECREF(__pyx_v_bound);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "biopharma_scheduling/single_site/stochastic.pyx":307
 *         return self
 * 
 *     def __validate_input(             # <<<<<<<<<<<<<<
 *         self,
 *         objectives: dict,
 */

/* Python wrapper */
static PyObject *__pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_5__validate_input(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_5__validate_input(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_objectives = 0;
  PyObject *__pyx_v_constraints = 0;
  PyObject *__pyx_v_kg_demand_min = 0;
  PyObject *__pyx_v_kg_demand_mode = 0;
  PyObject *__pyx_v_kg_demand_max = 0;
  PyObject *__pyx_v_kg_inventory_target = 0;
  PyObject *__pyx_v_product_data = 0;
  PyObject *__pyx_v_changeover_days = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__validate_input (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_objectives,&__pyx_n_s_constraints,&__pyx_n_s_kg_demand_min,&__pyx_n_s_kg_demand_mode,&__pyx_n_s_kg_demand_max,&__pyx_n_s_kg_inventory_target,&__pyx_n_s_product_data,&__pyx_n_s_changeover_days,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_objectives)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_constraints)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__validate_input", 1, 8, 8, 1); __PYX_ERR(0, 307, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_kg_demand_min)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__validate_input", 1, 8, 8, 2); __PYX_ERR(0, 307, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_kg_demand_mode)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__validate_input", 1, 8, 8, 3); __PYX_ERR(0, 307, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_kg_demand_max)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__validate_input", 1, 8, 8, 4); __PYX_ERR(0, 307, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_kg_inventory_target)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__validate_input", 1, 8, 8, 5); __PYX_ERR(0, 307, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_product_data)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__validate_input", 1, 8, 8, 6); __PYX_ERR(0, 307, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_changeover_days)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__validate_input", 1, 8, 8, 7); __PYX_ERR(0, 307, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__validate_input") < 0)) __PYX_ERR(0, 307, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_objectives = values[0];
    __pyx_v_constraints = values[1];
    __pyx_v_kg_demand_min = values[2];
    __pyx_v_kg_demand_mode = values[3];
    __pyx_v_kg_demand_max = values[4];
    __pyx_v_kg_inventory_target = values[5];
    __pyx_v_product_data = values[6];
    __pyx_v_changeover_days = values[7];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__validate_input", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 307, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("biopharma_scheduling.single_site.stochastic.StochSingleSiteSimple.__validate_input", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_4__validate_input(((struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *)__pyx_v_self), __pyx_v_objectives, __pyx_v_constraints, __pyx_v_kg_demand_min, __pyx_v_kg_demand_mode, __pyx_v_kg_demand_max, __pyx_v_kg_inventory_target, __pyx_v_product_data, __pyx_v_changeover_days);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_4__validate_input(struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *__pyx_v_self, PyObject *__pyx_v_objectives, PyObject *__pyx_v_constraints, PyObject *__pyx_v_kg_demand_min, PyObject *__pyx_v_kg_demand_mode, PyObject *__pyx_v_kg_demand_max, PyObject *__pyx_v_kg_inventory_target, PyObject *__pyx_v_product_data, PyObject *__pyx_v_changeover_days) {
  PyObject *__pyx_v_obj = NULL;
  PyObject *__pyx_v_cons = NULL;
  PyObject *__pyx_v_df = NULL;
  PyObject *__pyx_v_col = NULL;
  PyObject *__pyx_v_changeover_days_product_columns = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  __Pyx_RefNannySetupContext("__validate_input", 0);

  /* "biopharma_scheduling/single_site/stochastic.pyx":318
 *         changeover_days: pd.core.frame.DataFrame,
 *     ):
 *         assert type(objectives) is dict, \             # <<<<<<<<<<<<<<
 *         "'objectives' needs to be a 'dict', is a '{}'.".format(type(objectives))
 *         for obj in objectives:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_v_objectives)) == ((PyObject *)(&PyDict_Type)));
    if (unlikely(!(__pyx_t_1 != 0))) {

      /* "biopharma_scheduling/single_site/stochastic.pyx":319
 *     ):
 *         assert type(objectives) is dict, \
 *         "'objectives' needs to be a 'dict', is a '{}'.".format(type(objectives))             # <<<<<<<<<<<<<<
 *         for obj in objectives:
 *             assert obj in self.AVAILABLE_OBJECTIVES, \
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_objectives_needs_to_be_a_dict_i, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 319, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)Py_TYPE(__pyx_v_objectives))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 319, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, ((PyObject *)Py_TYPE(__pyx_v_objectives))};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 319, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, ((PyObject *)Py_TYPE(__pyx_v_objectives))};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 319, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 319, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_objectives)));
          __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_objectives)));
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)Py_TYPE(__pyx_v_objectives)));
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 319, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_Pack(1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 319, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      PyErr_SetObject(PyExc_AssertionError, __pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 318, __pyx_L1_error)
    }
  }
  #endif

  /* "biopharma_scheduling/single_site/stochastic.pyx":320
 *         assert type(objectives) is dict, \
 *         "'objectives' needs to be a 'dict', is a '{}'.".format(type(objectives))
 *         for obj in objectives:             # <<<<<<<<<<<<<<
 *             assert obj in self.AVAILABLE_OBJECTIVES, \
 *             "'{}' is not allowed as an objective.".format(obj)
 */
  if (likely(PyList_CheckExact(__pyx_v_objectives)) || PyTuple_CheckExact(__pyx_v_objectives)) {
    __pyx_t_3 = __pyx_v_objectives; __Pyx_INCREF(__pyx_t_3); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_objectives); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 320, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 320, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 320, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 320, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 320, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_7(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 320, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_obj, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":321
 *         "'objectives' needs to be a 'dict', is a '{}'.".format(type(objectives))
 *         for obj in objectives:
 *             assert obj in self.AVAILABLE_OBJECTIVES, \             # <<<<<<<<<<<<<<
 *             "'{}' is not allowed as an objective.".format(obj)
 *             assert objectives[obj] in [-1, 1], \
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_AVAILABLE_OBJECTIVES); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 321, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_obj, __pyx_t_2, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 321, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!(__pyx_t_1 != 0))) {

        /* "biopharma_scheduling/single_site/stochastic.pyx":322
 *         for obj in objectives:
 *             assert obj in self.AVAILABLE_OBJECTIVES, \
 *             "'{}' is not allowed as an objective.".format(obj)             # <<<<<<<<<<<<<<
 *             assert objectives[obj] in [-1, 1], \
 *             "Objective coefficient can only be -1 or 1."
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_is_not_allowed_as_an_objective, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 322, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        if (!__pyx_t_4) {
          __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_obj); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 322, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_5)) {
            PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_obj};
            __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 322, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_GOTREF(__pyx_t_2);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
            PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_obj};
            __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 322, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_GOTREF(__pyx_t_2);
          } else
          #endif
          {
            __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 322, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
            __Pyx_INCREF(__pyx_v_obj);
            __Pyx_GIVEREF(__pyx_v_obj);
            PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_obj);
            __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 322, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyTuple_Pack(1, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 322, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        PyErr_SetObject(PyExc_AssertionError, __pyx_t_5);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __PYX_ERR(0, 321, __pyx_L1_error)
      }
    }
    #endif

    /* "biopharma_scheduling/single_site/stochastic.pyx":323
 *             assert obj in self.AVAILABLE_OBJECTIVES, \
 *             "'{}' is not allowed as an objective.".format(obj)
 *             assert objectives[obj] in [-1, 1], \             # <<<<<<<<<<<<<<
 *             "Objective coefficient can only be -1 or 1."
 * 
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_5 = PyObject_GetItem(__pyx_v_objectives, __pyx_v_obj); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 323, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_t_5, __pyx_int_neg_1, -1L, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 323, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 323, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (!__pyx_t_9) {
      } else {
        __pyx_t_1 = __pyx_t_9;
        goto __pyx_L5_bool_binop_done;
      }
      __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_t_5, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 323, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 323, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_1 = __pyx_t_9;
      __pyx_L5_bool_binop_done:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!(__pyx_t_1 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Objective_coefficient_can_only_b);
        __PYX_ERR(0, 323, __pyx_L1_error)
      }
    }
    #endif

    /* "biopharma_scheduling/single_site/stochastic.pyx":320
 *         assert type(objectives) is dict, \
 *         "'objectives' needs to be a 'dict', is a '{}'.".format(type(objectives))
 *         for obj in objectives:             # <<<<<<<<<<<<<<
 *             assert obj in self.AVAILABLE_OBJECTIVES, \
 *             "'{}' is not allowed as an objective.".format(obj)
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":326
 *             "Objective coefficient can only be -1 or 1."
 * 
 *         if constraints is not None:             # <<<<<<<<<<<<<<
 *             assert type(constraints) is dict, \
 *             "'constraints' needs to be a 'dict', is a '{}'.".format(type(constraints))
 */
  __pyx_t_1 = (__pyx_v_constraints != Py_None);
  __pyx_t_9 = (__pyx_t_1 != 0);
  if (__pyx_t_9) {

    /* "biopharma_scheduling/single_site/stochastic.pyx":327
 * 
 *         if constraints is not None:
 *             assert type(constraints) is dict, \             # <<<<<<<<<<<<<<
 *             "'constraints' needs to be a 'dict', is a '{}'.".format(type(constraints))
 *             for cons in constraints:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_9 = (((PyObject *)Py_TYPE(__pyx_v_constraints)) == ((PyObject *)(&PyDict_Type)));
      if (unlikely(!(__pyx_t_9 != 0))) {

        /* "biopharma_scheduling/single_site/stochastic.pyx":328
 *         if constraints is not None:
 *             assert type(constraints) is dict, \
 *             "'constraints' needs to be a 'dict', is a '{}'.".format(type(constraints))             # <<<<<<<<<<<<<<
 *             for cons in constraints:
 *                 assert cons in self.AVAILABLE_OBJECTIVES, \
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_constraints_needs_to_be_a_dict, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 328, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_2 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        if (!__pyx_t_2) {
          __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, ((PyObject *)Py_TYPE(__pyx_v_constraints))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 328, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_5)) {
            PyObject *__pyx_temp[2] = {__pyx_t_2, ((PyObject *)Py_TYPE(__pyx_v_constraints))};
            __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 328, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_GOTREF(__pyx_t_3);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
            PyObject *__pyx_temp[2] = {__pyx_t_2, ((PyObject *)Py_TYPE(__pyx_v_constraints))};
            __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 328, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_GOTREF(__pyx_t_3);
          } else
          #endif
          {
            __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 328, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2); __pyx_t_2 = NULL;
            __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_constraints)));
            __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_constraints)));
            PyTuple_SET_ITEM(__pyx_t_8, 0+1, ((PyObject *)Py_TYPE(__pyx_v_constraints)));
            __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 328, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyTuple_Pack(1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 328, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        PyErr_SetObject(PyExc_AssertionError, __pyx_t_5);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __PYX_ERR(0, 327, __pyx_L1_error)
      }
    }
    #endif

    /* "biopharma_scheduling/single_site/stochastic.pyx":329
 *             assert type(constraints) is dict, \
 *             "'constraints' needs to be a 'dict', is a '{}'.".format(type(constraints))
 *             for cons in constraints:             # <<<<<<<<<<<<<<
 *                 assert cons in self.AVAILABLE_OBJECTIVES, \
 *                 "'{}' is not allowed as a constraint.".format(cons)
 */
    if (likely(PyList_CheckExact(__pyx_v_constraints)) || PyTuple_CheckExact(__pyx_v_constraints)) {
      __pyx_t_5 = __pyx_v_constraints; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_constraints); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 329, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 329, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 329, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 329, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 329, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 329, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_7(__pyx_t_5);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 329, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_cons, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":330
 *             "'constraints' needs to be a 'dict', is a '{}'.".format(type(constraints))
 *             for cons in constraints:
 *                 assert cons in self.AVAILABLE_OBJECTIVES, \             # <<<<<<<<<<<<<<
 *                 "'{}' is not allowed as a constraint.".format(cons)
 *                 assert type(constraints[cons]) is list and len(constraints[cons]) == 2, \
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_AVAILABLE_OBJECTIVES); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 330, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_9 = (__Pyx_PySequence_ContainsTF(__pyx_v_cons, __pyx_t_3, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 330, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!(__pyx_t_9 != 0))) {

          /* "biopharma_scheduling/single_site/stochastic.pyx":331
 *             for cons in constraints:
 *                 assert cons in self.AVAILABLE_OBJECTIVES, \
 *                 "'{}' is not allowed as a constraint.".format(cons)             # <<<<<<<<<<<<<<
 *                 assert type(constraints[cons]) is list and len(constraints[cons]) == 2, \
 *                 "'constraints' are expected to hold a coeffcient and a bound."
 */
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_is_not_allowed_as_a_constraint, __pyx_n_s_format); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 331, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_2 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_8, function);
            }
          }
          if (!__pyx_t_2) {
            __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_cons); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 331, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
          } else {
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_8)) {
              PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_cons};
              __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 331, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_GOTREF(__pyx_t_3);
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
              PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_cons};
              __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 331, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_GOTREF(__pyx_t_3);
            } else
            #endif
            {
              __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 331, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
              __Pyx_INCREF(__pyx_v_cons);
              __Pyx_GIVEREF(__pyx_v_cons);
              PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_cons);
              __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 331, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            }
          }
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = PyTuple_Pack(1, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 331, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          PyErr_SetObject(PyExc_AssertionError, __pyx_t_8);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __PYX_ERR(0, 330, __pyx_L1_error)
        }
      }
      #endif

      /* "biopharma_scheduling/single_site/stochastic.pyx":332
 *                 assert cons in self.AVAILABLE_OBJECTIVES, \
 *                 "'{}' is not allowed as a constraint.".format(cons)
 *                 assert type(constraints[cons]) is list and len(constraints[cons]) == 2, \             # <<<<<<<<<<<<<<
 *                 "'constraints' are expected to hold a coeffcient and a bound."
 *                 assert constraints[cons][0] in [-1, 1], \
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_8 = PyObject_GetItem(__pyx_v_constraints, __pyx_v_cons); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 332, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_t_8)) == ((PyObject *)(&PyList_Type)));
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_10 = (__pyx_t_1 != 0);
        if (__pyx_t_10) {
        } else {
          __pyx_t_9 = __pyx_t_10;
          goto __pyx_L10_bool_binop_done;
        }
        __pyx_t_8 = PyObject_GetItem(__pyx_v_constraints, __pyx_v_cons); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 332, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_11 = PyObject_Length(__pyx_t_8); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 332, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_10 = ((__pyx_t_11 == 2) != 0);
        __pyx_t_9 = __pyx_t_10;
        __pyx_L10_bool_binop_done:;
        if (unlikely(!__pyx_t_9)) {
          PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_constraints_are_expected_to_hol);
          __PYX_ERR(0, 332, __pyx_L1_error)
        }
      }
      #endif

      /* "biopharma_scheduling/single_site/stochastic.pyx":334
 *                 assert type(constraints[cons]) is list and len(constraints[cons]) == 2, \
 *                 "'constraints' are expected to hold a coeffcient and a bound."
 *                 assert constraints[cons][0] in [-1, 1], \             # <<<<<<<<<<<<<<
 *                 "Constraint coefficient can only be -1 or 1."
 * 
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_8 = PyObject_GetItem(__pyx_v_constraints, __pyx_v_cons); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 334, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 334, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyInt_EqObjC(__pyx_t_3, __pyx_int_neg_1, -1L, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 334, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 334, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (!__pyx_t_10) {
        } else {
          __pyx_t_9 = __pyx_t_10;
          goto __pyx_L12_bool_binop_done;
        }
        __pyx_t_8 = __Pyx_PyInt_EqObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 334, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 334, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_9 = __pyx_t_10;
        __pyx_L12_bool_binop_done:;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!(__pyx_t_9 != 0))) {
          PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Constraint_coefficient_can_only);
          __PYX_ERR(0, 334, __pyx_L1_error)
        }
      }
      #endif

      /* "biopharma_scheduling/single_site/stochastic.pyx":329
 *             assert type(constraints) is dict, \
 *             "'constraints' needs to be a 'dict', is a '{}'.".format(type(constraints))
 *             for cons in constraints:             # <<<<<<<<<<<<<<
 *                 assert cons in self.AVAILABLE_OBJECTIVES, \
 *                 "'{}' is not allowed as a constraint.".format(cons)
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":326
 *             "Objective coefficient can only be -1 or 1."
 * 
 *         if constraints is not None:             # <<<<<<<<<<<<<<
 *             assert type(constraints) is dict, \
 *             "'constraints' needs to be a 'dict', is a '{}'.".format(type(constraints))
 */
  }

  /* "biopharma_scheduling/single_site/stochastic.pyx":337
 *                 "Constraint coefficient can only be -1 or 1."
 * 
 *         for df in [kg_demand_min, kg_demand_mode, kg_demand_max, product_data, changeover_days]:             # <<<<<<<<<<<<<<
 *             assert type(df) is pd.core.frame.DataFrame, \
 *             "Input data must be a 'pd.core.frame.DataFrame', is a '{}'".format(type(df))
 */
  __pyx_t_5 = PyTuple_New(5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_kg_demand_min);
  __Pyx_GIVEREF(__pyx_v_kg_demand_min);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_kg_demand_min);
  __Pyx_INCREF(__pyx_v_kg_demand_mode);
  __Pyx_GIVEREF(__pyx_v_kg_demand_mode);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_kg_demand_mode);
  __Pyx_INCREF(__pyx_v_kg_demand_max);
  __Pyx_GIVEREF(__pyx_v_kg_demand_max);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_kg_demand_max);
  __Pyx_INCREF(__pyx_v_product_data);
  __Pyx_GIVEREF(__pyx_v_product_data);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_v_product_data);
  __Pyx_INCREF(__pyx_v_changeover_days);
  __Pyx_GIVEREF(__pyx_v_changeover_days);
  PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_v_changeover_days);
  __pyx_t_3 = __pyx_t_5; __Pyx_INCREF(__pyx_t_3); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (__pyx_t_6 >= 5) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 337, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_df, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":338
 * 
 *         for df in [kg_demand_min, kg_demand_mode, kg_demand_max, product_data, changeover_days]:
 *             assert type(df) is pd.core.frame.DataFrame, \             # <<<<<<<<<<<<<<
 *             "Input data must be a 'pd.core.frame.DataFrame', is a '{}'".format(type(df))
 * 
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_pd); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_core); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_frame); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_9 = (((PyObject *)Py_TYPE(__pyx_v_df)) == __pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!(__pyx_t_9 != 0))) {

        /* "biopharma_scheduling/single_site/stochastic.pyx":339
 *         for df in [kg_demand_min, kg_demand_mode, kg_demand_max, product_data, changeover_days]:
 *             assert type(df) is pd.core.frame.DataFrame, \
 *             "Input data must be a 'pd.core.frame.DataFrame', is a '{}'".format(type(df))             # <<<<<<<<<<<<<<
 * 
 *         assert 'date' == kg_demand_min.index.name, \
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Input_data_must_be_a_pd_core_fra, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 339, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        if (!__pyx_t_4) {
          __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_5, ((PyObject *)Py_TYPE(__pyx_v_df))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 339, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_5)) {
            PyObject *__pyx_temp[2] = {__pyx_t_4, ((PyObject *)Py_TYPE(__pyx_v_df))};
            __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 339, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_GOTREF(__pyx_t_8);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
            PyObject *__pyx_temp[2] = {__pyx_t_4, ((PyObject *)Py_TYPE(__pyx_v_df))};
            __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 339, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_GOTREF(__pyx_t_8);
          } else
          #endif
          {
            __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 339, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4); __pyx_t_4 = NULL;
            __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_df)));
            __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_df)));
            PyTuple_SET_ITEM(__pyx_t_2, 0+1, ((PyObject *)Py_TYPE(__pyx_v_df)));
            __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_2, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 339, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyTuple_Pack(1, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 339, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        PyErr_SetObject(PyExc_AssertionError, __pyx_t_5);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __PYX_ERR(0, 338, __pyx_L1_error)
      }
    }
    #endif

    /* "biopharma_scheduling/single_site/stochastic.pyx":337
 *                 "Constraint coefficient can only be -1 or 1."
 * 
 *         for df in [kg_demand_min, kg_demand_mode, kg_demand_max, product_data, changeover_days]:             # <<<<<<<<<<<<<<
 *             assert type(df) is pd.core.frame.DataFrame, \
 *             "Input data must be a 'pd.core.frame.DataFrame', is a '{}'".format(type(df))
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":341
 *             "Input data must be a 'pd.core.frame.DataFrame', is a '{}'".format(type(df))
 * 
 *         assert 'date' == kg_demand_min.index.name, \             # <<<<<<<<<<<<<<
 *         "'kg_demand_min' must have a 'date' index."
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_min, __pyx_n_s_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_n_s_date, __pyx_t_5, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 341, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_9)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_kg_demand_min_must_have_a_date);
      __PYX_ERR(0, 341, __pyx_L1_error)
    }
  }
  #endif

  /* "biopharma_scheduling/single_site/stochastic.pyx":344
 *         "'kg_demand_min' must have a 'date' index."
 * 
 *         assert 'date' == kg_demand_mode.index.name, \             # <<<<<<<<<<<<<<
 *         "'kg_demand_mode' must have a 'date' index."
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_mode, __pyx_n_s_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_n_s_date, __pyx_t_3, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_9)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_kg_demand_mode_must_have_a_date);
      __PYX_ERR(0, 344, __pyx_L1_error)
    }
  }
  #endif

  /* "biopharma_scheduling/single_site/stochastic.pyx":347
 *         "'kg_demand_mode' must have a 'date' index."
 * 
 *         assert 'date' == kg_demand_max.index.name, \             # <<<<<<<<<<<<<<
 *         "'kg_demand_max' must have a 'date' index."
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_max, __pyx_n_s_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_n_s_date, __pyx_t_5, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_9)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_kg_demand_max_must_have_a_date);
      __PYX_ERR(0, 347, __pyx_L1_error)
    }
  }
  #endif

  /* "biopharma_scheduling/single_site/stochastic.pyx":350
 *         "'kg_demand_max' must have a 'date' index."
 * 
 *         assert kg_demand_min.index.all() == kg_demand_mode.index.all(), \             # <<<<<<<<<<<<<<
 *         "'date' indices from 'kg_demand_min' and 'kg_demand_mode' do not match."
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_min, __pyx_n_s_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_all); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (__pyx_t_3) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 350, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 350, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_mode, __pyx_n_s_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_all); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_3) {
      __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 350, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_8 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 350, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_5, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_9)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_date_indices_from_kg_demand_min);
      __PYX_ERR(0, 350, __pyx_L1_error)
    }
  }
  #endif

  /* "biopharma_scheduling/single_site/stochastic.pyx":353
 *         "'date' indices from 'kg_demand_min' and 'kg_demand_mode' do not match."
 * 
 *         assert kg_demand_max.index.all() == kg_demand_mode.index.all(), \             # <<<<<<<<<<<<<<
 *         "'date' indices from 'kg_demand_max' and 'kg_demand_mode' do not match."
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_max, __pyx_n_s_index); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_all); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_8) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 353, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 353, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_mode, __pyx_n_s_index); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_all); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_8) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 353, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else {
      __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 353, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_9)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_date_indices_from_kg_demand_max);
      __PYX_ERR(0, 353, __pyx_L1_error)
    }
  }
  #endif

  /* "biopharma_scheduling/single_site/stochastic.pyx":356
 *         "'date' indices from 'kg_demand_max' and 'kg_demand_mode' do not match."
 * 
 *         assert set(kg_demand_min.columns) == set(kg_demand_mode.columns) and \             # <<<<<<<<<<<<<<
 *                 len(kg_demand_min.columns) == len(kg_demand_mode.columns), \
 *                 "Product labels from 'kg_demand_min' and 'kg_demand_mode' do not match."
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_min, __pyx_n_s_columns); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PySet_New(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_mode, __pyx_n_s_columns); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PySet_New(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L16_bool_binop_done;
    }

    /* "biopharma_scheduling/single_site/stochastic.pyx":357
 * 
 *         assert set(kg_demand_min.columns) == set(kg_demand_mode.columns) and \
 *                 len(kg_demand_min.columns) == len(kg_demand_mode.columns), \             # <<<<<<<<<<<<<<
 *                 "Product labels from 'kg_demand_min' and 'kg_demand_mode' do not match."
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_min, __pyx_n_s_columns); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_mode, __pyx_n_s_columns); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_10 = ((__pyx_t_6 == __pyx_t_11) != 0);
    __pyx_t_9 = __pyx_t_10;
    __pyx_L16_bool_binop_done:;
    if (unlikely(!__pyx_t_9)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Product_labels_from_kg_demand_mi);
      __PYX_ERR(0, 356, __pyx_L1_error)
    }
  }
  #endif

  /* "biopharma_scheduling/single_site/stochastic.pyx":360
 *                 "Product labels from 'kg_demand_min' and 'kg_demand_mode' do not match."
 * 
 *         assert set(kg_demand_max.columns) == set(kg_demand_mode.columns) and \             # <<<<<<<<<<<<<<
 *                 len(kg_demand_max.columns) == len(kg_demand_mode.columns), \
 *                 "Product labels from 'kg_demand_max' and 'kg_demand_mode' do not match."
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_max, __pyx_n_s_columns); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PySet_New(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_mode, __pyx_n_s_columns); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PySet_New(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L18_bool_binop_done;
    }

    /* "biopharma_scheduling/single_site/stochastic.pyx":361
 * 
 *         assert set(kg_demand_max.columns) == set(kg_demand_mode.columns) and \
 *                 len(kg_demand_max.columns) == len(kg_demand_mode.columns), \             # <<<<<<<<<<<<<<
 *                 "Product labels from 'kg_demand_max' and 'kg_demand_mode' do not match."
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_max, __pyx_n_s_columns); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_mode, __pyx_n_s_columns); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_10 = ((__pyx_t_11 == __pyx_t_6) != 0);
    __pyx_t_9 = __pyx_t_10;
    __pyx_L18_bool_binop_done:;
    if (unlikely(!__pyx_t_9)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Product_labels_from_kg_demand_ma);
      __PYX_ERR(0, 360, __pyx_L1_error)
    }
  }
  #endif

  /* "biopharma_scheduling/single_site/stochastic.pyx":364
 *                 "Product labels from 'kg_demand_max' and 'kg_demand_mode' do not match."
 * 
 *         if kg_inventory_target is not None:             # <<<<<<<<<<<<<<
 *             assert type(kg_inventory_target) is pd.core.frame.DataFrame, \
 *             "Input data must be a 'pd.core.frame.DataFrame', is a '{}'".format(type(kg_inventory_target))
 */
  __pyx_t_9 = (__pyx_v_kg_inventory_target != Py_None);
  __pyx_t_10 = (__pyx_t_9 != 0);
  if (__pyx_t_10) {

    /* "biopharma_scheduling/single_site/stochastic.pyx":365
 * 
 *         if kg_inventory_target is not None:
 *             assert type(kg_inventory_target) is pd.core.frame.DataFrame, \             # <<<<<<<<<<<<<<
 *             "Input data must be a 'pd.core.frame.DataFrame', is a '{}'".format(type(kg_inventory_target))
 * 
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pd); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 365, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_core); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 365, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_frame); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 365, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 365, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_10 = (((PyObject *)Py_TYPE(__pyx_v_kg_inventory_target)) == __pyx_t_5);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!(__pyx_t_10 != 0))) {

        /* "biopharma_scheduling/single_site/stochastic.pyx":366
 *         if kg_inventory_target is not None:
 *             assert type(kg_inventory_target) is pd.core.frame.DataFrame, \
 *             "Input data must be a 'pd.core.frame.DataFrame', is a '{}'".format(type(kg_inventory_target))             # <<<<<<<<<<<<<<
 * 
 *             assert 'date' == kg_inventory_target.index.name, \
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Input_data_must_be_a_pd_core_fra, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 366, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        if (!__pyx_t_2) {
          __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)Py_TYPE(__pyx_v_kg_inventory_target))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 366, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_3)) {
            PyObject *__pyx_temp[2] = {__pyx_t_2, ((PyObject *)Py_TYPE(__pyx_v_kg_inventory_target))};
            __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 366, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_GOTREF(__pyx_t_5);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
            PyObject *__pyx_temp[2] = {__pyx_t_2, ((PyObject *)Py_TYPE(__pyx_v_kg_inventory_target))};
            __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 366, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_GOTREF(__pyx_t_5);
          } else
          #endif
          {
            __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 366, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2); __pyx_t_2 = NULL;
            __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_kg_inventory_target)));
            __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_kg_inventory_target)));
            PyTuple_SET_ITEM(__pyx_t_8, 0+1, ((PyObject *)Py_TYPE(__pyx_v_kg_inventory_target)));
            __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 366, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyTuple_Pack(1, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 366, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        PyErr_SetObject(PyExc_AssertionError, __pyx_t_3);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(0, 365, __pyx_L1_error)
      }
    }
    #endif

    /* "biopharma_scheduling/single_site/stochastic.pyx":368
 *             "Input data must be a 'pd.core.frame.DataFrame', is a '{}'".format(type(kg_inventory_target))
 * 
 *             assert 'date' == kg_inventory_target.index.name, \             # <<<<<<<<<<<<<<
 *             "'kg_inventory_target' must have a 'date' index."
 * 
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_inventory_target, __pyx_n_s_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 368, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 368, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_n_s_date, __pyx_t_5, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 368, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_10)) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_kg_inventory_target_must_have_a);
        __PYX_ERR(0, 368, __pyx_L1_error)
      }
    }
    #endif

    /* "biopharma_scheduling/single_site/stochastic.pyx":371
 *             "'kg_inventory_target' must have a 'date' index."
 * 
 *             assert kg_demand_min.index.all() == kg_inventory_target.index.all(), \             # <<<<<<<<<<<<<<
 *             "'date' indices from 'kg_demand_min' and 'kg_inventory_target' do not match."
 * 
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_min, __pyx_n_s_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_all); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      if (__pyx_t_3) {
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 371, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else {
        __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 371, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_inventory_target, __pyx_n_s_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_all); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      if (__pyx_t_3) {
        __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 371, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else {
        __pyx_t_8 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 371, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_RichCompare(__pyx_t_5, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 371, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_10)) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_date_indices_from_kg_demand_min_2);
        __PYX_ERR(0, 371, __pyx_L1_error)
      }
    }
    #endif

    /* "biopharma_scheduling/single_site/stochastic.pyx":374
 *             "'date' indices from 'kg_demand_min' and 'kg_inventory_target' do not match."
 * 
 *             assert kg_demand_mode.index.all() == kg_inventory_target.index.all(), \             # <<<<<<<<<<<<<<
 *             "'date' indices from 'kg_demand_mode' and 'kg_inventory_target' do not match."
 * 
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_mode, __pyx_n_s_index); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 374, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_all); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 374, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (__pyx_t_8) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 374, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 374, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_inventory_target, __pyx_n_s_index); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 374, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_all); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 374, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_8) {
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 374, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else {
        __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 374, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 374, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 374, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_10)) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_date_indices_from_kg_demand_mod);
        __PYX_ERR(0, 374, __pyx_L1_error)
      }
    }
    #endif

    /* "biopharma_scheduling/single_site/stochastic.pyx":377
 *             "'date' indices from 'kg_demand_mode' and 'kg_inventory_target' do not match."
 * 
 *             assert kg_demand_max.index.all() == kg_inventory_target.index.all(), \             # <<<<<<<<<<<<<<
 *             "'date' indices from 'kg_demand_max' and 'kg_inventory_target' do not match."
 * 
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_max, __pyx_n_s_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 377, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_all); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 377, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      if (__pyx_t_5) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 377, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else {
        __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 377, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_inventory_target, __pyx_n_s_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 377, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_all); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 377, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      if (__pyx_t_5) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 377, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 377, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 377, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 377, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_10)) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_date_indices_from_kg_demand_max_2);
        __PYX_ERR(0, 377, __pyx_L1_error)
      }
    }
    #endif

    /* "biopharma_scheduling/single_site/stochastic.pyx":380
 *             "'date' indices from 'kg_demand_max' and 'kg_inventory_target' do not match."
 * 
 *             assert set(kg_demand_min.columns) == set(kg_inventory_target.columns) and \             # <<<<<<<<<<<<<<
 *                    len(kg_demand_min.columns) == len(kg_inventory_target.columns), \
 *                    "Product labels from 'kg_demand_min' and 'kg_inventory_target' do not match."
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_min, __pyx_n_s_columns); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_2 = PySet_New(__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_inventory_target, __pyx_n_s_columns); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_3 = PySet_New(__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 380, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 380, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_9) {
      } else {
        __pyx_t_10 = __pyx_t_9;
        goto __pyx_L21_bool_binop_done;
      }

      /* "biopharma_scheduling/single_site/stochastic.pyx":381
 * 
 *             assert set(kg_demand_min.columns) == set(kg_inventory_target.columns) and \
 *                    len(kg_demand_min.columns) == len(kg_inventory_target.columns), \             # <<<<<<<<<<<<<<
 *                    "Product labels from 'kg_demand_min' and 'kg_inventory_target' do not match."
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_min, __pyx_n_s_columns); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 381, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = PyObject_Length(__pyx_t_8); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 381, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_inventory_target, __pyx_n_s_columns); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 381, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_11 = PyObject_Length(__pyx_t_8); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 381, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = ((__pyx_t_6 == __pyx_t_11) != 0);
      __pyx_t_10 = __pyx_t_9;
      __pyx_L21_bool_binop_done:;
      if (unlikely(!__pyx_t_10)) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Product_labels_from_kg_demand_mi_2);
        __PYX_ERR(0, 380, __pyx_L1_error)
      }
    }
    #endif

    /* "biopharma_scheduling/single_site/stochastic.pyx":384
 *                    "Product labels from 'kg_demand_min' and 'kg_inventory_target' do not match."
 * 
 *             assert set(kg_demand_mode.columns) == set(kg_inventory_target.columns) and \             # <<<<<<<<<<<<<<
 *                    len(kg_demand_mode.columns) == len(kg_inventory_target.columns), \
 *                    "Product labels from 'kg_demand_mode' and 'kg_inventory_target' do not match."
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_mode, __pyx_n_s_columns); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 384, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_3 = PySet_New(__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 384, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_inventory_target, __pyx_n_s_columns); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 384, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_2 = PySet_New(__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 384, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 384, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 384, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_9) {
      } else {
        __pyx_t_10 = __pyx_t_9;
        goto __pyx_L23_bool_binop_done;
      }

      /* "biopharma_scheduling/single_site/stochastic.pyx":385
 * 
 *             assert set(kg_demand_mode.columns) == set(kg_inventory_target.columns) and \
 *                    len(kg_demand_mode.columns) == len(kg_inventory_target.columns), \             # <<<<<<<<<<<<<<
 *                    "Product labels from 'kg_demand_mode' and 'kg_inventory_target' do not match."
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_mode, __pyx_n_s_columns); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 385, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_11 = PyObject_Length(__pyx_t_8); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 385, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_inventory_target, __pyx_n_s_columns); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 385, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = PyObject_Length(__pyx_t_8); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 385, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = ((__pyx_t_11 == __pyx_t_6) != 0);
      __pyx_t_10 = __pyx_t_9;
      __pyx_L23_bool_binop_done:;
      if (unlikely(!__pyx_t_10)) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Product_labels_from_kg_demand_mo);
        __PYX_ERR(0, 384, __pyx_L1_error)
      }
    }
    #endif

    /* "biopharma_scheduling/single_site/stochastic.pyx":388
 *                    "Product labels from 'kg_demand_mode' and 'kg_inventory_target' do not match."
 * 
 *             assert set(kg_demand_max.columns) == set(kg_inventory_target.columns) and \             # <<<<<<<<<<<<<<
 *                    len(kg_demand_max.columns) == len(kg_inventory_target.columns), \
 *                    "Product labels from 'kg_demand_max' and 'kg_inventory_target' do not match."
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_max, __pyx_n_s_columns); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 388, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_2 = PySet_New(__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 388, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_inventory_target, __pyx_n_s_columns); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 388, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_3 = PySet_New(__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 388, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 388, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 388, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_9) {
      } else {
        __pyx_t_10 = __pyx_t_9;
        goto __pyx_L25_bool_binop_done;
      }

      /* "biopharma_scheduling/single_site/stochastic.pyx":389
 * 
 *             assert set(kg_demand_max.columns) == set(kg_inventory_target.columns) and \
 *                    len(kg_demand_max.columns) == len(kg_inventory_target.columns), \             # <<<<<<<<<<<<<<
 *                    "Product labels from 'kg_demand_max' and 'kg_inventory_target' do not match."
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_max, __pyx_n_s_columns); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 389, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = PyObject_Length(__pyx_t_8); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 389, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_inventory_target, __pyx_n_s_columns); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 389, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_11 = PyObject_Length(__pyx_t_8); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 389, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = ((__pyx_t_6 == __pyx_t_11) != 0);
      __pyx_t_10 = __pyx_t_9;
      __pyx_L25_bool_binop_done:;
      if (unlikely(!__pyx_t_10)) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Product_labels_from_kg_demand_ma_2);
        __PYX_ERR(0, 388, __pyx_L1_error)
      }
    }
    #endif

    /* "biopharma_scheduling/single_site/stochastic.pyx":364
 *                 "Product labels from 'kg_demand_max' and 'kg_demand_mode' do not match."
 * 
 *         if kg_inventory_target is not None:             # <<<<<<<<<<<<<<
 *             assert type(kg_inventory_target) is pd.core.frame.DataFrame, \
 *             "Input data must be a 'pd.core.frame.DataFrame', is a '{}'".format(type(kg_inventory_target))
 */
  }

  /* "biopharma_scheduling/single_site/stochastic.pyx":392
 *                    "Product labels from 'kg_demand_max' and 'kg_inventory_target' do not match."
 * 
 *         for col in [             # <<<<<<<<<<<<<<
 *             'product',
 *             'inventory_penalty_per_kg',
 */
  __pyx_t_8 = __pyx_tuple__28; __Pyx_INCREF(__pyx_t_8); __pyx_t_11 = 0;
  for (;;) {
    if (__pyx_t_11 >= 22) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_11); __Pyx_INCREF(__pyx_t_3); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 392, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_8, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 392, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_col, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":416
 *             'batches_multiples_of_per_campaign'
 *         ]:
 *             assert col in product_data, "'product_data' is missing '{}' column.".format(col)             # <<<<<<<<<<<<<<
 * 
 *         self.product_labels = kg_demand_mode.columns.values.tolist()
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_10 = (__Pyx_PySequence_ContainsTF(__pyx_v_col, __pyx_v_product_data, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 416, __pyx_L1_error)
      if (unlikely(!(__pyx_t_10 != 0))) {
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_product_data_is_missing_column, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 416, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        if (!__pyx_t_5) {
          __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_col); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 416, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_2)) {
            PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_col};
            __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 416, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_GOTREF(__pyx_t_3);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
            PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_col};
            __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 416, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_GOTREF(__pyx_t_3);
          } else
          #endif
          {
            __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 416, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
            __Pyx_INCREF(__pyx_v_col);
            __Pyx_GIVEREF(__pyx_v_col);
            PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_col);
            __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 416, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyTuple_Pack(1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 416, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        PyErr_SetObject(PyExc_AssertionError, __pyx_t_2);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __PYX_ERR(0, 416, __pyx_L1_error)
      }
    }
    #endif

    /* "biopharma_scheduling/single_site/stochastic.pyx":392
 *                    "Product labels from 'kg_demand_max' and 'kg_inventory_target' do not match."
 * 
 *         for col in [             # <<<<<<<<<<<<<<
 *             'product',
 *             'inventory_penalty_per_kg',
 */
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":418
 *             assert col in product_data, "'product_data' is missing '{}' column.".format(col)
 * 
 *         self.product_labels = kg_demand_mode.columns.values.tolist()             # <<<<<<<<<<<<<<
 * 
 *         assert len(self.product_labels) == len(product_data['product']) and \
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_kg_demand_mode, __pyx_n_s_columns); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_values); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_tolist); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 418, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_8 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 418, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_8);
  __Pyx_GOTREF(__pyx_v_self->product_labels);
  __Pyx_DECREF(__pyx_v_self->product_labels);
  __pyx_v_self->product_labels = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":420
 *         self.product_labels = kg_demand_mode.columns.values.tolist()
 * 
 *         assert len(self.product_labels) == len(product_data['product']) and \             # <<<<<<<<<<<<<<
 *                set(self.product_labels) == set(product_data['product']), \
 *                "Product labels from 'kg_demand' and 'product_data' do not match."
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_8 = __pyx_v_self->product_labels;
    __Pyx_INCREF(__pyx_t_8);
    __pyx_t_11 = PyObject_Length(__pyx_t_8); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 420, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyObject_GetItem(__pyx_v_product_data, __pyx_n_s_product); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = PyObject_Length(__pyx_t_8); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 420, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = ((__pyx_t_11 == __pyx_t_6) != 0);
    if (__pyx_t_9) {
    } else {
      __pyx_t_10 = __pyx_t_9;
      goto __pyx_L29_bool_binop_done;
    }

    /* "biopharma_scheduling/single_site/stochastic.pyx":421
 * 
 *         assert len(self.product_labels) == len(product_data['product']) and \
 *                set(self.product_labels) == set(product_data['product']), \             # <<<<<<<<<<<<<<
 *                "Product labels from 'kg_demand' and 'product_data' do not match."
 * 
 */
    __pyx_t_8 = PySet_New(__pyx_v_self->product_labels); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = PyObject_GetItem(__pyx_v_product_data, __pyx_n_s_product); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySet_New(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_8, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = __pyx_t_9;
    __pyx_L29_bool_binop_done:;
    if (unlikely(!__pyx_t_10)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Product_labels_from_kg_demand_an);
      __PYX_ERR(0, 420, __pyx_L1_error)
    }
  }
  #endif

  /* "biopharma_scheduling/single_site/stochastic.pyx":424
 *                "Product labels from 'kg_demand' and 'product_data' do not match."
 * 
 *         assert 'product' in changeover_days, "'product' column is missing in 'changeover_days'."             # <<<<<<<<<<<<<<
 *         assert len(self.product_labels) == len(changeover_days['product']) and \
 *                set(self.product_labels) == set(changeover_days['product']), \
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_10 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_product, __pyx_v_changeover_days, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 424, __pyx_L1_error)
    if (unlikely(!(__pyx_t_10 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_product_column_is_missing_in_ch);
      __PYX_ERR(0, 424, __pyx_L1_error)
    }
  }
  #endif

  /* "biopharma_scheduling/single_site/stochastic.pyx":425
 * 
 *         assert 'product' in changeover_days, "'product' column is missing in 'changeover_days'."
 *         assert len(self.product_labels) == len(changeover_days['product']) and \             # <<<<<<<<<<<<<<
 *                set(self.product_labels) == set(changeover_days['product']), \
 *                "Product labels from 'kg_demand' and 'changeover_days' do not match."
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_v_self->product_labels;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_6 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 425, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_GetItem(__pyx_v_changeover_days, __pyx_n_s_product); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 425, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = ((__pyx_t_6 == __pyx_t_11) != 0);
    if (__pyx_t_9) {
    } else {
      __pyx_t_10 = __pyx_t_9;
      goto __pyx_L31_bool_binop_done;
    }

    /* "biopharma_scheduling/single_site/stochastic.pyx":426
 *         assert 'product' in changeover_days, "'product' column is missing in 'changeover_days'."
 *         assert len(self.product_labels) == len(changeover_days['product']) and \
 *                set(self.product_labels) == set(changeover_days['product']), \             # <<<<<<<<<<<<<<
 *                "Product labels from 'kg_demand' and 'changeover_days' do not match."
 * 
 */
    __pyx_t_2 = PySet_New(__pyx_v_self->product_labels); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_GetItem(__pyx_v_changeover_days, __pyx_n_s_product); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = PySet_New(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 426, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 426, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_10 = __pyx_t_9;
    __pyx_L31_bool_binop_done:;
    if (unlikely(!__pyx_t_10)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Product_labels_from_kg_demand_an_2);
      __PYX_ERR(0, 425, __pyx_L1_error)
    }
  }
  #endif

  /* "biopharma_scheduling/single_site/stochastic.pyx":429
 *                "Product labels from 'kg_demand' and 'changeover_days' do not match."
 * 
 *         changeover_days_product_columns = changeover_days.columns.values.tolist()             # <<<<<<<<<<<<<<
 *         changeover_days_product_columns.remove('product')
 * 
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_changeover_days, __pyx_n_s_columns); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_values); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_tolist); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 429, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 429, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_changeover_days_product_columns = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":430
 * 
 *         changeover_days_product_columns = changeover_days.columns.values.tolist()
 *         changeover_days_product_columns.remove('product')             # <<<<<<<<<<<<<<
 * 
 *         assert len(self.product_labels) == len(changeover_days_product_columns) and \
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_changeover_days_product_columns, __pyx_n_s_remove); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":432
 *         changeover_days_product_columns.remove('product')
 * 
 *         assert len(self.product_labels) == len(changeover_days_product_columns) and \             # <<<<<<<<<<<<<<
 *                set(self.product_labels) == set(changeover_days_product_columns), \
 *                "Product labels in 'product' column do not match with the actual product columns in 'changeover_days_product_columns'."
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_8 = __pyx_v_self->product_labels;
    __Pyx_INCREF(__pyx_t_8);
    __pyx_t_11 = PyObject_Length(__pyx_t_8); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 432, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_6 = PyObject_Length(__pyx_v_changeover_days_product_columns); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 432, __pyx_L1_error)
    __pyx_t_9 = ((__pyx_t_11 == __pyx_t_6) != 0);
    if (__pyx_t_9) {
    } else {
      __pyx_t_10 = __pyx_t_9;
      goto __pyx_L33_bool_binop_done;
    }

    /* "biopharma_scheduling/single_site/stochastic.pyx":433
 * 
 *         assert len(self.product_labels) == len(changeover_days_product_columns) and \
 *                set(self.product_labels) == set(changeover_days_product_columns), \             # <<<<<<<<<<<<<<
 *                "Product labels in 'product' column do not match with the actual product columns in 'changeover_days_product_columns'."
 * 
 */
    __pyx_t_8 = PySet_New(__pyx_v_self->product_labels); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = PySet_New(__pyx_v_changeover_days_product_columns); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_8, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = __pyx_t_9;
    __pyx_L33_bool_binop_done:;
    if (unlikely(!__pyx_t_10)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Product_labels_in_product_column);
      __PYX_ERR(0, 432, __pyx_L1_error)
    }
  }
  #endif

  /* "biopharma_scheduling/single_site/stochastic.pyx":307
 *         return self
 * 
 *     def __validate_input(             # <<<<<<<<<<<<<<
 *         self,
 *         objectives: dict,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("biopharma_scheduling.single_site.stochastic.StochSingleSiteSimple.__validate_input", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_cons);
  __Pyx_XDECREF(__pyx_v_df);
  __Pyx_XDECREF(__pyx_v_col);
  __Pyx_XDECREF(__pyx_v_changeover_days_product_columns);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "biopharma_scheduling/single_site/stochastic.pyx":436
 *                "Product labels in 'product' column do not match with the actual product columns in 'changeover_days_product_columns'."
 * 
 *     def __count_days(self, start_date: str, due_dates: list):             # <<<<<<<<<<<<<<
 *         self.start_date = start_date
 *         self.due_dates = due_dates
 */

/* Python wrapper */
static PyObject *__pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_7__count_days(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_7__count_days(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_start_date = 0;
  PyObject *__pyx_v_due_dates = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__count_days (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_start_date,&__pyx_n_s_due_dates,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_start_date)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_due_dates)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__count_days", 1, 2, 2, 1); __PYX_ERR(0, 436, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__count_days") < 0)) __PYX_ERR(0, 436, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_start_date = values[0];
    __pyx_v_due_dates = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__count_days", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 436, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("biopharma_scheduling.single_site.stochastic.StochSingleSiteSimple.__count_days", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_6__count_days(((struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *)__pyx_v_self), __pyx_v_start_date, __pyx_v_due_dates);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_6__count_days(struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *__pyx_v_self, PyObject *__pyx_v_start_date, PyObject *__pyx_v_due_dates) {
  PyObject *__pyx_v_days_per_period = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("__count_days", 0);
  __Pyx_INCREF(__pyx_v_start_date);
  __Pyx_INCREF(__pyx_v_due_dates);

  /* "biopharma_scheduling/single_site/stochastic.pyx":437
 * 
 *     def __count_days(self, start_date: str, due_dates: list):
 *         self.start_date = start_date             # <<<<<<<<<<<<<<
 *         self.due_dates = due_dates
 *         start_date = pd.to_datetime(start_date)
 */
  __Pyx_INCREF(__pyx_v_start_date);
  __Pyx_GIVEREF(__pyx_v_start_date);
  __Pyx_GOTREF(__pyx_v_self->start_date);
  __Pyx_DECREF(__pyx_v_self->start_date);
  __pyx_v_self->start_date = __pyx_v_start_date;

  /* "biopharma_scheduling/single_site/stochastic.pyx":438
 *     def __count_days(self, start_date: str, due_dates: list):
 *         self.start_date = start_date
 *         self.due_dates = due_dates             # <<<<<<<<<<<<<<
 *         start_date = pd.to_datetime(start_date)
 *         due_dates = pd.to_datetime(due_dates)
 */
  __Pyx_INCREF(__pyx_v_due_dates);
  __Pyx_GIVEREF(__pyx_v_due_dates);
  __Pyx_GOTREF(__pyx_v_self->due_dates);
  __Pyx_DECREF(__pyx_v_self->due_dates);
  __pyx_v_self->due_dates = __pyx_v_due_dates;

  /* "biopharma_scheduling/single_site/stochastic.pyx":439
 *         self.start_date = start_date
 *         self.due_dates = due_dates
 *         start_date = pd.to_datetime(start_date)             # <<<<<<<<<<<<<<
 *         due_dates = pd.to_datetime(due_dates)
 *         days_per_period = [(due_dates[0] - start_date).days]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_to_datetime); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_start_date); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_start_date};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 439, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_start_date};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 439, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 439, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_INCREF(__pyx_v_start_date);
      __Pyx_GIVEREF(__pyx_v_start_date);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_start_date);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 439, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_start_date, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":440
 *         self.due_dates = due_dates
 *         start_date = pd.to_datetime(start_date)
 *         due_dates = pd.to_datetime(due_dates)             # <<<<<<<<<<<<<<
 *         days_per_period = [(due_dates[0] - start_date).days]
 *         for i in range(1, len(due_dates), 1):
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pd); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_to_datetime); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_due_dates); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_due_dates};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 440, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_due_dates};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 440, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 440, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_due_dates);
      __Pyx_GIVEREF(__pyx_v_due_dates);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_due_dates);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 440, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_due_dates, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":441
 *         start_date = pd.to_datetime(start_date)
 *         due_dates = pd.to_datetime(due_dates)
 *         days_per_period = [(due_dates[0] - start_date).days]             # <<<<<<<<<<<<<<
 *         for i in range(1, len(due_dates), 1):
 *             days_per_period.append((due_dates[i] - due_dates[i - 1]).days)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_due_dates, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyNumber_Subtract(__pyx_t_1, __pyx_v_start_date); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_days); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_days_per_period = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":442
 *         due_dates = pd.to_datetime(due_dates)
 *         days_per_period = [(due_dates[0] - start_date).days]
 *         for i in range(1, len(due_dates), 1):             # <<<<<<<<<<<<<<
 *             days_per_period.append((due_dates[i] - due_dates[i - 1]).days)
 *         return days_per_period
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_due_dates); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 442, __pyx_L1_error)
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_int_1);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_1 = __pyx_t_4; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 442, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 442, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 442, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 442, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 442, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_6(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 442, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":443
 *         days_per_period = [(due_dates[0] - start_date).days]
 *         for i in range(1, len(due_dates), 1):
 *             days_per_period.append((due_dates[i] - due_dates[i - 1]).days)             # <<<<<<<<<<<<<<
 *         return days_per_period
 * 
 */
    __pyx_t_4 = PyObject_GetItem(__pyx_v_due_dates, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_GetItem(__pyx_v_due_dates, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Subtract(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_days); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_days_per_period, __pyx_t_3); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 443, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":442
 *         due_dates = pd.to_datetime(due_dates)
 *         days_per_period = [(due_dates[0] - start_date).days]
 *         for i in range(1, len(due_dates), 1):             # <<<<<<<<<<<<<<
 *             days_per_period.append((due_dates[i] - due_dates[i - 1]).days)
 *         return days_per_period
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":444
 *         for i in range(1, len(due_dates), 1):
 *             days_per_period.append((due_dates[i] - due_dates[i - 1]).days)
 *         return days_per_period             # <<<<<<<<<<<<<<
 * 
 *     def __run_single_objective_ga(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_days_per_period);
  __pyx_r = __pyx_v_days_per_period;
  goto __pyx_L0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":436
 *                "Product labels in 'product' column do not match with the actual product columns in 'changeover_days_product_columns'."
 * 
 *     def __count_days(self, start_date: str, due_dates: list):             # <<<<<<<<<<<<<<
 *         self.start_date = start_date
 *         self.due_dates = due_dates
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("biopharma_scheduling.single_site.stochastic.StochSingleSiteSimple.__count_days", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_days_per_period);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_start_date);
  __Pyx_XDECREF(__pyx_v_due_dates);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "biopharma_scheduling/single_site/stochastic.pyx":446
 *         return days_per_period
 * 
 *     def __run_single_objective_ga(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             SingleSiteSimpleSchedule schedule
 */

/* Python wrapper */
static PyObject *__pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_9__run_single_objective_ga(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_9__run_single_objective_ga(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__run_single_objective_ga (wrapper)", 0);
  __pyx_r = __pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_8__run_single_objective_ga(((struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_8__run_single_objective_ga(struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *__pyx_v_self) {
  struct types::SingleSiteSimpleSchedule __pyx_v_schedule;
  types::SingleObjectiveChromosome<struct types::SingleSiteSimpleGene>  __pyx_v_top_solution;
  std::vector<types::SingleObjectiveChromosome<struct types::SingleSiteSimpleGene> >  __pyx_v_solutions;
  algorithms::SingleObjectiveGA<types::SingleObjectiveChromosome<struct types::SingleSiteSimpleGene> ,stochastic::SingleSiteSimpleModel>  __pyx_v_ga;
  PyObject *__pyx_v_pbar = NULL;
  PyObject *__pyx_v_run = NULL;
  CYTHON_UNUSED int __pyx_v_gen;
  types::SingleObjectiveChromosome<struct types::SingleSiteSimpleGene>  __pyx_v_solution;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  std::vector<types::SingleObjectiveChromosome<struct types::SingleSiteSimpleGene> > ::iterator __pyx_t_14;
  types::SingleObjectiveChromosome<struct types::SingleSiteSimpleGene>  __pyx_t_15;
  struct types::SingleSiteSimpleSchedule __pyx_t_16;
  int __pyx_t_17;
  __Pyx_RefNannySetupContext("__run_single_objective_ga", 0);

  /* "biopharma_scheduling/single_site/stochastic.pyx":453
 * 
 *             SingleObjectiveGA[SingleObjectiveChromosome[SingleSiteSimpleGene], SingleSiteSimpleModel] ga = \
 *                 SingleObjectiveGA[SingleObjectiveChromosome[SingleSiteSimpleGene], SingleSiteSimpleModel](             # <<<<<<<<<<<<<<
 *                 self.single_site_simple,
 *                 self.random_state,
 */
  __pyx_v_ga = algorithms::SingleObjectiveGA<types::SingleObjectiveChromosome<struct types::SingleSiteSimpleGene> ,stochastic::SingleSiteSimpleModel> (__pyx_v_self->single_site_simple, __pyx_v_self->random_state, __pyx_v_self->num_threads);

  /* "biopharma_scheduling/single_site/stochastic.pyx":459
 *             )
 * 
 *         if self.verbose:             # <<<<<<<<<<<<<<
 *             pbar = tqdm(total=self.num_runs * self.num_gens)
 * 
 */
  __pyx_t_1 = (__pyx_v_self->verbose != 0);
  if (__pyx_t_1) {

    /* "biopharma_scheduling/single_site/stochastic.pyx":460
 * 
 *         if self.verbose:
 *             pbar = tqdm(total=self.num_runs * self.num_gens)             # <<<<<<<<<<<<<<
 * 
 *         for run in range(self.num_runs):
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_tqdm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 460, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 460, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_self->num_runs * __pyx_v_self->num_gens)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 460, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_total, __pyx_t_4) < 0) __PYX_ERR(0, 460, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 460, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_pbar = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":459
 *             )
 * 
 *         if self.verbose:             # <<<<<<<<<<<<<<
 *             pbar = tqdm(total=self.num_runs * self.num_gens)
 * 
 */
  }

  /* "biopharma_scheduling/single_site/stochastic.pyx":462
 *             pbar = tqdm(total=self.num_runs * self.num_gens)
 * 
 *         for run in range(self.num_runs):             # <<<<<<<<<<<<<<
 *             if self.verbose:
 *                 pbar.set_description('GA is running %d/%d' % (run + 1, self.num_runs))
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->num_runs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 462, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 462, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 462, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 462, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 462, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 462, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 462, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_run, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":463
 * 
 *         for run in range(self.num_runs):
 *             if self.verbose:             # <<<<<<<<<<<<<<
 *                 pbar.set_description('GA is running %d/%d' % (run + 1, self.num_runs))
 * 
 */
    __pyx_t_1 = (__pyx_v_self->verbose != 0);
    if (__pyx_t_1) {

      /* "biopharma_scheduling/single_site/stochastic.pyx":464
 *         for run in range(self.num_runs):
 *             if self.verbose:
 *                 pbar.set_description('GA is running %d/%d' % (run + 1, self.num_runs))             # <<<<<<<<<<<<<<
 * 
 *             ga.Init(
 */
      if (unlikely(!__pyx_v_pbar)) { __Pyx_RaiseUnboundLocalError("pbar"); __PYX_ERR(0, 464, __pyx_L1_error) }
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_pbar, __pyx_n_s_set_description); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 464, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_v_run, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 464, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_self->num_runs); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 464, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 464, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyString_Format(__pyx_kp_s_GA_is_running_d_d, __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 464, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      if (!__pyx_t_9) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 464, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_2)) {
          PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_8};
          __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 464, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
          PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_8};
          __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 464, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        } else
        #endif
        {
          __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 464, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_9); __pyx_t_9 = NULL;
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_8);
          __pyx_t_8 = 0;
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 464, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":463
 * 
 *         for run in range(self.num_runs):
 *             if self.verbose:             # <<<<<<<<<<<<<<
 *                 pbar.set_description('GA is running %d/%d' % (run + 1, self.num_runs))
 * 
 */
    }

    /* "biopharma_scheduling/single_site/stochastic.pyx":471
 *                 self.p_xo,
 *                 self.p_gene_swap,
 *                 len(self.product_labels),             # <<<<<<<<<<<<<<
 *                 self.p_product_mut,
 *                 self.p_plus_batch_mut,
 */
    __pyx_t_4 = __pyx_v_self->product_labels;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_10 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 471, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":466
 *                 pbar.set_description('GA is running %d/%d' % (run + 1, self.num_runs))
 * 
 *             ga.Init(             # <<<<<<<<<<<<<<
 *                 self.popsize,
 *                 self.starting_length,
 */
    __pyx_v_ga.Init(__pyx_v_self->popsize, __pyx_v_self->starting_length, __pyx_v_self->p_xo, __pyx_v_self->p_gene_swap, __pyx_t_10, __pyx_v_self->p_product_mut, __pyx_v_self->p_plus_batch_mut, __pyx_v_self->p_minus_batch_mut);

    /* "biopharma_scheduling/single_site/stochastic.pyx":477
 *             )
 * 
 *             for gen in range(self.num_gens):             # <<<<<<<<<<<<<<
 *                 ga.Update()
 * 
 */
    __pyx_t_11 = __pyx_v_self->num_gens;
    for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
      __pyx_v_gen = __pyx_t_12;

      /* "biopharma_scheduling/single_site/stochastic.pyx":478
 * 
 *             for gen in range(self.num_gens):
 *                 ga.Update()             # <<<<<<<<<<<<<<
 * 
 *                 if self.verbose:
 */
      __pyx_v_ga.Update();

      /* "biopharma_scheduling/single_site/stochastic.pyx":480
 *                 ga.Update()
 * 
 *                 if self.verbose:             # <<<<<<<<<<<<<<
 *                     pbar.update()
 * 
 */
      __pyx_t_1 = (__pyx_v_self->verbose != 0);
      if (__pyx_t_1) {

        /* "biopharma_scheduling/single_site/stochastic.pyx":481
 * 
 *                 if self.verbose:
 *                     pbar.update()             # <<<<<<<<<<<<<<
 * 
 *             top_solution = ga.Top()
 */
        if (unlikely(!__pyx_v_pbar)) { __Pyx_RaiseUnboundLocalError("pbar"); __PYX_ERR(0, 481, __pyx_L1_error) }
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_pbar, __pyx_n_s_update); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 481, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        if (__pyx_t_7) {
          __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 481, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else {
          __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 481, __pyx_L1_error)
        }
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "biopharma_scheduling/single_site/stochastic.pyx":480
 *                 ga.Update()
 * 
 *                 if self.verbose:             # <<<<<<<<<<<<<<
 *                     pbar.update()
 * 
 */
      }
    }

    /* "biopharma_scheduling/single_site/stochastic.pyx":483
 *                     pbar.update()
 * 
 *             top_solution = ga.Top()             # <<<<<<<<<<<<<<
 *             solutions.push_back(top_solution)
 * 
 */
    __pyx_v_top_solution = __pyx_v_ga.Top();

    /* "biopharma_scheduling/single_site/stochastic.pyx":484
 * 
 *             top_solution = ga.Top()
 *             solutions.push_back(top_solution)             # <<<<<<<<<<<<<<
 * 
 *         if self.verbose and self.save_history:
 */
    try {
      __pyx_v_solutions.push_back(__pyx_v_top_solution);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 484, __pyx_L1_error)
    }

    /* "biopharma_scheduling/single_site/stochastic.pyx":462
 *             pbar = tqdm(total=self.num_runs * self.num_gens)
 * 
 *         for run in range(self.num_runs):             # <<<<<<<<<<<<<<
 *             if self.verbose:
 *                 pbar.set_description('GA is running %d/%d' % (run + 1, self.num_runs))
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":486
 *             solutions.push_back(top_solution)
 * 
 *         if self.verbose and self.save_history:             # <<<<<<<<<<<<<<
 *             pbar.set_description('Processing history')
 * 
 */
  __pyx_t_13 = (__pyx_v_self->verbose != 0);
  if (__pyx_t_13) {
  } else {
    __pyx_t_1 = __pyx_t_13;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_13 = (__pyx_v_self->save_history != 0);
  __pyx_t_1 = __pyx_t_13;
  __pyx_L11_bool_binop_done:;
  if (__pyx_t_1) {

    /* "biopharma_scheduling/single_site/stochastic.pyx":487
 * 
 *         if self.verbose and self.save_history:
 *             pbar.set_description('Processing history')             # <<<<<<<<<<<<<<
 * 
 *         if self.save_history:
 */
    if (unlikely(!__pyx_v_pbar)) { __Pyx_RaiseUnboundLocalError("pbar"); __PYX_ERR(0, 487, __pyx_L1_error) }
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_pbar, __pyx_n_s_set_description); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":486
 *             solutions.push_back(top_solution)
 * 
 *         if self.verbose and self.save_history:             # <<<<<<<<<<<<<<
 *             pbar.set_description('Processing history')
 * 
 */
  }

  /* "biopharma_scheduling/single_site/stochastic.pyx":489
 *             pbar.set_description('Processing history')
 * 
 *         if self.save_history:             # <<<<<<<<<<<<<<
 *             self.history = []
 *             for solution in solutions:
 */
  __pyx_t_1 = (__pyx_v_self->save_history != 0);
  if (__pyx_t_1) {

    /* "biopharma_scheduling/single_site/stochastic.pyx":490
 * 
 *         if self.save_history:
 *             self.history = []             # <<<<<<<<<<<<<<
 *             for solution in solutions:
 *                 schedule = SingleSiteSimpleSchedule()
 */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 490, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_self->history);
    __Pyx_DECREF(__pyx_v_self->history);
    __pyx_v_self->history = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":491
 *         if self.save_history:
 *             self.history = []
 *             for solution in solutions:             # <<<<<<<<<<<<<<
 *                 schedule = SingleSiteSimpleSchedule()
 *                 self.single_site_simple.CreateSchedule(solution, schedule)
 */
    __pyx_t_14 = __pyx_v_solutions.begin();
    for (;;) {
      if (!(__pyx_t_14 != __pyx_v_solutions.end())) break;
      __pyx_t_15 = *__pyx_t_14;
      ++__pyx_t_14;
      __pyx_v_solution = __pyx_t_15;

      /* "biopharma_scheduling/single_site/stochastic.pyx":492
 *             self.history = []
 *             for solution in solutions:
 *                 schedule = SingleSiteSimpleSchedule()             # <<<<<<<<<<<<<<
 *                 self.single_site_simple.CreateSchedule(solution, schedule)
 *                 self.history.append(self.__make_pyschedule(schedule))
 */
      __pyx_v_schedule = __pyx_t_16;

      /* "biopharma_scheduling/single_site/stochastic.pyx":493
 *             for solution in solutions:
 *                 schedule = SingleSiteSimpleSchedule()
 *                 self.single_site_simple.CreateSchedule(solution, schedule)             # <<<<<<<<<<<<<<
 *                 self.history.append(self.__make_pyschedule(schedule))
 * 
 */
      __pyx_v_self->single_site_simple.CreateSchedule(__pyx_v_solution, __pyx_v_schedule);

      /* "biopharma_scheduling/single_site/stochastic.pyx":494
 *                 schedule = SingleSiteSimpleSchedule()
 *                 self.single_site_simple.CreateSchedule(solution, schedule)
 *                 self.history.append(self.__make_pyschedule(schedule))             # <<<<<<<<<<<<<<
 * 
 *         if self.verbose:
 */
      __pyx_t_4 = ((struct __pyx_vtabstruct_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *)__pyx_v_self->__pyx_vtab)->__pyx___make_pyschedule(__pyx_v_self, __pyx_v_schedule); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 494, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_17 = __Pyx_PyObject_Append(__pyx_v_self->history, __pyx_t_4); if (unlikely(__pyx_t_17 == -1)) __PYX_ERR(0, 494, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":491
 *         if self.save_history:
 *             self.history = []
 *             for solution in solutions:             # <<<<<<<<<<<<<<
 *                 schedule = SingleSiteSimpleSchedule()
 *                 self.single_site_simple.CreateSchedule(solution, schedule)
 */
    }

    /* "biopharma_scheduling/single_site/stochastic.pyx":489
 *             pbar.set_description('Processing history')
 * 
 *         if self.save_history:             # <<<<<<<<<<<<<<
 *             self.history = []
 *             for solution in solutions:
 */
  }

  /* "biopharma_scheduling/single_site/stochastic.pyx":496
 *                 self.history.append(self.__make_pyschedule(schedule))
 * 
 *         if self.verbose:             # <<<<<<<<<<<<<<
 *             pbar.set_description('Collecting schedules')
 * 
 */
  __pyx_t_1 = (__pyx_v_self->verbose != 0);
  if (__pyx_t_1) {

    /* "biopharma_scheduling/single_site/stochastic.pyx":497
 * 
 *         if self.verbose:
 *             pbar.set_description('Collecting schedules')             # <<<<<<<<<<<<<<
 * 
 *         self.schedules = []
 */
    if (unlikely(!__pyx_v_pbar)) { __Pyx_RaiseUnboundLocalError("pbar"); __PYX_ERR(0, 497, __pyx_L1_error) }
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_pbar, __pyx_n_s_set_description); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 497, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 497, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":496
 *                 self.history.append(self.__make_pyschedule(schedule))
 * 
 *         if self.verbose:             # <<<<<<<<<<<<<<
 *             pbar.set_description('Collecting schedules')
 * 
 */
  }

  /* "biopharma_scheduling/single_site/stochastic.pyx":499
 *             pbar.set_description('Collecting schedules')
 * 
 *         self.schedules = []             # <<<<<<<<<<<<<<
 *         top_solution = ga.Top(solutions)
 *         solutions.resize(1)
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->schedules);
  __Pyx_DECREF(__pyx_v_self->schedules);
  __pyx_v_self->schedules = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":500
 * 
 *         self.schedules = []
 *         top_solution = ga.Top(solutions)             # <<<<<<<<<<<<<<
 *         solutions.resize(1)
 *         solutions[0] = top_solution
 */
  __pyx_v_top_solution = __pyx_v_ga.Top(__pyx_v_solutions);

  /* "biopharma_scheduling/single_site/stochastic.pyx":501
 *         self.schedules = []
 *         top_solution = ga.Top(solutions)
 *         solutions.resize(1)             # <<<<<<<<<<<<<<
 *         solutions[0] = top_solution
 *         for solution in solutions:
 */
  try {
    __pyx_v_solutions.resize(1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 501, __pyx_L1_error)
  }

  /* "biopharma_scheduling/single_site/stochastic.pyx":502
 *         top_solution = ga.Top(solutions)
 *         solutions.resize(1)
 *         solutions[0] = top_solution             # <<<<<<<<<<<<<<
 *         for solution in solutions:
 *             schedule = SingleSiteSimpleSchedule()
 */
  (__pyx_v_solutions[0]) = __pyx_v_top_solution;

  /* "biopharma_scheduling/single_site/stochastic.pyx":503
 *         solutions.resize(1)
 *         solutions[0] = top_solution
 *         for solution in solutions:             # <<<<<<<<<<<<<<
 *             schedule = SingleSiteSimpleSchedule()
 *             self.single_site_simple.CreateSchedule(solution, schedule)
 */
  __pyx_t_14 = __pyx_v_solutions.begin();
  for (;;) {
    if (!(__pyx_t_14 != __pyx_v_solutions.end())) break;
    __pyx_t_15 = *__pyx_t_14;
    ++__pyx_t_14;
    __pyx_v_solution = __pyx_t_15;

    /* "biopharma_scheduling/single_site/stochastic.pyx":504
 *         solutions[0] = top_solution
 *         for solution in solutions:
 *             schedule = SingleSiteSimpleSchedule()             # <<<<<<<<<<<<<<
 *             self.single_site_simple.CreateSchedule(solution, schedule)
 *             self.schedules.append(self.__make_pyschedule(schedule))
 */
    __pyx_v_schedule = __pyx_t_16;

    /* "biopharma_scheduling/single_site/stochastic.pyx":505
 *         for solution in solutions:
 *             schedule = SingleSiteSimpleSchedule()
 *             self.single_site_simple.CreateSchedule(solution, schedule)             # <<<<<<<<<<<<<<
 *             self.schedules.append(self.__make_pyschedule(schedule))
 * 
 */
    __pyx_v_self->single_site_simple.CreateSchedule(__pyx_v_solution, __pyx_v_schedule);

    /* "biopharma_scheduling/single_site/stochastic.pyx":506
 *             schedule = SingleSiteSimpleSchedule()
 *             self.single_site_simple.CreateSchedule(solution, schedule)
 *             self.schedules.append(self.__make_pyschedule(schedule))             # <<<<<<<<<<<<<<
 * 
 *         if self.verbose:
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *)__pyx_v_self->__pyx_vtab)->__pyx___make_pyschedule(__pyx_v_self, __pyx_v_schedule); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 506, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_17 = __Pyx_PyObject_Append(__pyx_v_self->schedules, __pyx_t_3); if (unlikely(__pyx_t_17 == -1)) __PYX_ERR(0, 506, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":503
 *         solutions.resize(1)
 *         solutions[0] = top_solution
 *         for solution in solutions:             # <<<<<<<<<<<<<<
 *             schedule = SingleSiteSimpleSchedule()
 *             self.single_site_simple.CreateSchedule(solution, schedule)
 */
  }

  /* "biopharma_scheduling/single_site/stochastic.pyx":508
 *             self.schedules.append(self.__make_pyschedule(schedule))
 * 
 *         if self.verbose:             # <<<<<<<<<<<<<<
 *             pbar.set_description('Done')
 *             pbar.close()
 */
  __pyx_t_1 = (__pyx_v_self->verbose != 0);
  if (__pyx_t_1) {

    /* "biopharma_scheduling/single_site/stochastic.pyx":509
 * 
 *         if self.verbose:
 *             pbar.set_description('Done')             # <<<<<<<<<<<<<<
 *             pbar.close()
 * 
 */
    if (unlikely(!__pyx_v_pbar)) { __Pyx_RaiseUnboundLocalError("pbar"); __PYX_ERR(0, 509, __pyx_L1_error) }
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_pbar, __pyx_n_s_set_description); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":510
 *         if self.verbose:
 *             pbar.set_description('Done')
 *             pbar.close()             # <<<<<<<<<<<<<<
 * 
 *     def __run_nsgaii(self):
 */
    if (unlikely(!__pyx_v_pbar)) { __Pyx_RaiseUnboundLocalError("pbar"); __PYX_ERR(0, 510, __pyx_L1_error) }
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_pbar, __pyx_n_s_close); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_2) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 510, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 510, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":508
 *             self.schedules.append(self.__make_pyschedule(schedule))
 * 
 *         if self.verbose:             # <<<<<<<<<<<<<<
 *             pbar.set_description('Done')
 *             pbar.close()
 */
  }

  /* "biopharma_scheduling/single_site/stochastic.pyx":446
 *         return days_per_period
 * 
 *     def __run_single_objective_ga(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             SingleSiteSimpleSchedule schedule
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("biopharma_scheduling.single_site.stochastic.StochSingleSiteSimple.__run_single_objective_ga", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pbar);
  __Pyx_XDECREF(__pyx_v_run);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "biopharma_scheduling/single_site/stochastic.pyx":512
 *             pbar.close()
 * 
 *     def __run_nsgaii(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             SingleSiteSimpleSchedule schedule
 */

/* Python wrapper */
static PyObject *__pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_11__run_nsgaii(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_11__run_nsgaii(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__run_nsgaii (wrapper)", 0);
  __pyx_r = __pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_10__run_nsgaii(((struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_10__run_nsgaii(struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *__pyx_v_self) {
  struct types::SingleSiteSimpleSchedule __pyx_v_schedule;
  std::vector<std::vector<types::NSGAChromosome<struct types::SingleSiteSimpleGene> > >  __pyx_v_history;
  std::vector<types::NSGAChromosome<struct types::SingleSiteSimpleGene> >  __pyx_v_solutions;
  std::vector<types::NSGAChromosome<struct types::SingleSiteSimpleGene> >  __pyx_v_top_front;
  algorithms::NSGAII<types::NSGAChromosome<struct types::SingleSiteSimpleGene> ,stochastic::SingleSiteSimpleModel>  __pyx_v_nsgaii;
  PyObject *__pyx_v_pbar = NULL;
  PyObject *__pyx_v_run = NULL;
  CYTHON_UNUSED int __pyx_v_gen;
  std::vector<types::NSGAChromosome<struct types::SingleSiteSimpleGene> >  __pyx_v_front;
  types::NSGAChromosome<struct types::SingleSiteSimpleGene>  __pyx_v_solution;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  std::vector<std::vector<types::NSGAChromosome<struct types::SingleSiteSimpleGene> > > ::iterator __pyx_t_14;
  std::vector<types::NSGAChromosome<struct types::SingleSiteSimpleGene> >  __pyx_t_15;
  int __pyx_t_16;
  std::vector<types::NSGAChromosome<struct types::SingleSiteSimpleGene> > ::iterator __pyx_t_17;
  types::NSGAChromosome<struct types::SingleSiteSimpleGene>  __pyx_t_18;
  struct types::SingleSiteSimpleSchedule __pyx_t_19;
  __Pyx_RefNannySetupContext("__run_nsgaii", 0);

  /* "biopharma_scheduling/single_site/stochastic.pyx":519
 * 
 *             NSGAII[NSGAChromosome[SingleSiteSimpleGene], SingleSiteSimpleModel] nsgaii = \
 *                 NSGAII[NSGAChromosome[SingleSiteSimpleGene], SingleSiteSimpleModel](             # <<<<<<<<<<<<<<
 *                 self.single_site_simple,
 *                 self.random_state,
 */
  __pyx_v_nsgaii = algorithms::NSGAII<types::NSGAChromosome<struct types::SingleSiteSimpleGene> ,stochastic::SingleSiteSimpleModel> (__pyx_v_self->single_site_simple, __pyx_v_self->random_state, __pyx_v_self->num_threads);

  /* "biopharma_scheduling/single_site/stochastic.pyx":525
 *             )
 * 
 *         if self.verbose:             # <<<<<<<<<<<<<<
 *             pbar = tqdm(total=self.num_runs * self.num_gens)
 * 
 */
  __pyx_t_1 = (__pyx_v_self->verbose != 0);
  if (__pyx_t_1) {

    /* "biopharma_scheduling/single_site/stochastic.pyx":526
 * 
 *         if self.verbose:
 *             pbar = tqdm(total=self.num_runs * self.num_gens)             # <<<<<<<<<<<<<<
 * 
 *         for run in range(self.num_runs):
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_tqdm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_self->num_runs * __pyx_v_self->num_gens)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_total, __pyx_t_4) < 0) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_pbar = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":525
 *             )
 * 
 *         if self.verbose:             # <<<<<<<<<<<<<<
 *             pbar = tqdm(total=self.num_runs * self.num_gens)
 * 
 */
  }

  /* "biopharma_scheduling/single_site/stochastic.pyx":528
 *             pbar = tqdm(total=self.num_runs * self.num_gens)
 * 
 *         for run in range(self.num_runs):             # <<<<<<<<<<<<<<
 *             if self.verbose:
 *                 pbar.set_description('GA is running %d/%d' % (run + 1, self.num_runs))
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->num_runs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 528, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 528, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 528, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 528, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 528, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 528, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 528, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_run, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":529
 * 
 *         for run in range(self.num_runs):
 *             if self.verbose:             # <<<<<<<<<<<<<<
 *                 pbar.set_description('GA is running %d/%d' % (run + 1, self.num_runs))
 * 
 */
    __pyx_t_1 = (__pyx_v_self->verbose != 0);
    if (__pyx_t_1) {

      /* "biopharma_scheduling/single_site/stochastic.pyx":530
 *         for run in range(self.num_runs):
 *             if self.verbose:
 *                 pbar.set_description('GA is running %d/%d' % (run + 1, self.num_runs))             # <<<<<<<<<<<<<<
 * 
 *             nsgaii.Init(
 */
      if (unlikely(!__pyx_v_pbar)) { __Pyx_RaiseUnboundLocalError("pbar"); __PYX_ERR(0, 530, __pyx_L1_error) }
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_pbar, __pyx_n_s_set_description); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 530, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_v_run, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 530, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_self->num_runs); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 530, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 530, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyString_Format(__pyx_kp_s_GA_is_running_d_d, __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 530, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      if (!__pyx_t_9) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 530, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_2)) {
          PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_8};
          __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 530, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
          PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_8};
          __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 530, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        } else
        #endif
        {
          __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 530, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_9); __pyx_t_9 = NULL;
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_8);
          __pyx_t_8 = 0;
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 530, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":529
 * 
 *         for run in range(self.num_runs):
 *             if self.verbose:             # <<<<<<<<<<<<<<
 *                 pbar.set_description('GA is running %d/%d' % (run + 1, self.num_runs))
 * 
 */
    }

    /* "biopharma_scheduling/single_site/stochastic.pyx":537
 *                 self.p_xo,
 *                 self.p_gene_swap,
 *                 len(self.product_labels),             # <<<<<<<<<<<<<<
 *                 self.p_product_mut,
 *                 self.p_plus_batch_mut,
 */
    __pyx_t_4 = __pyx_v_self->product_labels;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_10 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":532
 *                 pbar.set_description('GA is running %d/%d' % (run + 1, self.num_runs))
 * 
 *             nsgaii.Init(             # <<<<<<<<<<<<<<
 *                 self.popsize,
 *                 self.starting_length,
 */
    __pyx_v_nsgaii.Init(__pyx_v_self->popsize, __pyx_v_self->starting_length, __pyx_v_self->p_xo, __pyx_v_self->p_gene_swap, __pyx_t_10, __pyx_v_self->p_product_mut, __pyx_v_self->p_plus_batch_mut, __pyx_v_self->p_minus_batch_mut);

    /* "biopharma_scheduling/single_site/stochastic.pyx":543
 *             )
 * 
 *             for gen in range(self.num_gens):             # <<<<<<<<<<<<<<
 *                 nsgaii.Update()
 * 
 */
    __pyx_t_11 = __pyx_v_self->num_gens;
    for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
      __pyx_v_gen = __pyx_t_12;

      /* "biopharma_scheduling/single_site/stochastic.pyx":544
 * 
 *             for gen in range(self.num_gens):
 *                 nsgaii.Update()             # <<<<<<<<<<<<<<
 * 
 *                 if self.verbose:
 */
      __pyx_v_nsgaii.Update();

      /* "biopharma_scheduling/single_site/stochastic.pyx":546
 *                 nsgaii.Update()
 * 
 *                 if self.verbose:             # <<<<<<<<<<<<<<
 *                     pbar.update()
 * 
 */
      __pyx_t_1 = (__pyx_v_self->verbose != 0);
      if (__pyx_t_1) {

        /* "biopharma_scheduling/single_site/stochastic.pyx":547
 * 
 *                 if self.verbose:
 *                     pbar.update()             # <<<<<<<<<<<<<<
 * 
 *             top_front = nsgaii.TopFront()
 */
        if (unlikely(!__pyx_v_pbar)) { __Pyx_RaiseUnboundLocalError("pbar"); __PYX_ERR(0, 547, __pyx_L1_error) }
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_pbar, __pyx_n_s_update); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 547, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        if (__pyx_t_7) {
          __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 547, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else {
          __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 547, __pyx_L1_error)
        }
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "biopharma_scheduling/single_site/stochastic.pyx":546
 *                 nsgaii.Update()
 * 
 *                 if self.verbose:             # <<<<<<<<<<<<<<
 *                     pbar.update()
 * 
 */
      }
    }

    /* "biopharma_scheduling/single_site/stochastic.pyx":549
 *                     pbar.update()
 * 
 *             top_front = nsgaii.TopFront()             # <<<<<<<<<<<<<<
 *             solutions.insert(solutions.end(), top_front.begin(), top_front.end())
 * 
 */
    __pyx_v_top_front = __pyx_v_nsgaii.TopFront();

    /* "biopharma_scheduling/single_site/stochastic.pyx":550
 * 
 *             top_front = nsgaii.TopFront()
 *             solutions.insert(solutions.end(), top_front.begin(), top_front.end())             # <<<<<<<<<<<<<<
 * 
 *             if self.save_history:
 */
    try {
      __pyx_v_solutions.insert(__pyx_v_solutions.end(), __pyx_v_top_front.begin(), __pyx_v_top_front.end());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 550, __pyx_L1_error)
    }

    /* "biopharma_scheduling/single_site/stochastic.pyx":552
 *             solutions.insert(solutions.end(), top_front.begin(), top_front.end())
 * 
 *             if self.save_history:             # <<<<<<<<<<<<<<
 *                 history.push_back(top_front)
 * 
 */
    __pyx_t_1 = (__pyx_v_self->save_history != 0);
    if (__pyx_t_1) {

      /* "biopharma_scheduling/single_site/stochastic.pyx":553
 * 
 *             if self.save_history:
 *                 history.push_back(top_front)             # <<<<<<<<<<<<<<
 * 
 *         if self.verbose and self.save_history:
 */
      try {
        __pyx_v_history.push_back(__pyx_v_top_front);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 553, __pyx_L1_error)
      }

      /* "biopharma_scheduling/single_site/stochastic.pyx":552
 *             solutions.insert(solutions.end(), top_front.begin(), top_front.end())
 * 
 *             if self.save_history:             # <<<<<<<<<<<<<<
 *                 history.push_back(top_front)
 * 
 */
    }

    /* "biopharma_scheduling/single_site/stochastic.pyx":528
 *             pbar = tqdm(total=self.num_runs * self.num_gens)
 * 
 *         for run in range(self.num_runs):             # <<<<<<<<<<<<<<
 *             if self.verbose:
 *                 pbar.set_description('GA is running %d/%d' % (run + 1, self.num_runs))
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":555
 *                 history.push_back(top_front)
 * 
 *         if self.verbose and self.save_history:             # <<<<<<<<<<<<<<
 *             pbar.set_description('Processing history')
 * 
 */
  __pyx_t_13 = (__pyx_v_self->verbose != 0);
  if (__pyx_t_13) {
  } else {
    __pyx_t_1 = __pyx_t_13;
    goto __pyx_L12_bool_binop_done;
  }
  __pyx_t_13 = (__pyx_v_self->save_history != 0);
  __pyx_t_1 = __pyx_t_13;
  __pyx_L12_bool_binop_done:;
  if (__pyx_t_1) {

    /* "biopharma_scheduling/single_site/stochastic.pyx":556
 * 
 *         if self.verbose and self.save_history:
 *             pbar.set_description('Processing history')             # <<<<<<<<<<<<<<
 * 
 *         if self.save_history:
 */
    if (unlikely(!__pyx_v_pbar)) { __Pyx_RaiseUnboundLocalError("pbar"); __PYX_ERR(0, 556, __pyx_L1_error) }
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_pbar, __pyx_n_s_set_description); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":555
 *                 history.push_back(top_front)
 * 
 *         if self.verbose and self.save_history:             # <<<<<<<<<<<<<<
 *             pbar.set_description('Processing history')
 * 
 */
  }

  /* "biopharma_scheduling/single_site/stochastic.pyx":558
 *             pbar.set_description('Processing history')
 * 
 *         if self.save_history:             # <<<<<<<<<<<<<<
 *             self.history = []
 *             for front in history:
 */
  __pyx_t_1 = (__pyx_v_self->save_history != 0);
  if (__pyx_t_1) {

    /* "biopharma_scheduling/single_site/stochastic.pyx":559
 * 
 *         if self.save_history:
 *             self.history = []             # <<<<<<<<<<<<<<
 *             for front in history:
 *                 self.history.append([])
 */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_self->history);
    __Pyx_DECREF(__pyx_v_self->history);
    __pyx_v_self->history = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":560
 *         if self.save_history:
 *             self.history = []
 *             for front in history:             # <<<<<<<<<<<<<<
 *                 self.history.append([])
 *                 for solution in front:
 */
    __pyx_t_14 = __pyx_v_history.begin();
    for (;;) {
      if (!(__pyx_t_14 != __pyx_v_history.end())) break;
      __pyx_t_15 = *__pyx_t_14;
      ++__pyx_t_14;
      __pyx_v_front = __pyx_t_15;

      /* "biopharma_scheduling/single_site/stochastic.pyx":561
 *             self.history = []
 *             for front in history:
 *                 self.history.append([])             # <<<<<<<<<<<<<<
 *                 for solution in front:
 *                     schedule = SingleSiteSimpleSchedule()
 */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 561, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_16 = __Pyx_PyObject_Append(__pyx_v_self->history, __pyx_t_4); if (unlikely(__pyx_t_16 == -1)) __PYX_ERR(0, 561, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":562
 *             for front in history:
 *                 self.history.append([])
 *                 for solution in front:             # <<<<<<<<<<<<<<
 *                     schedule = SingleSiteSimpleSchedule()
 *                     self.single_site_simple.CreateSchedule(solution, schedule)
 */
      __pyx_t_17 = __pyx_v_front.begin();
      for (;;) {
        if (!(__pyx_t_17 != __pyx_v_front.end())) break;
        __pyx_t_18 = *__pyx_t_17;
        ++__pyx_t_17;
        __pyx_v_solution = __pyx_t_18;

        /* "biopharma_scheduling/single_site/stochastic.pyx":563
 *                 self.history.append([])
 *                 for solution in front:
 *                     schedule = SingleSiteSimpleSchedule()             # <<<<<<<<<<<<<<
 *                     self.single_site_simple.CreateSchedule(solution, schedule)
 *                     self.history[-1].append(self.__make_pyschedule(schedule))
 */
        __pyx_v_schedule = __pyx_t_19;

        /* "biopharma_scheduling/single_site/stochastic.pyx":564
 *                 for solution in front:
 *                     schedule = SingleSiteSimpleSchedule()
 *                     self.single_site_simple.CreateSchedule(solution, schedule)             # <<<<<<<<<<<<<<
 *                     self.history[-1].append(self.__make_pyschedule(schedule))
 * 
 */
        __pyx_v_self->single_site_simple.CreateSchedule(__pyx_v_solution, __pyx_v_schedule);

        /* "biopharma_scheduling/single_site/stochastic.pyx":565
 *                     schedule = SingleSiteSimpleSchedule()
 *                     self.single_site_simple.CreateSchedule(solution, schedule)
 *                     self.history[-1].append(self.__make_pyschedule(schedule))             # <<<<<<<<<<<<<<
 * 
 *         if self.verbose:
 */
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_self->history, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 565, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = ((struct __pyx_vtabstruct_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *)__pyx_v_self->__pyx_vtab)->__pyx___make_pyschedule(__pyx_v_self, __pyx_v_schedule); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 565, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_16 = __Pyx_PyObject_Append(__pyx_t_4, __pyx_t_3); if (unlikely(__pyx_t_16 == -1)) __PYX_ERR(0, 565, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "biopharma_scheduling/single_site/stochastic.pyx":562
 *             for front in history:
 *                 self.history.append([])
 *                 for solution in front:             # <<<<<<<<<<<<<<
 *                     schedule = SingleSiteSimpleSchedule()
 *                     self.single_site_simple.CreateSchedule(solution, schedule)
 */
      }

      /* "biopharma_scheduling/single_site/stochastic.pyx":560
 *         if self.save_history:
 *             self.history = []
 *             for front in history:             # <<<<<<<<<<<<<<
 *                 self.history.append([])
 *                 for solution in front:
 */
    }

    /* "biopharma_scheduling/single_site/stochastic.pyx":558
 *             pbar.set_description('Processing history')
 * 
 *         if self.save_history:             # <<<<<<<<<<<<<<
 *             self.history = []
 *             for front in history:
 */
  }

  /* "biopharma_scheduling/single_site/stochastic.pyx":567
 *                     self.history[-1].append(self.__make_pyschedule(schedule))
 * 
 *         if self.verbose:             # <<<<<<<<<<<<<<
 *             pbar.set_description('Collecting schedules')
 * 
 */
  __pyx_t_1 = (__pyx_v_self->verbose != 0);
  if (__pyx_t_1) {

    /* "biopharma_scheduling/single_site/stochastic.pyx":568
 * 
 *         if self.verbose:
 *             pbar.set_description('Collecting schedules')             # <<<<<<<<<<<<<<
 * 
 *         self.schedules = []
 */
    if (unlikely(!__pyx_v_pbar)) { __Pyx_RaiseUnboundLocalError("pbar"); __PYX_ERR(0, 568, __pyx_L1_error) }
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_pbar, __pyx_n_s_set_description); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 568, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 568, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":567
 *                     self.history[-1].append(self.__make_pyschedule(schedule))
 * 
 *         if self.verbose:             # <<<<<<<<<<<<<<
 *             pbar.set_description('Collecting schedules')
 * 
 */
  }

  /* "biopharma_scheduling/single_site/stochastic.pyx":570
 *             pbar.set_description('Collecting schedules')
 * 
 *         self.schedules = []             # <<<<<<<<<<<<<<
 *         solutions = nsgaii.TopFront(solutions)
 *         for solution in solutions:
 */
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->schedules);
  __Pyx_DECREF(__pyx_v_self->schedules);
  __pyx_v_self->schedules = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":571
 * 
 *         self.schedules = []
 *         solutions = nsgaii.TopFront(solutions)             # <<<<<<<<<<<<<<
 *         for solution in solutions:
 *             schedule = SingleSiteSimpleSchedule()
 */
  __pyx_v_solutions = __pyx_v_nsgaii.TopFront(__pyx_v_solutions);

  /* "biopharma_scheduling/single_site/stochastic.pyx":572
 *         self.schedules = []
 *         solutions = nsgaii.TopFront(solutions)
 *         for solution in solutions:             # <<<<<<<<<<<<<<
 *             schedule = SingleSiteSimpleSchedule()
 *             self.single_site_simple.CreateSchedule(solution, schedule)
 */
  __pyx_t_17 = __pyx_v_solutions.begin();
  for (;;) {
    if (!(__pyx_t_17 != __pyx_v_solutions.end())) break;
    __pyx_t_18 = *__pyx_t_17;
    ++__pyx_t_17;
    __pyx_v_solution = __pyx_t_18;

    /* "biopharma_scheduling/single_site/stochastic.pyx":573
 *         solutions = nsgaii.TopFront(solutions)
 *         for solution in solutions:
 *             schedule = SingleSiteSimpleSchedule()             # <<<<<<<<<<<<<<
 *             self.single_site_simple.CreateSchedule(solution, schedule)
 *             self.schedules.append(self.__make_pyschedule(schedule))
 */
    __pyx_v_schedule = __pyx_t_19;

    /* "biopharma_scheduling/single_site/stochastic.pyx":574
 *         for solution in solutions:
 *             schedule = SingleSiteSimpleSchedule()
 *             self.single_site_simple.CreateSchedule(solution, schedule)             # <<<<<<<<<<<<<<
 *             self.schedules.append(self.__make_pyschedule(schedule))
 * 
 */
    __pyx_v_self->single_site_simple.CreateSchedule(__pyx_v_solution, __pyx_v_schedule);

    /* "biopharma_scheduling/single_site/stochastic.pyx":575
 *             schedule = SingleSiteSimpleSchedule()
 *             self.single_site_simple.CreateSchedule(solution, schedule)
 *             self.schedules.append(self.__make_pyschedule(schedule))             # <<<<<<<<<<<<<<
 * 
 *         if self.verbose:
 */
    __pyx_t_4 = ((struct __pyx_vtabstruct_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *)__pyx_v_self->__pyx_vtab)->__pyx___make_pyschedule(__pyx_v_self, __pyx_v_schedule); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 575, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_16 = __Pyx_PyObject_Append(__pyx_v_self->schedules, __pyx_t_4); if (unlikely(__pyx_t_16 == -1)) __PYX_ERR(0, 575, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":572
 *         self.schedules = []
 *         solutions = nsgaii.TopFront(solutions)
 *         for solution in solutions:             # <<<<<<<<<<<<<<
 *             schedule = SingleSiteSimpleSchedule()
 *             self.single_site_simple.CreateSchedule(solution, schedule)
 */
  }

  /* "biopharma_scheduling/single_site/stochastic.pyx":577
 *             self.schedules.append(self.__make_pyschedule(schedule))
 * 
 *         if self.verbose:             # <<<<<<<<<<<<<<
 *             pbar.set_description('Done')
 *             pbar.close()
 */
  __pyx_t_1 = (__pyx_v_self->verbose != 0);
  if (__pyx_t_1) {

    /* "biopharma_scheduling/single_site/stochastic.pyx":578
 * 
 *         if self.verbose:
 *             pbar.set_description('Done')             # <<<<<<<<<<<<<<
 *             pbar.close()
 * 
 */
    if (unlikely(!__pyx_v_pbar)) { __Pyx_RaiseUnboundLocalError("pbar"); __PYX_ERR(0, 578, __pyx_L1_error) }
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_pbar, __pyx_n_s_set_description); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":579
 *         if self.verbose:
 *             pbar.set_description('Done')
 *             pbar.close()             # <<<<<<<<<<<<<<
 * 
 *     cdef __make_pyschedule(self, SingleSiteSimpleSchedule &schedule):
 */
    if (unlikely(!__pyx_v_pbar)) { __Pyx_RaiseUnboundLocalError("pbar"); __PYX_ERR(0, 579, __pyx_L1_error) }
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_pbar, __pyx_n_s_close); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_2) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 579, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 579, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":577
 *             self.schedules.append(self.__make_pyschedule(schedule))
 * 
 *         if self.verbose:             # <<<<<<<<<<<<<<
 *             pbar.set_description('Done')
 *             pbar.close()
 */
  }

  /* "biopharma_scheduling/single_site/stochastic.pyx":512
 *             pbar.close()
 * 
 *     def __run_nsgaii(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             SingleSiteSimpleSchedule schedule
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("biopharma_scheduling.single_site.stochastic.StochSingleSiteSimple.__run_nsgaii", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pbar);
  __Pyx_XDECREF(__pyx_v_run);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "biopharma_scheduling/single_site/stochastic.pyx":582
 * 
 *     cdef __make_pyschedule(self, SingleSiteSimpleSchedule &schedule):
 *         def get_date_of(delta):             # <<<<<<<<<<<<<<
 *             return pd.Timedelta('%d days' % delta) + pd.to_datetime(self.start_date).date()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_17__make_pyschedule_1get_date_of(PyObject *__pyx_self, PyObject *__pyx_v_delta); /*proto*/
static PyMethodDef __pyx_mdef_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_17__make_pyschedule_1get_date_of = {"get_date_of", (PyCFunction)__pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_17__make_pyschedule_1get_date_of, METH_O, 0};
static PyObject *__pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_17__make_pyschedule_1get_date_of(PyObject *__pyx_self, PyObject *__pyx_v_delta) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_date_of (wrapper)", 0);
  __pyx_r = __pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_17__make_pyschedule_get_date_of(__pyx_self, ((PyObject *)__pyx_v_delta));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_17__make_pyschedule_get_date_of(PyObject *__pyx_self, PyObject *__pyx_v_delta) {
  struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule *__pyx_cur_scope;
  struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("get_date_of", 0);
  __pyx_outer_scope = (struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "biopharma_scheduling/single_site/stochastic.pyx":583
 *     cdef __make_pyschedule(self, SingleSiteSimpleSchedule &schedule):
 *         def get_date_of(delta):
 *             return pd.Timedelta('%d days' % delta) + pd.to_datetime(self.start_date).date()             # <<<<<<<<<<<<<<
 * 
 *         campaigns_table = []
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Timedelta); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_d_days, __pyx_v_delta); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 583, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 583, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 583, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 583, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 583, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_to_datetime); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_cur_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 583, __pyx_L1_error) }
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_cur_scope->__pyx_v_self->start_date); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 583, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_cur_scope->__pyx_v_self->start_date};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 583, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_cur_scope->__pyx_v_self->start_date};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 583, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 583, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self->start_date);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self->start_date);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_cur_scope->__pyx_v_self->start_date);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 583, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_date); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 583, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 583, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":582
 * 
 *     cdef __make_pyschedule(self, SingleSiteSimpleSchedule &schedule):
 *         def get_date_of(delta):             # <<<<<<<<<<<<<<
 *             return pd.Timedelta('%d days' % delta) + pd.to_datetime(self.start_date).date()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("biopharma_scheduling.single_site.stochastic.StochSingleSiteSimple.__make_pyschedule.get_date_of", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "biopharma_scheduling/single_site/stochastic.pyx":581
 *             pbar.close()
 * 
 *     cdef __make_pyschedule(self, SingleSiteSimpleSchedule &schedule):             # <<<<<<<<<<<<<<
 *         def get_date_of(delta):
 *             return pd.Timedelta('%d days' % delta) + pd.to_datetime(self.start_date).date()
 */

static PyObject *__pyx_f_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple___make_pyschedule(struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *__pyx_v_self, struct types::SingleSiteSimpleSchedule &__pyx_v_schedule) {
  struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule *__pyx_cur_scope;
  PyObject *__pyx_v_get_date_of = 0;
  PyObject *__pyx_v_campaigns_table = NULL;
  PyObject *__pyx_v_batches_table = NULL;
  PyObject *__pyx_v_tasks_table = NULL;
  struct types::Campaign __pyx_v_campaign;
  struct types::Batch __pyx_v_batch;
  PyObject *__pyx_v_kg_inventory = NULL;
  PyObject *__pyx_v_kg_backlog = NULL;
  PyObject *__pyx_v_kg_supply = NULL;
  PyObject *__pyx_v_kg_waste = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_due_date = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<struct types::Campaign> ::iterator __pyx_t_2;
  std::vector<struct types::Campaign>  *__pyx_t_3;
  struct types::Campaign __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  long __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  std::vector<struct types::Batch> ::iterator __pyx_t_16;
  std::vector<struct types::Batch>  *__pyx_t_17;
  struct types::Batch __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  PyObject *(*__pyx_t_20)(PyObject *);
  Py_ssize_t __pyx_t_21;
  PyObject *(*__pyx_t_22)(PyObject *);
  std::vector<std::vector<double> > ::size_type __pyx_t_23;
  std::vector<double> ::size_type __pyx_t_24;
  __Pyx_RefNannySetupContext("__make_pyschedule", 0);
  __pyx_cur_scope = (struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule *)__pyx_tp_new_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule(__pyx_ptype_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 581, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "biopharma_scheduling/single_site/stochastic.pyx":582
 * 
 *     cdef __make_pyschedule(self, SingleSiteSimpleSchedule &schedule):
 *         def get_date_of(delta):             # <<<<<<<<<<<<<<
 *             return pd.Timedelta('%d days' % delta) + pd.to_datetime(self.start_date).date()
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_17__make_pyschedule_1get_date_of, 0, __pyx_n_s_StochSingleSiteSimple___make_pys, ((PyObject*)__pyx_cur_scope), __pyx_n_s_biopharma_scheduling_single_site_2, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_get_date_of = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":585
 *             return pd.Timedelta('%d days' % delta) + pd.to_datetime(self.start_date).date()
 * 
 *         campaigns_table = []             # <<<<<<<<<<<<<<
 *         batches_table = []
 *         tasks_table = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_campaigns_table = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":586
 * 
 *         campaigns_table = []
 *         batches_table = []             # <<<<<<<<<<<<<<
 *         tasks_table = []
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_batches_table = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":587
 *         campaigns_table = []
 *         batches_table = []
 *         tasks_table = []             # <<<<<<<<<<<<<<
 * 
 *         for campaign in schedule.campaigns:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tasks_table = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":589
 *         tasks_table = []
 * 
 *         for campaign in schedule.campaigns:             # <<<<<<<<<<<<<<
 *             campaigns_table.append(OrderedDict([
 *                 ('Product', self.product_labels[campaign.product_num - 1]),
 */
  __pyx_t_3 = &__pyx_v_schedule.campaigns;
  __pyx_t_2 = __pyx_t_3->begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_t_3->end())) break;
    __pyx_t_4 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_campaign = __pyx_t_4;

    /* "biopharma_scheduling/single_site/stochastic.pyx":590
 * 
 *         for campaign in schedule.campaigns:
 *             campaigns_table.append(OrderedDict([             # <<<<<<<<<<<<<<
 *                 ('Product', self.product_labels[campaign.product_num - 1]),
 *                 ('Batches', campaign.num_batches),
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 590, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "biopharma_scheduling/single_site/stochastic.pyx":591
 *         for campaign in schedule.campaigns:
 *             campaigns_table.append(OrderedDict([
 *                 ('Product', self.product_labels[campaign.product_num - 1]),             # <<<<<<<<<<<<<<
 *                 ('Batches', campaign.num_batches),
 *                 ('Kg', campaign.kg),
 */
    __pyx_t_6 = (__pyx_v_campaign.product_num - 1);
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_self->product_labels, __pyx_t_6, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_n_s_Product);
    __Pyx_GIVEREF(__pyx_n_s_Product);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_Product);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":592
 *             campaigns_table.append(OrderedDict([
 *                 ('Product', self.product_labels[campaign.product_num - 1]),
 *                 ('Batches', campaign.num_batches),             # <<<<<<<<<<<<<<
 *                 ('Kg', campaign.kg),
 *                 ('Start', get_date_of(campaign.start)),
 */
    __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_campaign.num_batches); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 592, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 592, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_n_s_Batches);
    __Pyx_GIVEREF(__pyx_n_s_Batches);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_n_s_Batches);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":593
 *                 ('Product', self.product_labels[campaign.product_num - 1]),
 *                 ('Batches', campaign.num_batches),
 *                 ('Kg', campaign.kg),             # <<<<<<<<<<<<<<
 *                 ('Start', get_date_of(campaign.start)),
 *                 ('First Harvest', get_date_of(campaign.first_harvest)),
 */
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_campaign.kg); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 593, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 593, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_INCREF(__pyx_n_s_Kg);
    __Pyx_GIVEREF(__pyx_n_s_Kg);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_n_s_Kg);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":594
 *                 ('Batches', campaign.num_batches),
 *                 ('Kg', campaign.kg),
 *                 ('Start', get_date_of(campaign.start)),             # <<<<<<<<<<<<<<
 *                 ('First Harvest', get_date_of(campaign.first_harvest)),
 *                 ('First Batch', get_date_of(campaign.first_batch)),
 */
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_campaign.start); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_11 = __pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_17__make_pyschedule_get_date_of(__pyx_v_get_date_of, __pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_n_s_Start);
    __Pyx_GIVEREF(__pyx_n_s_Start);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_Start);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_11);
    __pyx_t_11 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":595
 *                 ('Kg', campaign.kg),
 *                 ('Start', get_date_of(campaign.start)),
 *                 ('First Harvest', get_date_of(campaign.first_harvest)),             # <<<<<<<<<<<<<<
 *                 ('First Batch', get_date_of(campaign.first_batch)),
 *                 ('Last Batch', get_date_of(campaign.last_batch))
 */
    __pyx_t_11 = PyFloat_FromDouble(__pyx_v_campaign.first_harvest); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 595, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_12 = __pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_17__make_pyschedule_get_date_of(__pyx_v_get_date_of, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 595, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 595, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_INCREF(__pyx_kp_s_First_Harvest);
    __Pyx_GIVEREF(__pyx_kp_s_First_Harvest);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_kp_s_First_Harvest);
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_12);
    __pyx_t_12 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":596
 *                 ('Start', get_date_of(campaign.start)),
 *                 ('First Harvest', get_date_of(campaign.first_harvest)),
 *                 ('First Batch', get_date_of(campaign.first_batch)),             # <<<<<<<<<<<<<<
 *                 ('Last Batch', get_date_of(campaign.last_batch))
 *             ]))
 */
    __pyx_t_12 = PyFloat_FromDouble(__pyx_v_campaign.first_batch); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_13 = __pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_17__make_pyschedule_get_date_of(__pyx_v_get_date_of, __pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_INCREF(__pyx_kp_s_First_Batch);
    __Pyx_GIVEREF(__pyx_kp_s_First_Batch);
    PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_kp_s_First_Batch);
    __Pyx_GIVEREF(__pyx_t_13);
    PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_13);
    __pyx_t_13 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":597
 *                 ('First Harvest', get_date_of(campaign.first_harvest)),
 *                 ('First Batch', get_date_of(campaign.first_batch)),
 *                 ('Last Batch', get_date_of(campaign.last_batch))             # <<<<<<<<<<<<<<
 *             ]))
 * 
 */
    __pyx_t_13 = PyFloat_FromDouble(__pyx_v_campaign.last_batch); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_14 = __pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_17__make_pyschedule_get_date_of(__pyx_v_get_date_of, __pyx_t_13); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_13 = PyTuple_New(2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_INCREF(__pyx_kp_s_Last_Batch);
    __Pyx_GIVEREF(__pyx_kp_s_Last_Batch);
    PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_kp_s_Last_Batch);
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_14);
    __pyx_t_14 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":590
 * 
 *         for campaign in schedule.campaigns:
 *             campaigns_table.append(OrderedDict([             # <<<<<<<<<<<<<<
 *                 ('Product', self.product_labels[campaign.product_num - 1]),
 *                 ('Batches', campaign.num_batches),
 */
    __pyx_t_14 = PyList_New(7); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 590, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_8);
    PyList_SET_ITEM(__pyx_t_14, 0, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    PyList_SET_ITEM(__pyx_t_14, 1, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_10);
    PyList_SET_ITEM(__pyx_t_14, 2, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_7);
    PyList_SET_ITEM(__pyx_t_14, 3, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_11);
    PyList_SET_ITEM(__pyx_t_14, 4, __pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_12);
    PyList_SET_ITEM(__pyx_t_14, 5, __pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_13);
    PyList_SET_ITEM(__pyx_t_14, 6, __pyx_t_13);
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_t_10 = 0;
    __pyx_t_7 = 0;
    __pyx_t_11 = 0;
    __pyx_t_12 = 0;
    __pyx_t_13 = 0;
    __pyx_t_13 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_13)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_13) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_14); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 590, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_13, __pyx_t_14};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 590, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_13, __pyx_t_14};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 590, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      } else
      #endif
      {
        __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 590, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_13); __pyx_t_13 = NULL;
        __Pyx_GIVEREF(__pyx_t_14);
        PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_t_14);
        __pyx_t_14 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 590, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_campaigns_table, __pyx_t_1); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 590, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":600
 *             ]))
 * 
 *             for batch in campaign.batches:             # <<<<<<<<<<<<<<
 *                 batches_table.append(OrderedDict([
 *                     ('Product', self.product_labels[batch.product_num - 1]),
 */
    __pyx_t_17 = &__pyx_v_campaign.batches;
    __pyx_t_16 = __pyx_t_17->begin();
    for (;;) {
      if (!(__pyx_t_16 != __pyx_t_17->end())) break;
      __pyx_t_18 = *__pyx_t_16;
      ++__pyx_t_16;
      __pyx_v_batch = __pyx_t_18;

      /* "biopharma_scheduling/single_site/stochastic.pyx":601
 * 
 *             for batch in campaign.batches:
 *                 batches_table.append(OrderedDict([             # <<<<<<<<<<<<<<
 *                     ('Product', self.product_labels[batch.product_num - 1]),
 *                     ('Kg', batch.kg),
 */
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 601, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);

      /* "biopharma_scheduling/single_site/stochastic.pyx":602
 *             for batch in campaign.batches:
 *                 batches_table.append(OrderedDict([
 *                     ('Product', self.product_labels[batch.product_num - 1]),             # <<<<<<<<<<<<<<
 *                     ('Kg', batch.kg),
 *                     ('Start', get_date_of(batch.start)),
 */
      __pyx_t_6 = (__pyx_v_batch.product_num - 1);
      __pyx_t_12 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_self->product_labels, __pyx_t_6, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 602, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 602, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_INCREF(__pyx_n_s_Product);
      __Pyx_GIVEREF(__pyx_n_s_Product);
      PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_n_s_Product);
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_12);
      __pyx_t_12 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":603
 *                 batches_table.append(OrderedDict([
 *                     ('Product', self.product_labels[batch.product_num - 1]),
 *                     ('Kg', batch.kg),             # <<<<<<<<<<<<<<
 *                     ('Start', get_date_of(batch.start)),
 *                     ('Harvested on', get_date_of(batch.harvested_at)),
 */
      __pyx_t_12 = PyFloat_FromDouble(__pyx_v_batch.kg); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 603, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = PyTuple_New(2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 603, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_INCREF(__pyx_n_s_Kg);
      __Pyx_GIVEREF(__pyx_n_s_Kg);
      PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_n_s_Kg);
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_12);
      __pyx_t_12 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":604
 *                     ('Product', self.product_labels[batch.product_num - 1]),
 *                     ('Kg', batch.kg),
 *                     ('Start', get_date_of(batch.start)),             # <<<<<<<<<<<<<<
 *                     ('Harvested on', get_date_of(batch.harvested_at)),
 *                     ('Stored on', get_date_of(batch.stored_at)),
 */
      __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_batch.start); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 604, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_11 = __pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_17__make_pyschedule_get_date_of(__pyx_v_get_date_of, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 604, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 604, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_INCREF(__pyx_n_s_Start);
      __Pyx_GIVEREF(__pyx_n_s_Start);
      PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_n_s_Start);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_11);
      __pyx_t_11 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":605
 *                     ('Kg', batch.kg),
 *                     ('Start', get_date_of(batch.start)),
 *                     ('Harvested on', get_date_of(batch.harvested_at)),             # <<<<<<<<<<<<<<
 *                     ('Stored on', get_date_of(batch.stored_at)),
 *                     ('Expires on', get_date_of(batch.expires_at)),
 */
      __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_batch.harvested_at); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 605, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_7 = __pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_17__make_pyschedule_get_date_of(__pyx_v_get_date_of, __pyx_t_11); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 605, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 605, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_INCREF(__pyx_kp_s_Harvested_on);
      __Pyx_GIVEREF(__pyx_kp_s_Harvested_on);
      PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_kp_s_Harvested_on);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":606
 *                     ('Start', get_date_of(batch.start)),
 *                     ('Harvested on', get_date_of(batch.harvested_at)),
 *                     ('Stored on', get_date_of(batch.stored_at)),             # <<<<<<<<<<<<<<
 *                     ('Expires on', get_date_of(batch.expires_at)),
 *                     ('Approved on', get_date_of(batch.approved_at))
 */
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_batch.stored_at); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 606, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_10 = __pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_17__make_pyschedule_get_date_of(__pyx_v_get_date_of, __pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 606, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 606, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_kp_s_Stored_on);
      __Pyx_GIVEREF(__pyx_kp_s_Stored_on);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_s_Stored_on);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_10);
      __pyx_t_10 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":607
 *                     ('Harvested on', get_date_of(batch.harvested_at)),
 *                     ('Stored on', get_date_of(batch.stored_at)),
 *                     ('Expires on', get_date_of(batch.expires_at)),             # <<<<<<<<<<<<<<
 *                     ('Approved on', get_date_of(batch.approved_at))
 *                 ]))
 */
      __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_batch.expires_at); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 607, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = __pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_17__make_pyschedule_get_date_of(__pyx_v_get_date_of, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 607, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 607, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_kp_s_Expires_on);
      __Pyx_GIVEREF(__pyx_kp_s_Expires_on);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_kp_s_Expires_on);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":608
 *                     ('Stored on', get_date_of(batch.stored_at)),
 *                     ('Expires on', get_date_of(batch.expires_at)),
 *                     ('Approved on', get_date_of(batch.approved_at))             # <<<<<<<<<<<<<<
 *                 ]))
 * 
 */
      __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_batch.approved_at); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 608, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_8 = __pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_17__make_pyschedule_get_date_of(__pyx_v_get_date_of, __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 608, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 608, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_kp_s_Approved_on);
      __Pyx_GIVEREF(__pyx_kp_s_Approved_on);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_kp_s_Approved_on);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":601
 * 
 *             for batch in campaign.batches:
 *                 batches_table.append(OrderedDict([             # <<<<<<<<<<<<<<
 *                     ('Product', self.product_labels[batch.product_num - 1]),
 *                     ('Kg', batch.kg),
 */
      __pyx_t_8 = PyList_New(7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 601, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_14);
      PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_13);
      PyList_SET_ITEM(__pyx_t_8, 1, __pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_12);
      PyList_SET_ITEM(__pyx_t_8, 2, __pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_11);
      PyList_SET_ITEM(__pyx_t_8, 3, __pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_7);
      PyList_SET_ITEM(__pyx_t_8, 4, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_10);
      PyList_SET_ITEM(__pyx_t_8, 5, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_9);
      PyList_SET_ITEM(__pyx_t_8, 6, __pyx_t_9);
      __pyx_t_14 = 0;
      __pyx_t_13 = 0;
      __pyx_t_12 = 0;
      __pyx_t_11 = 0;
      __pyx_t_7 = 0;
      __pyx_t_10 = 0;
      __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_9) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 601, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_8};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 601, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_8};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 601, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        } else
        #endif
        {
          __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 601, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_8);
          __pyx_t_8 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 601, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_batches_table, __pyx_t_1); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 601, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":611
 *                 ]))
 * 
 *                 tasks_table.append(OrderedDict([             # <<<<<<<<<<<<<<
 *                     ('Product', self.product_labels[campaign.product_num - 1]),
 *                     ('Task', 'Inoculation'),
 */
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 611, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);

      /* "biopharma_scheduling/single_site/stochastic.pyx":612
 * 
 *                 tasks_table.append(OrderedDict([
 *                     ('Product', self.product_labels[campaign.product_num - 1]),             # <<<<<<<<<<<<<<
 *                     ('Task', 'Inoculation'),
 *                     ('Start', batches_table[-1]['Start']),
 */
      __pyx_t_6 = (__pyx_v_campaign.product_num - 1);
      __pyx_t_10 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_self->product_labels, __pyx_t_6, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 612, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 612, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_n_s_Product);
      __Pyx_GIVEREF(__pyx_n_s_Product);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_Product);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_10);
      __pyx_t_10 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":614
 *                     ('Product', self.product_labels[campaign.product_num - 1]),
 *                     ('Task', 'Inoculation'),
 *                     ('Start', batches_table[-1]['Start']),             # <<<<<<<<<<<<<<
 *                     (
 *                         'Finish',
 */
      __pyx_t_10 = __Pyx_GetItemInt_List(__pyx_v_batches_table, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 614, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = PyObject_GetItem(__pyx_t_10, __pyx_n_s_Start); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 614, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 614, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_n_s_Start);
      __Pyx_GIVEREF(__pyx_n_s_Start);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_n_s_Start);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":617
 *                     (
 *                         'Finish',
 *                         batches_table[-1]['Start'] + pd.Timedelta(             # <<<<<<<<<<<<<<
 *                             '%d days' %
 *                             self.input_data.inoculation_days[batch.product_num - 1]
 */
      __pyx_t_9 = __Pyx_GetItemInt_List(__pyx_v_batches_table, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 617, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = PyObject_GetItem(__pyx_t_9, __pyx_n_s_Start); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 617, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_pd); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 617, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_Timedelta); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 617, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":619
 *                         batches_table[-1]['Start'] + pd.Timedelta(
 *                             '%d days' %
 *                             self.input_data.inoculation_days[batch.product_num - 1]             # <<<<<<<<<<<<<<
 *                         )
 *                     )
 */
      __pyx_t_11 = __Pyx_PyInt_From_int((__pyx_cur_scope->__pyx_v_self->input_data.inoculation_days[(__pyx_v_batch.product_num - 1)])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 619, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);

      /* "biopharma_scheduling/single_site/stochastic.pyx":618
 *                         'Finish',
 *                         batches_table[-1]['Start'] + pd.Timedelta(
 *                             '%d days' %             # <<<<<<<<<<<<<<
 *                             self.input_data.inoculation_days[batch.product_num - 1]
 *                         )
 */
      __pyx_t_13 = __Pyx_PyString_Format(__pyx_kp_s_d_days, __pyx_t_11); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 618, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_12);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_12, function);
        }
      }
      if (!__pyx_t_11) {
        __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 617, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_GOTREF(__pyx_t_9);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_12)) {
          PyObject *__pyx_temp[2] = {__pyx_t_11, __pyx_t_13};
          __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_12, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 617, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_12)) {
          PyObject *__pyx_temp[2] = {__pyx_t_11, __pyx_t_13};
          __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_12, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 617, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        } else
        #endif
        {
          __pyx_t_14 = PyTuple_New(1+1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 617, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_11); __pyx_t_11 = NULL;
          __Pyx_GIVEREF(__pyx_t_13);
          PyTuple_SET_ITEM(__pyx_t_14, 0+1, __pyx_t_13);
          __pyx_t_13 = 0;
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_14, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 617, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":617
 *                     (
 *                         'Finish',
 *                         batches_table[-1]['Start'] + pd.Timedelta(             # <<<<<<<<<<<<<<
 *                             '%d days' %
 *                             self.input_data.inoculation_days[batch.product_num - 1]
 */
      __pyx_t_12 = PyNumber_Add(__pyx_t_7, __pyx_t_9); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 617, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":616
 *                     ('Start', batches_table[-1]['Start']),
 *                     (
 *                         'Finish',             # <<<<<<<<<<<<<<
 *                         batches_table[-1]['Start'] + pd.Timedelta(
 *                             '%d days' %
 */
      __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 616, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_n_s_Finish);
      __Pyx_GIVEREF(__pyx_n_s_Finish);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_n_s_Finish);
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_12);
      __pyx_t_12 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":611
 *                 ]))
 * 
 *                 tasks_table.append(OrderedDict([             # <<<<<<<<<<<<<<
 *                     ('Product', self.product_labels[campaign.product_num - 1]),
 *                     ('Task', 'Inoculation'),
 */
      __pyx_t_12 = PyList_New(4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 611, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_8);
      PyList_SET_ITEM(__pyx_t_12, 0, __pyx_t_8);
      __Pyx_INCREF(__pyx_tuple__38);
      __Pyx_GIVEREF(__pyx_tuple__38);
      PyList_SET_ITEM(__pyx_t_12, 1, __pyx_tuple__38);
      __Pyx_GIVEREF(__pyx_t_10);
      PyList_SET_ITEM(__pyx_t_12, 2, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_9);
      PyList_SET_ITEM(__pyx_t_12, 3, __pyx_t_9);
      __pyx_t_8 = 0;
      __pyx_t_10 = 0;
      __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_9) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 611, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_12};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 611, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_12};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 611, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        } else
        #endif
        {
          __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 611, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
          __Pyx_GIVEREF(__pyx_t_12);
          PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_12);
          __pyx_t_12 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 611, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_tasks_table, __pyx_t_1); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 611, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":623
 *                     )
 *                 ]))
 *                 tasks_table.append(OrderedDict([             # <<<<<<<<<<<<<<
 *                     ('Product', self.product_labels[campaign.product_num - 1]),
 *                     ('Task', 'Seed'),
 */
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 623, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);

      /* "biopharma_scheduling/single_site/stochastic.pyx":624
 *                 ]))
 *                 tasks_table.append(OrderedDict([
 *                     ('Product', self.product_labels[campaign.product_num - 1]),             # <<<<<<<<<<<<<<
 *                     ('Task', 'Seed'),
 *                     ('Start', tasks_table[-1]['Finish']),
 */
      __pyx_t_6 = (__pyx_v_campaign.product_num - 1);
      __pyx_t_10 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_self->product_labels, __pyx_t_6, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 624, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 624, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_INCREF(__pyx_n_s_Product);
      __Pyx_GIVEREF(__pyx_n_s_Product);
      PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_n_s_Product);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_10);
      __pyx_t_10 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":626
 *                     ('Product', self.product_labels[campaign.product_num - 1]),
 *                     ('Task', 'Seed'),
 *                     ('Start', tasks_table[-1]['Finish']),             # <<<<<<<<<<<<<<
 *                     (
 *                         'Finish',
 */
      __pyx_t_10 = __Pyx_GetItemInt_List(__pyx_v_tasks_table, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 626, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = PyObject_GetItem(__pyx_t_10, __pyx_n_s_Finish); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 626, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 626, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_n_s_Start);
      __Pyx_GIVEREF(__pyx_n_s_Start);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_n_s_Start);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":629
 *                     (
 *                         'Finish',
 *                         tasks_table[-1]['Finish'] + pd.Timedelta(             # <<<<<<<<<<<<<<
 *                             '%d days' %
 *                             self.input_data.seed_days[batch.product_num - 1]
 */
      __pyx_t_9 = __Pyx_GetItemInt_List(__pyx_v_tasks_table, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 629, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_8 = PyObject_GetItem(__pyx_t_9, __pyx_n_s_Finish); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 629, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_pd); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 629, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_Timedelta); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 629, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":631
 *                         tasks_table[-1]['Finish'] + pd.Timedelta(
 *                             '%d days' %
 *                             self.input_data.seed_days[batch.product_num - 1]             # <<<<<<<<<<<<<<
 *                         )
 *                     )
 */
      __pyx_t_7 = __Pyx_PyInt_From_int((__pyx_cur_scope->__pyx_v_self->input_data.seed_days[(__pyx_v_batch.product_num - 1)])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 631, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);

      /* "biopharma_scheduling/single_site/stochastic.pyx":630
 *                         'Finish',
 *                         tasks_table[-1]['Finish'] + pd.Timedelta(
 *                             '%d days' %             # <<<<<<<<<<<<<<
 *                             self.input_data.seed_days[batch.product_num - 1]
 *                         )
 */
      __pyx_t_13 = __Pyx_PyString_Format(__pyx_kp_s_d_days, __pyx_t_7); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 630, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
        }
      }
      if (!__pyx_t_7) {
        __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_13); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 629, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_GOTREF(__pyx_t_9);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_14)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_13};
          __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 629, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_13};
          __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 629, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        } else
        #endif
        {
          __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 629, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_7); __pyx_t_7 = NULL;
          __Pyx_GIVEREF(__pyx_t_13);
          PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_13);
          __pyx_t_13 = 0;
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_11, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 629, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":629
 *                     (
 *                         'Finish',
 *                         tasks_table[-1]['Finish'] + pd.Timedelta(             # <<<<<<<<<<<<<<
 *                             '%d days' %
 *                             self.input_data.seed_days[batch.product_num - 1]
 */
      __pyx_t_14 = PyNumber_Add(__pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 629, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":628
 *                     ('Start', tasks_table[-1]['Finish']),
 *                     (
 *                         'Finish',             # <<<<<<<<<<<<<<
 *                         tasks_table[-1]['Finish'] + pd.Timedelta(
 *                             '%d days' %
 */
      __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_n_s_Finish);
      __Pyx_GIVEREF(__pyx_n_s_Finish);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_n_s_Finish);
      __Pyx_GIVEREF(__pyx_t_14);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_14);
      __pyx_t_14 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":623
 *                     )
 *                 ]))
 *                 tasks_table.append(OrderedDict([             # <<<<<<<<<<<<<<
 *                     ('Product', self.product_labels[campaign.product_num - 1]),
 *                     ('Task', 'Seed'),
 */
      __pyx_t_14 = PyList_New(4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 623, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_12);
      PyList_SET_ITEM(__pyx_t_14, 0, __pyx_t_12);
      __Pyx_INCREF(__pyx_tuple__39);
      __Pyx_GIVEREF(__pyx_tuple__39);
      PyList_SET_ITEM(__pyx_t_14, 1, __pyx_tuple__39);
      __Pyx_GIVEREF(__pyx_t_10);
      PyList_SET_ITEM(__pyx_t_14, 2, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_9);
      PyList_SET_ITEM(__pyx_t_14, 3, __pyx_t_9);
      __pyx_t_12 = 0;
      __pyx_t_10 = 0;
      __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_9) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_14); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 623, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_14};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 623, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_14};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 623, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        } else
        #endif
        {
          __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 623, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
          __Pyx_GIVEREF(__pyx_t_14);
          PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_14);
          __pyx_t_14 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 623, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_tasks_table, __pyx_t_1); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 623, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":635
 *                     )
 *                 ]))
 *                 tasks_table.append(OrderedDict([             # <<<<<<<<<<<<<<
 *                     ('Product', self.product_labels[campaign.product_num - 1]),
 *                     ('Task', 'Production'),
 */
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 635, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);

      /* "biopharma_scheduling/single_site/stochastic.pyx":636
 *                 ]))
 *                 tasks_table.append(OrderedDict([
 *                     ('Product', self.product_labels[campaign.product_num - 1]),             # <<<<<<<<<<<<<<
 *                     ('Task', 'Production'),
 *                     ('Start', tasks_table[-1]['Finish']),
 */
      __pyx_t_6 = (__pyx_v_campaign.product_num - 1);
      __pyx_t_10 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_self->product_labels, __pyx_t_6, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 636, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 636, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_INCREF(__pyx_n_s_Product);
      __Pyx_GIVEREF(__pyx_n_s_Product);
      PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_n_s_Product);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_10);
      __pyx_t_10 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":638
 *                     ('Product', self.product_labels[campaign.product_num - 1]),
 *                     ('Task', 'Production'),
 *                     ('Start', tasks_table[-1]['Finish']),             # <<<<<<<<<<<<<<
 *                     (
 *                         'Finish',
 */
      __pyx_t_10 = __Pyx_GetItemInt_List(__pyx_v_tasks_table, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 638, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = PyObject_GetItem(__pyx_t_10, __pyx_n_s_Finish); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 638, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 638, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_n_s_Start);
      __Pyx_GIVEREF(__pyx_n_s_Start);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_n_s_Start);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":641
 *                     (
 *                         'Finish',
 *                         tasks_table[-1]['Finish'] + pd.Timedelta(             # <<<<<<<<<<<<<<
 *                             '%d days' %
 *                             self.input_data.production_days[batch.product_num - 1]
 */
      __pyx_t_9 = __Pyx_GetItemInt_List(__pyx_v_tasks_table, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 641, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_12 = PyObject_GetItem(__pyx_t_9, __pyx_n_s_Finish); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 641, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_pd); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 641, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_Timedelta); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 641, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":643
 *                         tasks_table[-1]['Finish'] + pd.Timedelta(
 *                             '%d days' %
 *                             self.input_data.production_days[batch.product_num - 1]             # <<<<<<<<<<<<<<
 *                         )
 *                     )
 */
      __pyx_t_8 = __Pyx_PyInt_From_int((__pyx_cur_scope->__pyx_v_self->input_data.production_days[(__pyx_v_batch.product_num - 1)])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 643, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);

      /* "biopharma_scheduling/single_site/stochastic.pyx":642
 *                         'Finish',
 *                         tasks_table[-1]['Finish'] + pd.Timedelta(
 *                             '%d days' %             # <<<<<<<<<<<<<<
 *                             self.input_data.production_days[batch.product_num - 1]
 *                         )
 */
      __pyx_t_13 = __Pyx_PyString_Format(__pyx_kp_s_d_days, __pyx_t_8); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 642, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
        }
      }
      if (!__pyx_t_8) {
        __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_13); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 641, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_GOTREF(__pyx_t_9);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_11)) {
          PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_13};
          __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 641, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
          PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_13};
          __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 641, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        } else
        #endif
        {
          __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 641, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8); __pyx_t_8 = NULL;
          __Pyx_GIVEREF(__pyx_t_13);
          PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_13);
          __pyx_t_13 = 0;
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_7, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 641, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":641
 *                     (
 *                         'Finish',
 *                         tasks_table[-1]['Finish'] + pd.Timedelta(             # <<<<<<<<<<<<<<
 *                             '%d days' %
 *                             self.input_data.production_days[batch.product_num - 1]
 */
      __pyx_t_11 = PyNumber_Add(__pyx_t_12, __pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 641, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":640
 *                     ('Start', tasks_table[-1]['Finish']),
 *                     (
 *                         'Finish',             # <<<<<<<<<<<<<<
 *                         tasks_table[-1]['Finish'] + pd.Timedelta(
 *                             '%d days' %
 */
      __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 640, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_n_s_Finish);
      __Pyx_GIVEREF(__pyx_n_s_Finish);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_n_s_Finish);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_11);
      __pyx_t_11 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":635
 *                     )
 *                 ]))
 *                 tasks_table.append(OrderedDict([             # <<<<<<<<<<<<<<
 *                     ('Product', self.product_labels[campaign.product_num - 1]),
 *                     ('Task', 'Production'),
 */
      __pyx_t_11 = PyList_New(4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 635, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_14);
      PyList_SET_ITEM(__pyx_t_11, 0, __pyx_t_14);
      __Pyx_INCREF(__pyx_tuple__40);
      __Pyx_GIVEREF(__pyx_tuple__40);
      PyList_SET_ITEM(__pyx_t_11, 1, __pyx_tuple__40);
      __Pyx_GIVEREF(__pyx_t_10);
      PyList_SET_ITEM(__pyx_t_11, 2, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_9);
      PyList_SET_ITEM(__pyx_t_11, 3, __pyx_t_9);
      __pyx_t_14 = 0;
      __pyx_t_10 = 0;
      __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_9) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 635, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_11};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 635, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_11};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 635, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        } else
        #endif
        {
          __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 635, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
          __Pyx_GIVEREF(__pyx_t_11);
          PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_11);
          __pyx_t_11 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 635, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_tasks_table, __pyx_t_1); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 635, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":647
 *                     )
 *                 ]))
 *                 tasks_table.append(OrderedDict([             # <<<<<<<<<<<<<<
 *                     ('Product', self.product_labels[campaign.product_num - 1]),
 *                     ('Task', 'DSP'),
 */
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 647, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);

      /* "biopharma_scheduling/single_site/stochastic.pyx":648
 *                 ]))
 *                 tasks_table.append(OrderedDict([
 *                     ('Product', self.product_labels[campaign.product_num - 1]),             # <<<<<<<<<<<<<<
 *                     ('Task', 'DSP'),
 *                     ('Start', tasks_table[-1]['Finish']),
 */
      __pyx_t_6 = (__pyx_v_campaign.product_num - 1);
      __pyx_t_10 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_self->product_labels, __pyx_t_6, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 648, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 648, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_INCREF(__pyx_n_s_Product);
      __Pyx_GIVEREF(__pyx_n_s_Product);
      PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_n_s_Product);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_10);
      __pyx_t_10 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":650
 *                     ('Product', self.product_labels[campaign.product_num - 1]),
 *                     ('Task', 'DSP'),
 *                     ('Start', tasks_table[-1]['Finish']),             # <<<<<<<<<<<<<<
 *                     (
 *                         'Finish',
 */
      __pyx_t_10 = __Pyx_GetItemInt_List(__pyx_v_tasks_table, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 650, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = PyObject_GetItem(__pyx_t_10, __pyx_n_s_Finish); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 650, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 650, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_n_s_Start);
      __Pyx_GIVEREF(__pyx_n_s_Start);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_n_s_Start);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":653
 *                     (
 *                         'Finish',
 *                         tasks_table[-1]['Finish'] + pd.Timedelta(             # <<<<<<<<<<<<<<
 *                             '%d days' %
 *                             self.input_data.dsp_days[batch.product_num - 1]
 */
      __pyx_t_9 = __Pyx_GetItemInt_List(__pyx_v_tasks_table, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 653, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_14 = PyObject_GetItem(__pyx_t_9, __pyx_n_s_Finish); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 653, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_pd); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 653, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_Timedelta); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 653, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":655
 *                         tasks_table[-1]['Finish'] + pd.Timedelta(
 *                             '%d days' %
 *                             self.input_data.dsp_days[batch.product_num - 1]             # <<<<<<<<<<<<<<
 *                         )
 *                     )
 */
      __pyx_t_12 = __Pyx_PyInt_From_int((__pyx_cur_scope->__pyx_v_self->input_data.dsp_days[(__pyx_v_batch.product_num - 1)])); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 655, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);

      /* "biopharma_scheduling/single_site/stochastic.pyx":654
 *                         'Finish',
 *                         tasks_table[-1]['Finish'] + pd.Timedelta(
 *                             '%d days' %             # <<<<<<<<<<<<<<
 *                             self.input_data.dsp_days[batch.product_num - 1]
 *                         )
 */
      __pyx_t_13 = __Pyx_PyString_Format(__pyx_kp_s_d_days, __pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 654, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      if (!__pyx_t_12) {
        __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_13); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 653, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_GOTREF(__pyx_t_9);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_7)) {
          PyObject *__pyx_temp[2] = {__pyx_t_12, __pyx_t_13};
          __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 653, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
          PyObject *__pyx_temp[2] = {__pyx_t_12, __pyx_t_13};
          __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 653, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 653, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_12); __pyx_t_12 = NULL;
          __Pyx_GIVEREF(__pyx_t_13);
          PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_13);
          __pyx_t_13 = 0;
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 653, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":653
 *                     (
 *                         'Finish',
 *                         tasks_table[-1]['Finish'] + pd.Timedelta(             # <<<<<<<<<<<<<<
 *                             '%d days' %
 *                             self.input_data.dsp_days[batch.product_num - 1]
 */
      __pyx_t_7 = PyNumber_Add(__pyx_t_14, __pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 653, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":652
 *                     ('Start', tasks_table[-1]['Finish']),
 *                     (
 *                         'Finish',             # <<<<<<<<<<<<<<
 *                         tasks_table[-1]['Finish'] + pd.Timedelta(
 *                             '%d days' %
 */
      __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 652, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_n_s_Finish);
      __Pyx_GIVEREF(__pyx_n_s_Finish);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_n_s_Finish);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":647
 *                     )
 *                 ]))
 *                 tasks_table.append(OrderedDict([             # <<<<<<<<<<<<<<
 *                     ('Product', self.product_labels[campaign.product_num - 1]),
 *                     ('Task', 'DSP'),
 */
      __pyx_t_7 = PyList_New(4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 647, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_11);
      PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_11);
      __Pyx_INCREF(__pyx_tuple__41);
      __Pyx_GIVEREF(__pyx_tuple__41);
      PyList_SET_ITEM(__pyx_t_7, 1, __pyx_tuple__41);
      __Pyx_GIVEREF(__pyx_t_10);
      PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_9);
      PyList_SET_ITEM(__pyx_t_7, 3, __pyx_t_9);
      __pyx_t_11 = 0;
      __pyx_t_10 = 0;
      __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_9) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_7};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_7};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else
        #endif
        {
          __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 647, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
          __Pyx_GIVEREF(__pyx_t_7);
          PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_7);
          __pyx_t_7 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_tasks_table, __pyx_t_1); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 647, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":600
 *             ]))
 * 
 *             for batch in campaign.batches:             # <<<<<<<<<<<<<<
 *                 batches_table.append(OrderedDict([
 *                     ('Product', self.product_labels[batch.product_num - 1]),
 */
    }

    /* "biopharma_scheduling/single_site/stochastic.pyx":589
 *         tasks_table = []
 * 
 *         for campaign in schedule.campaigns:             # <<<<<<<<<<<<<<
 *             campaigns_table.append(OrderedDict([
 *                 ('Product', self.product_labels[campaign.product_num - 1]),
 */
  }

  /* "biopharma_scheduling/single_site/stochastic.pyx":660
 *                 ]))
 * 
 *         kg_inventory = []             # <<<<<<<<<<<<<<
 *         kg_backlog = []
 *         kg_supply = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_kg_inventory = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":661
 * 
 *         kg_inventory = []
 *         kg_backlog = []             # <<<<<<<<<<<<<<
 *         kg_supply = []
 *         kg_waste = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_kg_backlog = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":662
 *         kg_inventory = []
 *         kg_backlog = []
 *         kg_supply = []             # <<<<<<<<<<<<<<
 *         kg_waste = []
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_kg_supply = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":663
 *         kg_backlog = []
 *         kg_supply = []
 *         kg_waste = []             # <<<<<<<<<<<<<<
 * 
 *         for i, due_date in enumerate(self.due_dates):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_kg_waste = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":665
 *         kg_waste = []
 * 
 *         for i, due_date in enumerate(self.due_dates):             # <<<<<<<<<<<<<<
 *             kg_inventory.append({
 *                 product_label: schedule.kg_inventory[j][i]
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_1 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_self->due_dates)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_self->due_dates)) {
    __pyx_t_5 = __pyx_cur_scope->__pyx_v_self->due_dates; __Pyx_INCREF(__pyx_t_5); __pyx_t_19 = 0;
    __pyx_t_20 = NULL;
  } else {
    __pyx_t_19 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_self->due_dates); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_20 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 665, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_20)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_19 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_10 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_19); __Pyx_INCREF(__pyx_t_10); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 665, __pyx_L1_error)
        #else
        __pyx_t_10 = PySequence_ITEM(__pyx_t_5, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 665, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        #endif
      } else {
        if (__pyx_t_19 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_19); __Pyx_INCREF(__pyx_t_10); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 665, __pyx_L1_error)
        #else
        __pyx_t_10 = PySequence_ITEM(__pyx_t_5, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 665, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        #endif
      }
    } else {
      __pyx_t_10 = __pyx_t_20(__pyx_t_5);
      if (unlikely(!__pyx_t_10)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 665, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_10);
    }
    __Pyx_XDECREF_SET(__pyx_v_due_date, __pyx_t_10);
    __pyx_t_10 = 0;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_10 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_10;
    __pyx_t_10 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":666
 * 
 *         for i, due_date in enumerate(self.due_dates):
 *             kg_inventory.append({             # <<<<<<<<<<<<<<
 *                 product_label: schedule.kg_inventory[j][i]
 *                 for j, product_label in enumerate(self.product_labels)
 */
    { /* enter inner scope */
      PyObject *__pyx_7genexpr__pyx_v_j = NULL;
      PyObject *__pyx_7genexpr__pyx_v_product_label = NULL;
      __pyx_t_10 = PyDict_New(); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 666, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_int_0);
      __pyx_t_7 = __pyx_int_0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":668
 *             kg_inventory.append({
 *                 product_label: schedule.kg_inventory[j][i]
 *                 for j, product_label in enumerate(self.product_labels)             # <<<<<<<<<<<<<<
 *             })
 * 
 */
      if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_self->product_labels)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_self->product_labels)) {
        __pyx_t_9 = __pyx_cur_scope->__pyx_v_self->product_labels; __Pyx_INCREF(__pyx_t_9); __pyx_t_21 = 0;
        __pyx_t_22 = NULL;
      } else {
        __pyx_t_21 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_self->product_labels); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 668, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_22 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 668, __pyx_L11_error)
      }
      for (;;) {
        if (likely(!__pyx_t_22)) {
          if (likely(PyList_CheckExact(__pyx_t_9))) {
            if (__pyx_t_21 >= PyList_GET_SIZE(__pyx_t_9)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_11 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_21); __Pyx_INCREF(__pyx_t_11); __pyx_t_21++; if (unlikely(0 < 0)) __PYX_ERR(0, 668, __pyx_L11_error)
            #else
            __pyx_t_11 = PySequence_ITEM(__pyx_t_9, __pyx_t_21); __pyx_t_21++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 668, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_11);
            #endif
          } else {
            if (__pyx_t_21 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_21); __Pyx_INCREF(__pyx_t_11); __pyx_t_21++; if (unlikely(0 < 0)) __PYX_ERR(0, 668, __pyx_L11_error)
            #else
            __pyx_t_11 = PySequence_ITEM(__pyx_t_9, __pyx_t_21); __pyx_t_21++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 668, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_11);
            #endif
          }
        } else {
          __pyx_t_11 = __pyx_t_22(__pyx_t_9);
          if (unlikely(!__pyx_t_11)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 668, __pyx_L11_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_11);
        }
        __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_product_label, __pyx_t_11);
        __pyx_t_11 = 0;
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_j, __pyx_t_7);
        __pyx_t_11 = __Pyx_PyInt_AddObjC(__pyx_t_7, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 668, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_7);
        __pyx_t_7 = __pyx_t_11;
        __pyx_t_11 = 0;

        /* "biopharma_scheduling/single_site/stochastic.pyx":667
 *         for i, due_date in enumerate(self.due_dates):
 *             kg_inventory.append({
 *                 product_label: schedule.kg_inventory[j][i]             # <<<<<<<<<<<<<<
 *                 for j, product_label in enumerate(self.product_labels)
 *             })
 */
        __pyx_t_23 = __Pyx_PyInt_As_size_t(__pyx_7genexpr__pyx_v_j); if (unlikely((__pyx_t_23 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 667, __pyx_L11_error)
        __pyx_t_24 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_24 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 667, __pyx_L11_error)
        __pyx_t_11 = PyFloat_FromDouble(((__pyx_v_schedule.kg_inventory[__pyx_t_23])[__pyx_t_24])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 667, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (unlikely(PyDict_SetItem(__pyx_t_10, (PyObject*)__pyx_7genexpr__pyx_v_product_label, (PyObject*)__pyx_t_11))) __PYX_ERR(0, 667, __pyx_L11_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "biopharma_scheduling/single_site/stochastic.pyx":668
 *             kg_inventory.append({
 *                 product_label: schedule.kg_inventory[j][i]
 *                 for j, product_label in enumerate(self.product_labels)             # <<<<<<<<<<<<<<
 *             })
 * 
 */
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_j);
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_product_label);
      goto __pyx_L14_exit_scope;
      __pyx_L11_error:;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_j);
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_product_label);
      goto __pyx_L1_error;
      __pyx_L14_exit_scope:;
    } /* exit inner scope */

    /* "biopharma_scheduling/single_site/stochastic.pyx":666
 * 
 *         for i, due_date in enumerate(self.due_dates):
 *             kg_inventory.append({             # <<<<<<<<<<<<<<
 *                 product_label: schedule.kg_inventory[j][i]
 *                 for j, product_label in enumerate(self.product_labels)
 */
    __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_kg_inventory, __pyx_t_10); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 666, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":671
 *             })
 * 
 *             kg_backlog.append({             # <<<<<<<<<<<<<<
 *                 product_label: schedule.kg_backlog[j][i]
 *                 for j, product_label in enumerate(self.product_labels)
 */
    { /* enter inner scope */
      PyObject *__pyx_8genexpr1__pyx_v_j = NULL;
      PyObject *__pyx_8genexpr1__pyx_v_product_label = NULL;
      __pyx_t_10 = PyDict_New(); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 671, __pyx_L17_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_int_0);
      __pyx_t_7 = __pyx_int_0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":673
 *             kg_backlog.append({
 *                 product_label: schedule.kg_backlog[j][i]
 *                 for j, product_label in enumerate(self.product_labels)             # <<<<<<<<<<<<<<
 *             })
 * 
 */
      if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_self->product_labels)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_self->product_labels)) {
        __pyx_t_9 = __pyx_cur_scope->__pyx_v_self->product_labels; __Pyx_INCREF(__pyx_t_9); __pyx_t_21 = 0;
        __pyx_t_22 = NULL;
      } else {
        __pyx_t_21 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_self->product_labels); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 673, __pyx_L17_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_22 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 673, __pyx_L17_error)
      }
      for (;;) {
        if (likely(!__pyx_t_22)) {
          if (likely(PyList_CheckExact(__pyx_t_9))) {
            if (__pyx_t_21 >= PyList_GET_SIZE(__pyx_t_9)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_11 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_21); __Pyx_INCREF(__pyx_t_11); __pyx_t_21++; if (unlikely(0 < 0)) __PYX_ERR(0, 673, __pyx_L17_error)
            #else
            __pyx_t_11 = PySequence_ITEM(__pyx_t_9, __pyx_t_21); __pyx_t_21++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 673, __pyx_L17_error)
            __Pyx_GOTREF(__pyx_t_11);
            #endif
          } else {
            if (__pyx_t_21 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_21); __Pyx_INCREF(__pyx_t_11); __pyx_t_21++; if (unlikely(0 < 0)) __PYX_ERR(0, 673, __pyx_L17_error)
            #else
            __pyx_t_11 = PySequence_ITEM(__pyx_t_9, __pyx_t_21); __pyx_t_21++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 673, __pyx_L17_error)
            __Pyx_GOTREF(__pyx_t_11);
            #endif
          }
        } else {
          __pyx_t_11 = __pyx_t_22(__pyx_t_9);
          if (unlikely(!__pyx_t_11)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 673, __pyx_L17_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_11);
        }
        __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_product_label, __pyx_t_11);
        __pyx_t_11 = 0;
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_j, __pyx_t_7);
        __pyx_t_11 = __Pyx_PyInt_AddObjC(__pyx_t_7, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 673, __pyx_L17_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_7);
        __pyx_t_7 = __pyx_t_11;
        __pyx_t_11 = 0;

        /* "biopharma_scheduling/single_site/stochastic.pyx":672
 * 
 *             kg_backlog.append({
 *                 product_label: schedule.kg_backlog[j][i]             # <<<<<<<<<<<<<<
 *                 for j, product_label in enumerate(self.product_labels)
 *             })
 */
        __pyx_t_23 = __Pyx_PyInt_As_size_t(__pyx_8genexpr1__pyx_v_j); if (unlikely((__pyx_t_23 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 672, __pyx_L17_error)
        __pyx_t_24 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_24 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 672, __pyx_L17_error)
        __pyx_t_11 = PyFloat_FromDouble(((__pyx_v_schedule.kg_backlog[__pyx_t_23])[__pyx_t_24])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 672, __pyx_L17_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (unlikely(PyDict_SetItem(__pyx_t_10, (PyObject*)__pyx_8genexpr1__pyx_v_product_label, (PyObject*)__pyx_t_11))) __PYX_ERR(0, 672, __pyx_L17_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "biopharma_scheduling/single_site/stochastic.pyx":673
 *             kg_backlog.append({
 *                 product_label: schedule.kg_backlog[j][i]
 *                 for j, product_label in enumerate(self.product_labels)             # <<<<<<<<<<<<<<
 *             })
 * 
 */
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_j);
      __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_product_label);
      goto __pyx_L20_exit_scope;
      __pyx_L17_error:;
      __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_j);
      __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_product_label);
      goto __pyx_L1_error;
      __pyx_L20_exit_scope:;
    } /* exit inner scope */

    /* "biopharma_scheduling/single_site/stochastic.pyx":671
 *             })
 * 
 *             kg_backlog.append({             # <<<<<<<<<<<<<<
 *                 product_label: schedule.kg_backlog[j][i]
 *                 for j, product_label in enumerate(self.product_labels)
 */
    __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_kg_backlog, __pyx_t_10); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 671, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":676
 *             })
 * 
 *             kg_supply.append({             # <<<<<<<<<<<<<<
 *                 product_label: schedule.kg_supply[j][i]
 *                 for j, product_label in enumerate(self.product_labels)
 */
    { /* enter inner scope */
      PyObject *__pyx_8genexpr2__pyx_v_j = NULL;
      PyObject *__pyx_8genexpr2__pyx_v_product_label = NULL;
      __pyx_t_10 = PyDict_New(); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 676, __pyx_L23_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_int_0);
      __pyx_t_7 = __pyx_int_0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":678
 *             kg_supply.append({
 *                 product_label: schedule.kg_supply[j][i]
 *                 for j, product_label in enumerate(self.product_labels)             # <<<<<<<<<<<<<<
 *             })
 * 
 */
      if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_self->product_labels)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_self->product_labels)) {
        __pyx_t_9 = __pyx_cur_scope->__pyx_v_self->product_labels; __Pyx_INCREF(__pyx_t_9); __pyx_t_21 = 0;
        __pyx_t_22 = NULL;
      } else {
        __pyx_t_21 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_self->product_labels); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 678, __pyx_L23_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_22 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 678, __pyx_L23_error)
      }
      for (;;) {
        if (likely(!__pyx_t_22)) {
          if (likely(PyList_CheckExact(__pyx_t_9))) {
            if (__pyx_t_21 >= PyList_GET_SIZE(__pyx_t_9)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_11 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_21); __Pyx_INCREF(__pyx_t_11); __pyx_t_21++; if (unlikely(0 < 0)) __PYX_ERR(0, 678, __pyx_L23_error)
            #else
            __pyx_t_11 = PySequence_ITEM(__pyx_t_9, __pyx_t_21); __pyx_t_21++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 678, __pyx_L23_error)
            __Pyx_GOTREF(__pyx_t_11);
            #endif
          } else {
            if (__pyx_t_21 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_21); __Pyx_INCREF(__pyx_t_11); __pyx_t_21++; if (unlikely(0 < 0)) __PYX_ERR(0, 678, __pyx_L23_error)
            #else
            __pyx_t_11 = PySequence_ITEM(__pyx_t_9, __pyx_t_21); __pyx_t_21++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 678, __pyx_L23_error)
            __Pyx_GOTREF(__pyx_t_11);
            #endif
          }
        } else {
          __pyx_t_11 = __pyx_t_22(__pyx_t_9);
          if (unlikely(!__pyx_t_11)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 678, __pyx_L23_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_11);
        }
        __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_product_label, __pyx_t_11);
        __pyx_t_11 = 0;
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_j, __pyx_t_7);
        __pyx_t_11 = __Pyx_PyInt_AddObjC(__pyx_t_7, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 678, __pyx_L23_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_7);
        __pyx_t_7 = __pyx_t_11;
        __pyx_t_11 = 0;

        /* "biopharma_scheduling/single_site/stochastic.pyx":677
 * 
 *             kg_supply.append({
 *                 product_label: schedule.kg_supply[j][i]             # <<<<<<<<<<<<<<
 *                 for j, product_label in enumerate(self.product_labels)
 *             })
 */
        __pyx_t_23 = __Pyx_PyInt_As_size_t(__pyx_8genexpr2__pyx_v_j); if (unlikely((__pyx_t_23 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 677, __pyx_L23_error)
        __pyx_t_24 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_24 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 677, __pyx_L23_error)
        __pyx_t_11 = PyFloat_FromDouble(((__pyx_v_schedule.kg_supply[__pyx_t_23])[__pyx_t_24])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 677, __pyx_L23_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (unlikely(PyDict_SetItem(__pyx_t_10, (PyObject*)__pyx_8genexpr2__pyx_v_product_label, (PyObject*)__pyx_t_11))) __PYX_ERR(0, 677, __pyx_L23_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "biopharma_scheduling/single_site/stochastic.pyx":678
 *             kg_supply.append({
 *                 product_label: schedule.kg_supply[j][i]
 *                 for j, product_label in enumerate(self.product_labels)             # <<<<<<<<<<<<<<
 *             })
 * 
 */
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_j);
      __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_product_label);
      goto __pyx_L26_exit_scope;
      __pyx_L23_error:;
      __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_j);
      __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_product_label);
      goto __pyx_L1_error;
      __pyx_L26_exit_scope:;
    } /* exit inner scope */

    /* "biopharma_scheduling/single_site/stochastic.pyx":676
 *             })
 * 
 *             kg_supply.append({             # <<<<<<<<<<<<<<
 *                 product_label: schedule.kg_supply[j][i]
 *                 for j, product_label in enumerate(self.product_labels)
 */
    __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_kg_supply, __pyx_t_10); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 676, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":681
 *             })
 * 
 *             kg_waste.append({             # <<<<<<<<<<<<<<
 *                 product_label: schedule.kg_waste[j][i]
 *                 for j, product_label in enumerate(self.product_labels)
 */
    { /* enter inner scope */
      PyObject *__pyx_8genexpr3__pyx_v_j = NULL;
      PyObject *__pyx_8genexpr3__pyx_v_product_label = NULL;
      __pyx_t_10 = PyDict_New(); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 681, __pyx_L29_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_int_0);
      __pyx_t_7 = __pyx_int_0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":683
 *             kg_waste.append({
 *                 product_label: schedule.kg_waste[j][i]
 *                 for j, product_label in enumerate(self.product_labels)             # <<<<<<<<<<<<<<
 *             })
 * 
 */
      if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_self->product_labels)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_self->product_labels)) {
        __pyx_t_9 = __pyx_cur_scope->__pyx_v_self->product_labels; __Pyx_INCREF(__pyx_t_9); __pyx_t_21 = 0;
        __pyx_t_22 = NULL;
      } else {
        __pyx_t_21 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_self->product_labels); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 683, __pyx_L29_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_22 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 683, __pyx_L29_error)
      }
      for (;;) {
        if (likely(!__pyx_t_22)) {
          if (likely(PyList_CheckExact(__pyx_t_9))) {
            if (__pyx_t_21 >= PyList_GET_SIZE(__pyx_t_9)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_11 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_21); __Pyx_INCREF(__pyx_t_11); __pyx_t_21++; if (unlikely(0 < 0)) __PYX_ERR(0, 683, __pyx_L29_error)
            #else
            __pyx_t_11 = PySequence_ITEM(__pyx_t_9, __pyx_t_21); __pyx_t_21++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 683, __pyx_L29_error)
            __Pyx_GOTREF(__pyx_t_11);
            #endif
          } else {
            if (__pyx_t_21 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_21); __Pyx_INCREF(__pyx_t_11); __pyx_t_21++; if (unlikely(0 < 0)) __PYX_ERR(0, 683, __pyx_L29_error)
            #else
            __pyx_t_11 = PySequence_ITEM(__pyx_t_9, __pyx_t_21); __pyx_t_21++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 683, __pyx_L29_error)
            __Pyx_GOTREF(__pyx_t_11);
            #endif
          }
        } else {
          __pyx_t_11 = __pyx_t_22(__pyx_t_9);
          if (unlikely(!__pyx_t_11)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 683, __pyx_L29_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_11);
        }
        __Pyx_XDECREF_SET(__pyx_8genexpr3__pyx_v_product_label, __pyx_t_11);
        __pyx_t_11 = 0;
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_XDECREF_SET(__pyx_8genexpr3__pyx_v_j, __pyx_t_7);
        __pyx_t_11 = __Pyx_PyInt_AddObjC(__pyx_t_7, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 683, __pyx_L29_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_7);
        __pyx_t_7 = __pyx_t_11;
        __pyx_t_11 = 0;

        /* "biopharma_scheduling/single_site/stochastic.pyx":682
 * 
 *             kg_waste.append({
 *                 product_label: schedule.kg_waste[j][i]             # <<<<<<<<<<<<<<
 *                 for j, product_label in enumerate(self.product_labels)
 *             })
 */
        __pyx_t_23 = __Pyx_PyInt_As_size_t(__pyx_8genexpr3__pyx_v_j); if (unlikely((__pyx_t_23 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 682, __pyx_L29_error)
        __pyx_t_24 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_24 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 682, __pyx_L29_error)
        __pyx_t_11 = PyFloat_FromDouble(((__pyx_v_schedule.kg_waste[__pyx_t_23])[__pyx_t_24])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 682, __pyx_L29_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (unlikely(PyDict_SetItem(__pyx_t_10, (PyObject*)__pyx_8genexpr3__pyx_v_product_label, (PyObject*)__pyx_t_11))) __PYX_ERR(0, 682, __pyx_L29_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "biopharma_scheduling/single_site/stochastic.pyx":683
 *             kg_waste.append({
 *                 product_label: schedule.kg_waste[j][i]
 *                 for j, product_label in enumerate(self.product_labels)             # <<<<<<<<<<<<<<
 *             })
 * 
 */
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_j);
      __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_product_label);
      goto __pyx_L32_exit_scope;
      __pyx_L29_error:;
      __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_j);
      __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_product_label);
      goto __pyx_L1_error;
      __pyx_L32_exit_scope:;
    } /* exit inner scope */

    /* "biopharma_scheduling/single_site/stochastic.pyx":681
 *             })
 * 
 *             kg_waste.append({             # <<<<<<<<<<<<<<
 *                 product_label: schedule.kg_waste[j][i]
 *                 for j, product_label in enumerate(self.product_labels)
 */
    __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_kg_waste, __pyx_t_10); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 681, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":686
 *             })
 * 
 *             kg_inventory[-1].update({'date': due_date})             # <<<<<<<<<<<<<<
 *             kg_backlog[-1].update({'date': due_date})
 *             kg_supply[-1].update({'date': due_date})
 */
    __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_kg_inventory, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 686, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 686, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 686, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_date, __pyx_v_due_date) < 0) __PYX_ERR(0, 686, __pyx_L1_error)
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (!__pyx_t_11) {
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 686, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_10);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[2] = {__pyx_t_11, __pyx_t_7};
        __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 686, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[2] = {__pyx_t_11, __pyx_t_7};
        __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 686, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_14 = PyTuple_New(1+1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 686, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_11); __pyx_t_11 = NULL;
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_14, 0+1, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_14, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 686, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":687
 * 
 *             kg_inventory[-1].update({'date': due_date})
 *             kg_backlog[-1].update({'date': due_date})             # <<<<<<<<<<<<<<
 *             kg_supply[-1].update({'date': due_date})
 *             kg_waste[-1].update({'date': due_date})
 */
    __pyx_t_9 = __Pyx_GetItemInt_List(__pyx_v_kg_backlog, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 687, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_update); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 687, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyDict_New(); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 687, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_date, __pyx_v_due_date) < 0) __PYX_ERR(0, 687, __pyx_L1_error)
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 687, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_10);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_14)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_9};
        __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 687, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_9};
        __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 687, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      {
        __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 687, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_9);
        __pyx_t_9 = 0;
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_11, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 687, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":688
 *             kg_inventory[-1].update({'date': due_date})
 *             kg_backlog[-1].update({'date': due_date})
 *             kg_supply[-1].update({'date': due_date})             # <<<<<<<<<<<<<<
 *             kg_waste[-1].update({'date': due_date})
 * 
 */
    __pyx_t_14 = __Pyx_GetItemInt_List(__pyx_v_kg_supply, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_update); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = PyDict_New(); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_date, __pyx_v_due_date) < 0) __PYX_ERR(0, 688, __pyx_L1_error)
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    if (!__pyx_t_9) {
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_14); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 688, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_10);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_11)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_14};
        __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 688, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_14};
        __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 688, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 688, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_9); __pyx_t_9 = NULL;
        __Pyx_GIVEREF(__pyx_t_14);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_14);
        __pyx_t_14 = 0;
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_7, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 688, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":689
 *             kg_backlog[-1].update({'date': due_date})
 *             kg_supply[-1].update({'date': due_date})
 *             kg_waste[-1].update({'date': due_date})             # <<<<<<<<<<<<<<
 * 
 *         return PySingleSiteSimpleSchedule(
 */
    __pyx_t_11 = __Pyx_GetItemInt_List(__pyx_v_kg_waste, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = PyDict_New(); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_date, __pyx_v_due_date) < 0) __PYX_ERR(0, 689, __pyx_L1_error)
    __pyx_t_14 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (!__pyx_t_14) {
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 689, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_10);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_14, __pyx_t_11};
        __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 689, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_14, __pyx_t_11};
        __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 689, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 689, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_14); __pyx_t_14 = NULL;
        __Pyx_GIVEREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_11);
        __pyx_t_11 = 0;
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_9, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 689, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "biopharma_scheduling/single_site/stochastic.pyx":665
 *         kg_waste = []
 * 
 *         for i, due_date in enumerate(self.due_dates):             # <<<<<<<<<<<<<<
 *             kg_inventory.append({
 *                 product_label: schedule.kg_inventory[j][i]
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":691
 *             kg_waste[-1].update({'date': due_date})
 * 
 *         return PySingleSiteSimpleSchedule(             # <<<<<<<<<<<<<<
 *             objectives={
 *                 obj: schedule.objectives[self.objectives[obj]]
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PySingleSiteSimpleSchedule); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "biopharma_scheduling/single_site/stochastic.pyx":692
 * 
 *         return PySingleSiteSimpleSchedule(
 *             objectives={             # <<<<<<<<<<<<<<
 *                 obj: schedule.objectives[self.objectives[obj]]
 *                 for obj in self.AVAILABLE_OBJECTIVES
 */
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  { /* enter inner scope */
    PyObject *__pyx_8genexpr4__pyx_v_obj = NULL;
    __pyx_t_10 = PyDict_New(); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 692, __pyx_L35_error)
    __Pyx_GOTREF(__pyx_t_10);

    /* "biopharma_scheduling/single_site/stochastic.pyx":694
 *             objectives={
 *                 obj: schedule.objectives[self.objectives[obj]]
 *                 for obj in self.AVAILABLE_OBJECTIVES             # <<<<<<<<<<<<<<
 *             },
 *             campaigns_table=campaigns_table,
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_AVAILABLE_OBJECTIVES); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 694, __pyx_L35_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
      __pyx_t_9 = __pyx_t_7; __Pyx_INCREF(__pyx_t_9); __pyx_t_19 = 0;
      __pyx_t_20 = NULL;
    } else {
      __pyx_t_19 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 694, __pyx_L35_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_20 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 694, __pyx_L35_error)
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    for (;;) {
      if (likely(!__pyx_t_20)) {
        if (likely(PyList_CheckExact(__pyx_t_9))) {
          if (__pyx_t_19 >= PyList_GET_SIZE(__pyx_t_9)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_19); __Pyx_INCREF(__pyx_t_7); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 694, __pyx_L35_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_9, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 694, __pyx_L35_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          if (__pyx_t_19 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_19); __Pyx_INCREF(__pyx_t_7); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 694, __pyx_L35_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_9, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 694, __pyx_L35_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_20(__pyx_t_9);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 694, __pyx_L35_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr4__pyx_v_obj, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":693
 *         return PySingleSiteSimpleSchedule(
 *             objectives={
 *                 obj: schedule.objectives[self.objectives[obj]]             # <<<<<<<<<<<<<<
 *                 for obj in self.AVAILABLE_OBJECTIVES
 *             },
 */
      __pyx_t_7 = PyObject_GetItem(__pyx_cur_scope->__pyx_v_self->objectives, __pyx_8genexpr4__pyx_v_obj); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 693, __pyx_L35_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_24 = __Pyx_PyInt_As_size_t(__pyx_t_7); if (unlikely((__pyx_t_24 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 693, __pyx_L35_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyFloat_FromDouble((__pyx_v_schedule.objectives[__pyx_t_24])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 693, __pyx_L35_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (unlikely(PyDict_SetItem(__pyx_t_10, (PyObject*)__pyx_8genexpr4__pyx_v_obj, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 693, __pyx_L35_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "biopharma_scheduling/single_site/stochastic.pyx":694
 *             objectives={
 *                 obj: schedule.objectives[self.objectives[obj]]
 *                 for obj in self.AVAILABLE_OBJECTIVES             # <<<<<<<<<<<<<<
 *             },
 *             campaigns_table=campaigns_table,
 */
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_obj);
    goto __pyx_L38_exit_scope;
    __pyx_L35_error:;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_obj);
    goto __pyx_L1_error;
    __pyx_L38_exit_scope:;
  } /* exit inner scope */
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_objectives, __pyx_t_10) < 0) __PYX_ERR(0, 692, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":696
 *                 for obj in self.AVAILABLE_OBJECTIVES
 *             },
 *             campaigns_table=campaigns_table,             # <<<<<<<<<<<<<<
 *             batches_table=batches_table,
 *             tasks_table=tasks_table,
 */
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_campaigns_table, __pyx_v_campaigns_table) < 0) __PYX_ERR(0, 692, __pyx_L1_error)

  /* "biopharma_scheduling/single_site/stochastic.pyx":697
 *             },
 *             campaigns_table=campaigns_table,
 *             batches_table=batches_table,             # <<<<<<<<<<<<<<
 *             tasks_table=tasks_table,
 *             kg_inventory=kg_inventory,
 */
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_batches_table, __pyx_v_batches_table) < 0) __PYX_ERR(0, 692, __pyx_L1_error)

  /* "biopharma_scheduling/single_site/stochastic.pyx":698
 *             campaigns_table=campaigns_table,
 *             batches_table=batches_table,
 *             tasks_table=tasks_table,             # <<<<<<<<<<<<<<
 *             kg_inventory=kg_inventory,
 *             kg_backlog=kg_backlog,
 */
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_tasks_table, __pyx_v_tasks_table) < 0) __PYX_ERR(0, 692, __pyx_L1_error)

  /* "biopharma_scheduling/single_site/stochastic.pyx":699
 *             batches_table=batches_table,
 *             tasks_table=tasks_table,
 *             kg_inventory=kg_inventory,             # <<<<<<<<<<<<<<
 *             kg_backlog=kg_backlog,
 *             kg_supply=kg_supply,
 */
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_kg_inventory, __pyx_v_kg_inventory) < 0) __PYX_ERR(0, 692, __pyx_L1_error)

  /* "biopharma_scheduling/single_site/stochastic.pyx":700
 *             tasks_table=tasks_table,
 *             kg_inventory=kg_inventory,
 *             kg_backlog=kg_backlog,             # <<<<<<<<<<<<<<
 *             kg_supply=kg_supply,
 *             kg_waste=kg_waste
 */
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_kg_backlog, __pyx_v_kg_backlog) < 0) __PYX_ERR(0, 692, __pyx_L1_error)

  /* "biopharma_scheduling/single_site/stochastic.pyx":701
 *             kg_inventory=kg_inventory,
 *             kg_backlog=kg_backlog,
 *             kg_supply=kg_supply,             # <<<<<<<<<<<<<<
 *             kg_waste=kg_waste
 *         )
 */
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_kg_supply, __pyx_v_kg_supply) < 0) __PYX_ERR(0, 692, __pyx_L1_error)

  /* "biopharma_scheduling/single_site/stochastic.pyx":703
 *             kg_supply=kg_supply,
 *             kg_waste=kg_waste
 *         )             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_kg_waste, __pyx_v_kg_waste) < 0) __PYX_ERR(0, 692, __pyx_L1_error)

  /* "biopharma_scheduling/single_site/stochastic.pyx":691
 *             kg_waste[-1].update({'date': due_date})
 * 
 *         return PySingleSiteSimpleSchedule(             # <<<<<<<<<<<<<<
 *             objectives={
 *                 obj: schedule.objectives[self.objectives[obj]]
 */
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_10;
  __pyx_t_10 = 0;
  goto __pyx_L0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":581
 *             pbar.close()
 * 
 *     cdef __make_pyschedule(self, SingleSiteSimpleSchedule &schedule):             # <<<<<<<<<<<<<<
 *         def get_date_of(delta):
 *             return pd.Timedelta('%d days' % delta) + pd.to_datetime(self.start_date).date()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("biopharma_scheduling.single_site.stochastic.StochSingleSiteSimple.__make_pyschedule", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_get_date_of);
  __Pyx_XDECREF(__pyx_v_campaigns_table);
  __Pyx_XDECREF(__pyx_v_batches_table);
  __Pyx_XDECREF(__pyx_v_tasks_table);
  __Pyx_XDECREF(__pyx_v_kg_inventory);
  __Pyx_XDECREF(__pyx_v_kg_backlog);
  __Pyx_XDECREF(__pyx_v_kg_supply);
  __Pyx_XDECREF(__pyx_v_kg_waste);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_due_date);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "biopharma_scheduling/single_site/stochastic.pyx":706
 * 
 *     @property
 *     def schedules(self):             # <<<<<<<<<<<<<<
 *         return self.schedules
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_9schedules_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_9schedules_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_9schedules___get__(((struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_9schedules___get__(struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "biopharma_scheduling/single_site/stochastic.pyx":707
 *     @property
 *     def schedules(self):
 *         return self.schedules             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->schedules);
  __pyx_r = __pyx_v_self->schedules;
  goto __pyx_L0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":706
 * 
 *     @property
 *     def schedules(self):             # <<<<<<<<<<<<<<
 *         return self.schedules
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "biopharma_scheduling/single_site/stochastic.pyx":710
 * 
 *     @property
 *     def history(self):             # <<<<<<<<<<<<<<
 *         return self.history
 */

/* Python wrapper */
static PyObject *__pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_7history_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_7history_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_7history___get__(((struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_7history___get__(struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "biopharma_scheduling/single_site/stochastic.pyx":711
 *     @property
 *     def history(self):
 *         return self.history             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->history);
  __pyx_r = __pyx_v_self->history;
  goto __pyx_L0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":710
 * 
 *     @property
 *     def history(self):             # <<<<<<<<<<<<<<
 *         return self.history
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.input_data,self.single_site_simple cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_12__reduce_cython__(((struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.input_data,self.single_site_simple cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.input_data,self.single_site_simple cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.input_data,self.single_site_simple cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("biopharma_scheduling.single_site.stochastic.StochSingleSiteSimple.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.input_data,self.single_site_simple cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.input_data,self.single_site_simple cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_14__setstate_cython__(((struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.input_data,self.single_site_simple cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.input_data,self.single_site_simple cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.input_data,self.single_site_simple cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.input_data,self.single_site_simple cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("biopharma_scheduling.single_site.stochastic.StochSingleSiteSimple.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *__pyx_v_o) {
  std::vector<double>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<double>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_double", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_item); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((double)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<std::vector<double> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(PyObject *__pyx_v_o) {
  std::vector<std::vector<double> >  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::vector<double> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::vector<double>  __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_vector_from_py_double(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((std::vector<double> )__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *__pyx_v_o) {
  std::vector<int>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_int", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_item); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((int)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<std::vector<int> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(PyObject *__pyx_v_o) {
  std::vector<std::vector<int> >  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::vector<int> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::vector<int>  __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_vector_from_py_int(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((std::vector<int> )__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple __pyx_vtable_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple;

static PyObject *__pyx_tp_new_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *)o);
  p->__pyx_vtab = __pyx_vtabptr_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple;
  new((void*)&(p->input_data)) stochastic::SingleSiteSimpleInputData();
  new((void*)&(p->single_site_simple)) stochastic::SingleSiteSimpleModel();
  p->history = Py_None; Py_INCREF(Py_None);
  p->schedules = Py_None; Py_INCREF(Py_None);
  p->start_date = Py_None; Py_INCREF(Py_None);
  p->product_labels = Py_None; Py_INCREF(Py_None);
  p->due_dates = Py_None; Py_INCREF(Py_None);
  p->objectives = Py_None; Py_INCREF(Py_None);
  p->objectives_coefficients_list = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple(PyObject *o) {
  struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *p = (struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->input_data);
  __Pyx_call_destructor(p->single_site_simple);
  Py_CLEAR(p->history);
  Py_CLEAR(p->schedules);
  Py_CLEAR(p->start_date);
  Py_CLEAR(p->product_labels);
  Py_CLEAR(p->due_dates);
  Py_CLEAR(p->objectives);
  Py_CLEAR(p->objectives_coefficients_list);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *p = (struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *)o;
  if (p->history) {
    e = (*v)(p->history, a); if (e) return e;
  }
  if (p->schedules) {
    e = (*v)(p->schedules, a); if (e) return e;
  }
  if (p->start_date) {
    e = (*v)(p->start_date, a); if (e) return e;
  }
  if (p->product_labels) {
    e = (*v)(p->product_labels, a); if (e) return e;
  }
  if (p->due_dates) {
    e = (*v)(p->due_dates, a); if (e) return e;
  }
  if (p->objectives) {
    e = (*v)(p->objectives, a); if (e) return e;
  }
  if (p->objectives_coefficients_list) {
    e = (*v)(p->objectives_coefficients_list, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *p = (struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *)o;
  tmp = ((PyObject*)p->history);
  p->history = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->schedules);
  p->schedules = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->start_date);
  p->start_date = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->product_labels);
  p->product_labels = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->due_dates);
  p->due_dates = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->objectives);
  p->objectives = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->objectives_coefficients_list);
  p->objectives_coefficients_list = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_schedules(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_9schedules_1__get__(o);
}

static PyObject *__pyx_getprop_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_history(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_7history_1__get__(o);
}

static PyMethodDef __pyx_methods_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple[] = {
  {"fit", (PyCFunction)__pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_3fit, METH_VARARGS|METH_KEYWORDS, 0},
  {"__validate_input", (PyCFunction)__pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_5__validate_input, METH_VARARGS|METH_KEYWORDS, 0},
  {"__count_days", (PyCFunction)__pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_7__count_days, METH_VARARGS|METH_KEYWORDS, 0},
  {"__run_single_objective_ga", (PyCFunction)__pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_9__run_single_objective_ga, METH_NOARGS, 0},
  {"__run_nsgaii", (PyCFunction)__pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_11__run_nsgaii, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple[] = {
  {(char *)"schedules", __pyx_getprop_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_schedules, 0, (char *)0, 0},
  {(char *)"history", __pyx_getprop_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_history, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple = {
  PyVarObject_HEAD_INIT(0, 0)
  "biopharma_scheduling.single_site.stochastic.StochSingleSiteSimple", /*tp_name*/
  sizeof(struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n        Continuous-time capacity planning of a single multi-product\n        biopharmaceutical facility using a Single/Multi-Objective \n        Genetic Algorithm and Monte Carlo simulation.\n\n        See 'StochSingleSiteSimple.AVAILABLE_OBJECTIVES' for the objectives\n        and constraints available in this model.\n\n        Constraints take the priority over the objectives.\n    ", /*tp_doc*/
  __pyx_tp_traverse_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple, /*tp_traverse*/
  __pyx_tp_clear_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule *__pyx_freelist_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule[8];
static int __pyx_freecount_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule = 0;

static PyObject *__pyx_tp_new_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule)))) {
    o = (PyObject*)__pyx_freelist_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule[--__pyx_freecount_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule];
    memset(o, 0, sizeof(struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule(PyObject *o) {
  struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule *p = (struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule)))) {
    __pyx_freelist_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule[__pyx_freecount_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule++] = ((struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule *p = (struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule *p = (struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule = {
  PyVarObject_HEAD_INIT(0, 0)
  "biopharma_scheduling.single_site.stochastic.__pyx_scope_struct____pyx___make_pyschedule", /*tp_name*/
  sizeof(struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule, /*tp_traverse*/
  __pyx_tp_clear_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "stochastic",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_AVAILABLE_OBJECTIVES, __pyx_k_AVAILABLE_OBJECTIVES, sizeof(__pyx_k_AVAILABLE_OBJECTIVES), 0, 0, 1, 1},
  {&__pyx_kp_s_Approved_on, __pyx_k_Approved_on, sizeof(__pyx_k_Approved_on), 0, 0, 1, 0},
  {&__pyx_n_s_Batches, __pyx_k_Batches, sizeof(__pyx_k_Batches), 0, 0, 1, 1},
  {&__pyx_kp_s_Collecting_schedules, __pyx_k_Collecting_schedules, sizeof(__pyx_k_Collecting_schedules), 0, 0, 1, 0},
  {&__pyx_kp_s_Constraint_coefficient_can_only, __pyx_k_Constraint_coefficient_can_only, sizeof(__pyx_k_Constraint_coefficient_can_only), 0, 0, 1, 0},
  {&__pyx_n_s_DSP, __pyx_k_DSP, sizeof(__pyx_k_DSP), 0, 0, 1, 1},
  {&__pyx_n_s_DataFrame, __pyx_k_DataFrame, sizeof(__pyx_k_DataFrame), 0, 0, 1, 1},
  {&__pyx_n_s_Done, __pyx_k_Done, sizeof(__pyx_k_Done), 0, 0, 1, 1},
  {&__pyx_kp_s_Expires_on, __pyx_k_Expires_on, sizeof(__pyx_k_Expires_on), 0, 0, 1, 0},
  {&__pyx_n_s_Finish, __pyx_k_Finish, sizeof(__pyx_k_Finish), 0, 0, 1, 1},
  {&__pyx_kp_s_First_Batch, __pyx_k_First_Batch, sizeof(__pyx_k_First_Batch), 0, 0, 1, 0},
  {&__pyx_kp_s_First_Harvest, __pyx_k_First_Harvest, sizeof(__pyx_k_First_Harvest), 0, 0, 1, 0},
  {&__pyx_kp_s_GA_is_running_d_d, __pyx_k_GA_is_running_d_d, sizeof(__pyx_k_GA_is_running_d_d), 0, 0, 1, 0},
  {&__pyx_kp_s_Harvested_on, __pyx_k_Harvested_on, sizeof(__pyx_k_Harvested_on), 0, 0, 1, 0},
  {&__pyx_n_s_Inoculation, __pyx_k_Inoculation, sizeof(__pyx_k_Inoculation), 0, 0, 1, 1},
  {&__pyx_kp_s_Input_data_must_be_a_pd_core_fra, __pyx_k_Input_data_must_be_a_pd_core_fra, sizeof(__pyx_k_Input_data_must_be_a_pd_core_fra), 0, 0, 1, 0},
  {&__pyx_n_s_Kg, __pyx_k_Kg, sizeof(__pyx_k_Kg), 0, 0, 1, 1},
  {&__pyx_kp_s_Last_Batch, __pyx_k_Last_Batch, sizeof(__pyx_k_Last_Batch), 0, 0, 1, 0},
  {&__pyx_kp_s_Objective_coefficient_can_only_b, __pyx_k_Objective_coefficient_can_only_b, sizeof(__pyx_k_Objective_coefficient_can_only_b), 0, 0, 1, 0},
  {&__pyx_n_s_OrderedDict, __pyx_k_OrderedDict, sizeof(__pyx_k_OrderedDict), 0, 0, 1, 1},
  {&__pyx_kp_s_Processing_history, __pyx_k_Processing_history, sizeof(__pyx_k_Processing_history), 0, 0, 1, 0},
  {&__pyx_n_s_Product, __pyx_k_Product, sizeof(__pyx_k_Product), 0, 0, 1, 1},
  {&__pyx_kp_s_Product_labels_from_kg_demand_an, __pyx_k_Product_labels_from_kg_demand_an, sizeof(__pyx_k_Product_labels_from_kg_demand_an), 0, 0, 1, 0},
  {&__pyx_kp_s_Product_labels_from_kg_demand_an_2, __pyx_k_Product_labels_from_kg_demand_an_2, sizeof(__pyx_k_Product_labels_from_kg_demand_an_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Product_labels_from_kg_demand_ma, __pyx_k_Product_labels_from_kg_demand_ma, sizeof(__pyx_k_Product_labels_from_kg_demand_ma), 0, 0, 1, 0},
  {&__pyx_kp_s_Product_labels_from_kg_demand_ma_2, __pyx_k_Product_labels_from_kg_demand_ma_2, sizeof(__pyx_k_Product_labels_from_kg_demand_ma_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Product_labels_from_kg_demand_mi, __pyx_k_Product_labels_from_kg_demand_mi, sizeof(__pyx_k_Product_labels_from_kg_demand_mi), 0, 0, 1, 0},
  {&__pyx_kp_s_Product_labels_from_kg_demand_mi_2, __pyx_k_Product_labels_from_kg_demand_mi_2, sizeof(__pyx_k_Product_labels_from_kg_demand_mi_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Product_labels_from_kg_demand_mo, __pyx_k_Product_labels_from_kg_demand_mo, sizeof(__pyx_k_Product_labels_from_kg_demand_mo), 0, 0, 1, 0},
  {&__pyx_kp_s_Product_labels_in_product_column, __pyx_k_Product_labels_in_product_column, sizeof(__pyx_k_Product_labels_in_product_column), 0, 0, 1, 0},
  {&__pyx_n_s_Production, __pyx_k_Production, sizeof(__pyx_k_Production), 0, 0, 1, 1},
  {&__pyx_n_s_PySingleSiteMultiSuiteSchedule, __pyx_k_PySingleSiteMultiSuiteSchedule, sizeof(__pyx_k_PySingleSiteMultiSuiteSchedule), 0, 0, 1, 1},
  {&__pyx_n_s_PySingleSiteSimpleSchedule, __pyx_k_PySingleSiteSimpleSchedule, sizeof(__pyx_k_PySingleSiteSimpleSchedule), 0, 0, 1, 1},
  {&__pyx_n_s_Seed, __pyx_k_Seed, sizeof(__pyx_k_Seed), 0, 0, 1, 1},
  {&__pyx_n_s_Start, __pyx_k_Start, sizeof(__pyx_k_Start), 0, 0, 1, 1},
  {&__pyx_n_s_StochSingleSiteSimple___make_pys, __pyx_k_StochSingleSiteSimple___make_pys, sizeof(__pyx_k_StochSingleSiteSimple___make_pys), 0, 0, 1, 1},
  {&__pyx_kp_s_Stored_on, __pyx_k_Stored_on, sizeof(__pyx_k_Stored_on), 0, 0, 1, 0},
  {&__pyx_n_s_Task, __pyx_k_Task, sizeof(__pyx_k_Task), 0, 0, 1, 1},
  {&__pyx_n_s_Timedelta, __pyx_k_Timedelta, sizeof(__pyx_k_Timedelta), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_approval_days, __pyx_k_approval_days, sizeof(__pyx_k_approval_days), 0, 0, 1, 1},
  {&__pyx_n_s_axis, __pyx_k_axis, sizeof(__pyx_k_axis), 0, 0, 1, 1},
  {&__pyx_n_s_backlog_penalty_per_kg, __pyx_k_backlog_penalty_per_kg, sizeof(__pyx_k_backlog_penalty_per_kg), 0, 0, 1, 1},
  {&__pyx_n_s_batches_multiples_of_per_campaig, __pyx_k_batches_multiples_of_per_campaig, sizeof(__pyx_k_batches_multiples_of_per_campaig), 0, 0, 1, 1},
  {&__pyx_n_s_batches_table, __pyx_k_batches_table, sizeof(__pyx_k_batches_table), 0, 0, 1, 1},
  {&__pyx_kp_s_biopharma_scheduling_single_site, __pyx_k_biopharma_scheduling_single_site, sizeof(__pyx_k_biopharma_scheduling_single_site), 0, 0, 1, 0},
  {&__pyx_n_s_biopharma_scheduling_single_site_2, __pyx_k_biopharma_scheduling_single_site_2, sizeof(__pyx_k_biopharma_scheduling_single_site_2), 0, 0, 1, 1},
  {&__pyx_n_s_campaigns_table, __pyx_k_campaigns_table, sizeof(__pyx_k_campaigns_table), 0, 0, 1, 1},
  {&__pyx_n_s_changeover_days, __pyx_k_changeover_days, sizeof(__pyx_k_changeover_days), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_s_columns, __pyx_k_columns, sizeof(__pyx_k_columns), 0, 0, 1, 1},
  {&__pyx_n_s_constraints, __pyx_k_constraints, sizeof(__pyx_k_constraints), 0, 0, 1, 1},
  {&__pyx_kp_s_constraints_are_expected_to_hol, __pyx_k_constraints_are_expected_to_hol, sizeof(__pyx_k_constraints_are_expected_to_hol), 0, 0, 1, 0},
  {&__pyx_kp_s_constraints_needs_to_be_a_dict, __pyx_k_constraints_needs_to_be_a_dict, sizeof(__pyx_k_constraints_needs_to_be_a_dict), 0, 0, 1, 0},
  {&__pyx_n_s_core, __pyx_k_core, sizeof(__pyx_k_core), 0, 0, 1, 1},
  {&__pyx_n_s_count_days, __pyx_k_count_days, sizeof(__pyx_k_count_days), 0, 0, 1, 1},
  {&__pyx_kp_s_d_days, __pyx_k_d_days, sizeof(__pyx_k_d_days), 0, 0, 1, 0},
  {&__pyx_n_s_date, __pyx_k_date, sizeof(__pyx_k_date), 0, 0, 1, 1},
  {&__pyx_kp_s_date_indices_from_kg_demand_max, __pyx_k_date_indices_from_kg_demand_max, sizeof(__pyx_k_date_indices_from_kg_demand_max), 0, 0, 1, 0},
  {&__pyx_kp_s_date_indices_from_kg_demand_max_2, __pyx_k_date_indices_from_kg_demand_max_2, sizeof(__pyx_k_date_indices_from_kg_demand_max_2), 0, 0, 1, 0},
  {&__pyx_kp_s_date_indices_from_kg_demand_min, __pyx_k_date_indices_from_kg_demand_min, sizeof(__pyx_k_date_indices_from_kg_demand_min), 0, 0, 1, 0},
  {&__pyx_kp_s_date_indices_from_kg_demand_min_2, __pyx_k_date_indices_from_kg_demand_min_2, sizeof(__pyx_k_date_indices_from_kg_demand_min_2), 0, 0, 1, 0},
  {&__pyx_kp_s_date_indices_from_kg_demand_mod, __pyx_k_date_indices_from_kg_demand_mod, sizeof(__pyx_k_date_indices_from_kg_demand_mod), 0, 0, 1, 0},
  {&__pyx_n_s_days, __pyx_k_days, sizeof(__pyx_k_days), 0, 0, 1, 1},
  {&__pyx_n_s_delta, __pyx_k_delta, sizeof(__pyx_k_delta), 0, 0, 1, 1},
  {&__pyx_n_s_drop, __pyx_k_drop, sizeof(__pyx_k_drop), 0, 0, 1, 1},
  {&__pyx_n_s_dsp_days, __pyx_k_dsp_days, sizeof(__pyx_k_dsp_days), 0, 0, 1, 1},
  {&__pyx_n_s_due_dates, __pyx_k_due_dates, sizeof(__pyx_k_due_dates), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_fillna, __pyx_k_fillna, sizeof(__pyx_k_fillna), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_frame, __pyx_k_frame, sizeof(__pyx_k_frame), 0, 0, 1, 1},
  {&__pyx_n_s_get_date_of, __pyx_k_get_date_of, sizeof(__pyx_k_get_date_of), 0, 0, 1, 1},
  {&__pyx_n_s_hypervolume, __pyx_k_hypervolume, sizeof(__pyx_k_hypervolume), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_inoculation_days, __pyx_k_inoculation_days, sizeof(__pyx_k_inoculation_days), 0, 0, 1, 1},
  {&__pyx_n_s_inventory_penalty_per_kg, __pyx_k_inventory_penalty_per_kg, sizeof(__pyx_k_inventory_penalty_per_kg), 0, 0, 1, 1},
  {&__pyx_kp_s_is_not_allowed_as_a_constraint, __pyx_k_is_not_allowed_as_a_constraint, sizeof(__pyx_k_is_not_allowed_as_a_constraint), 0, 0, 1, 0},
  {&__pyx_kp_s_is_not_allowed_as_an_objective, __pyx_k_is_not_allowed_as_an_objective, sizeof(__pyx_k_is_not_allowed_as_an_objective), 0, 0, 1, 0},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_kg_backlog, __pyx_k_kg_backlog, sizeof(__pyx_k_kg_backlog), 0, 0, 1, 1},
  {&__pyx_n_s_kg_demand_max, __pyx_k_kg_demand_max, sizeof(__pyx_k_kg_demand_max), 0, 0, 1, 1},
  {&__pyx_kp_s_kg_demand_max_must_have_a_date, __pyx_k_kg_demand_max_must_have_a_date, sizeof(__pyx_k_kg_demand_max_must_have_a_date), 0, 0, 1, 0},
  {&__pyx_n_s_kg_demand_min, __pyx_k_kg_demand_min, sizeof(__pyx_k_kg_demand_min), 0, 0, 1, 1},
  {&__pyx_kp_s_kg_demand_min_must_have_a_date, __pyx_k_kg_demand_min_must_have_a_date, sizeof(__pyx_k_kg_demand_min_must_have_a_date), 0, 0, 1, 0},
  {&__pyx_n_s_kg_demand_mode, __pyx_k_kg_demand_mode, sizeof(__pyx_k_kg_demand_mode), 0, 0, 1, 1},
  {&__pyx_kp_s_kg_demand_mode_must_have_a_date, __pyx_k_kg_demand_mode_must_have_a_date, sizeof(__pyx_k_kg_demand_mode_must_have_a_date), 0, 0, 1, 0},
  {&__pyx_n_s_kg_inventory, __pyx_k_kg_inventory, sizeof(__pyx_k_kg_inventory), 0, 0, 1, 1},
  {&__pyx_n_s_kg_inventory_target, __pyx_k_kg_inventory_target, sizeof(__pyx_k_kg_inventory_target), 0, 0, 1, 1},
  {&__pyx_kp_s_kg_inventory_target_must_have_a, __pyx_k_kg_inventory_target_must_have_a, sizeof(__pyx_k_kg_inventory_target_must_have_a), 0, 0, 1, 0},
  {&__pyx_n_s_kg_opening_stock, __pyx_k_kg_opening_stock, sizeof(__pyx_k_kg_opening_stock), 0, 0, 1, 1},
  {&__pyx_n_s_kg_storage_limits, __pyx_k_kg_storage_limits, sizeof(__pyx_k_kg_storage_limits), 0, 0, 1, 1},
  {&__pyx_n_s_kg_supply, __pyx_k_kg_supply, sizeof(__pyx_k_kg_supply), 0, 0, 1, 1},
  {&__pyx_n_s_kg_waste, __pyx_k_kg_waste, sizeof(__pyx_k_kg_waste), 0, 0, 1, 1},
  {&__pyx_n_s_kg_yield_per_batch_max, __pyx_k_kg_yield_per_batch_max, sizeof(__pyx_k_kg_yield_per_batch_max), 0, 0, 1, 1},
  {&__pyx_n_s_kg_yield_per_batch_min, __pyx_k_kg_yield_per_batch_min, sizeof(__pyx_k_kg_yield_per_batch_min), 0, 0, 1, 1},
  {&__pyx_n_s_kg_yield_per_batch_mode, __pyx_k_kg_yield_per_batch_mode, sizeof(__pyx_k_kg_yield_per_batch_mode), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max_batches_per_campaign, __pyx_k_max_batches_per_campaign, sizeof(__pyx_k_max_batches_per_campaign), 0, 0, 1, 1},
  {&__pyx_n_s_mc_random_state, __pyx_k_mc_random_state, sizeof(__pyx_k_mc_random_state), 0, 0, 1, 1},
  {&__pyx_n_s_min_batches_per_campaign, __pyx_k_min_batches_per_campaign, sizeof(__pyx_k_min_batches_per_campaign), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_num_gens, __pyx_k_num_gens, sizeof(__pyx_k_num_gens), 0, 0, 1, 1},
  {&__pyx_kp_s_num_gens_needs_to_be_a_positive, __pyx_k_num_gens_needs_to_be_a_positive, sizeof(__pyx_k_num_gens_needs_to_be_a_positive), 0, 0, 1, 0},
  {&__pyx_n_s_num_mc_simulations, __pyx_k_num_mc_simulations, sizeof(__pyx_k_num_mc_simulations), 0, 0, 1, 1},
  {&__pyx_kp_s_num_mc_simulations_needs_to_be, __pyx_k_num_mc_simulations_needs_to_be, sizeof(__pyx_k_num_mc_simulations_needs_to_be), 0, 0, 1, 0},
  {&__pyx_n_s_num_runs, __pyx_k_num_runs, sizeof(__pyx_k_num_runs), 0, 0, 1, 1},
  {&__pyx_kp_s_num_runs_needs_to_be_a_positive, __pyx_k_num_runs_needs_to_be_a_positive, sizeof(__pyx_k_num_runs_needs_to_be_a_positive), 0, 0, 1, 0},
  {&__pyx_n_s_num_threads, __pyx_k_num_threads, sizeof(__pyx_k_num_threads), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_objectives, __pyx_k_objectives, sizeof(__pyx_k_objectives), 0, 0, 1, 1},
  {&__pyx_kp_s_objectives_needs_to_be_a_dict_i, __pyx_k_objectives_needs_to_be_a_dict_i, sizeof(__pyx_k_objectives_needs_to_be_a_dict_i), 0, 0, 1, 0},
  {&__pyx_n_s_p_gene_swap, __pyx_k_p_gene_swap, sizeof(__pyx_k_p_gene_swap), 0, 0, 1, 1},
  {&__pyx_kp_s_p_gene_swap_needs_to_be_a_posit, __pyx_k_p_gene_swap_needs_to_be_a_posit, sizeof(__pyx_k_p_gene_swap_needs_to_be_a_posit), 0, 0, 1, 0},
  {&__pyx_n_s_p_minus_batch_mut, __pyx_k_p_minus_batch_mut, sizeof(__pyx_k_p_minus_batch_mut), 0, 0, 1, 1},
  {&__pyx_kp_s_p_minus_batch_mut_needs_to_be_a, __pyx_k_p_minus_batch_mut_needs_to_be_a, sizeof(__pyx_k_p_minus_batch_mut_needs_to_be_a), 0, 0, 1, 0},
  {&__pyx_n_s_p_plus_batch_mut, __pyx_k_p_plus_batch_mut, sizeof(__pyx_k_p_plus_batch_mut), 0, 0, 1, 1},
  {&__pyx_kp_s_p_plus_batch_mut_needs_to_be_a, __pyx_k_p_plus_batch_mut_needs_to_be_a, sizeof(__pyx_k_p_plus_batch_mut_needs_to_be_a), 0, 0, 1, 0},
  {&__pyx_n_s_p_product_mut, __pyx_k_p_product_mut, sizeof(__pyx_k_p_product_mut), 0, 0, 1, 1},
  {&__pyx_kp_s_p_product_mut_needs_to_be_a_pos, __pyx_k_p_product_mut_needs_to_be_a_pos, sizeof(__pyx_k_p_product_mut_needs_to_be_a_pos), 0, 0, 1, 0},
  {&__pyx_n_s_p_xo, __pyx_k_p_xo, sizeof(__pyx_k_p_xo), 0, 0, 1, 1},
  {&__pyx_kp_s_p_xo_needs_to_be_a_positive_flo, __pyx_k_p_xo_needs_to_be_a_positive_flo, sizeof(__pyx_k_p_xo_needs_to_be_a_positive_flo), 0, 0, 1, 0},
  {&__pyx_n_s_pandas, __pyx_k_pandas, sizeof(__pyx_k_pandas), 0, 0, 1, 1},
  {&__pyx_n_s_pd, __pyx_k_pd, sizeof(__pyx_k_pd), 0, 0, 1, 1},
  {&__pyx_n_s_popsize, __pyx_k_popsize, sizeof(__pyx_k_popsize), 0, 0, 1, 1},
  {&__pyx_kp_s_popsize_needs_to_be_a_positive, __pyx_k_popsize_needs_to_be_a_positive, sizeof(__pyx_k_popsize_needs_to_be_a_positive), 0, 0, 1, 0},
  {&__pyx_n_s_product, __pyx_k_product, sizeof(__pyx_k_product), 0, 0, 1, 1},
  {&__pyx_kp_s_product_column_is_missing_in_ch, __pyx_k_product_column_is_missing_in_ch, sizeof(__pyx_k_product_column_is_missing_in_ch), 0, 0, 1, 0},
  {&__pyx_n_s_product_data, __pyx_k_product_data, sizeof(__pyx_k_product_data), 0, 0, 1, 1},
  {&__pyx_kp_s_product_data_is_missing_column, __pyx_k_product_data_is_missing_column, sizeof(__pyx_k_product_data_is_missing_column), 0, 0, 1, 0},
  {&__pyx_n_s_production_cost_per_kg, __pyx_k_production_cost_per_kg, sizeof(__pyx_k_production_cost_per_kg), 0, 0, 1, 1},
  {&__pyx_n_s_production_days, __pyx_k_production_days, sizeof(__pyx_k_production_days), 0, 0, 1, 1},
  {&__pyx_n_s_pyschedule, __pyx_k_pyschedule, sizeof(__pyx_k_pyschedule), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_random_state, __pyx_k_random_state, sizeof(__pyx_k_random_state), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_remove, __pyx_k_remove, sizeof(__pyx_k_remove), 0, 0, 1, 1},
  {&__pyx_n_s_run_nsgaii, __pyx_k_run_nsgaii, sizeof(__pyx_k_run_nsgaii), 0, 0, 1, 1},
  {&__pyx_n_s_run_single_objective_ga, __pyx_k_run_single_objective_ga, sizeof(__pyx_k_run_single_objective_ga), 0, 0, 1, 1},
  {&__pyx_n_s_save_history, __pyx_k_save_history, sizeof(__pyx_k_save_history), 0, 0, 1, 1},
  {&__pyx_n_s_seed_days, __pyx_k_seed_days, sizeof(__pyx_k_seed_days), 0, 0, 1, 1},
  {&__pyx_kp_s_self_input_data_self_single_site, __pyx_k_self_input_data_self_single_site, sizeof(__pyx_k_self_input_data_self_single_site), 0, 0, 1, 0},
  {&__pyx_n_s_sell_price_per_kg, __pyx_k_sell_price_per_kg, sizeof(__pyx_k_sell_price_per_kg), 0, 0, 1, 1},
  {&__pyx_n_s_set_description, __pyx_k_set_description, sizeof(__pyx_k_set_description), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shelf_life_days, __pyx_k_shelf_life_days, sizeof(__pyx_k_shelf_life_days), 0, 0, 1, 1},
  {&__pyx_n_s_start_date, __pyx_k_start_date, sizeof(__pyx_k_start_date), 0, 0, 1, 1},
  {&__pyx_n_s_starting_length, __pyx_k_starting_length, sizeof(__pyx_k_starting_length), 0, 0, 1, 1},
  {&__pyx_kp_s_starting_length_needs_to_be_a_p, __pyx_k_starting_length_needs_to_be_a_p, sizeof(__pyx_k_starting_length_needs_to_be_a_p), 0, 0, 1, 0},
  {&__pyx_n_s_storage_cost_per_kg, __pyx_k_storage_cost_per_kg, sizeof(__pyx_k_storage_cost_per_kg), 0, 0, 1, 1},
  {&__pyx_n_s_tasks_table, __pyx_k_tasks_table, sizeof(__pyx_k_tasks_table), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_to_datetime, __pyx_k_to_datetime, sizeof(__pyx_k_to_datetime), 0, 0, 1, 1},
  {&__pyx_n_s_tolist, __pyx_k_tolist, sizeof(__pyx_k_tolist), 0, 0, 1, 1},
  {&__pyx_n_s_total, __pyx_k_total, sizeof(__pyx_k_total), 0, 0, 1, 1},
  {&__pyx_n_s_total_backlog_penalty_mean, __pyx_k_total_backlog_penalty_mean, sizeof(__pyx_k_total_backlog_penalty_mean), 0, 0, 1, 1},
  {&__pyx_n_s_total_cost_mean, __pyx_k_total_cost_mean, sizeof(__pyx_k_total_cost_mean), 0, 0, 1, 1},
  {&__pyx_n_s_total_inventory_penalty_mean, __pyx_k_total_inventory_penalty_mean, sizeof(__pyx_k_total_inventory_penalty_mean), 0, 0, 1, 1},
  {&__pyx_n_s_total_kg_backlog_mean, __pyx_k_total_kg_backlog_mean, sizeof(__pyx_k_total_kg_backlog_mean), 0, 0, 1, 1},
  {&__pyx_n_s_total_kg_inventory_deficit_mean, __pyx_k_total_kg_inventory_deficit_mean, sizeof(__pyx_k_total_kg_inventory_deficit_mean), 0, 0, 1, 1},
  {&__pyx_n_s_total_kg_supply_mean, __pyx_k_total_kg_supply_mean, sizeof(__pyx_k_total_kg_supply_mean), 0, 0, 1, 1},
  {&__pyx_n_s_total_kg_throughput_mean, __pyx_k_total_kg_throughput_mean, sizeof(__pyx_k_total_kg_throughput_mean), 0, 0, 1, 1},
  {&__pyx_n_s_total_kg_waste_mean, __pyx_k_total_kg_waste_mean, sizeof(__pyx_k_total_kg_waste_mean), 0, 0, 1, 1},
  {&__pyx_n_s_total_production_cost_mean, __pyx_k_total_production_cost_mean, sizeof(__pyx_k_total_production_cost_mean), 0, 0, 1, 1},
  {&__pyx_n_s_total_profit_mean, __pyx_k_total_profit_mean, sizeof(__pyx_k_total_profit_mean), 0, 0, 1, 1},
  {&__pyx_n_s_total_revenue_mean, __pyx_k_total_revenue_mean, sizeof(__pyx_k_total_revenue_mean), 0, 0, 1, 1},
  {&__pyx_n_s_total_storage_cost_mean, __pyx_k_total_storage_cost_mean, sizeof(__pyx_k_total_storage_cost_mean), 0, 0, 1, 1},
  {&__pyx_n_s_total_waste_cost_mean, __pyx_k_total_waste_cost_mean, sizeof(__pyx_k_total_waste_cost_mean), 0, 0, 1, 1},
  {&__pyx_n_s_tqdm, __pyx_k_tqdm, sizeof(__pyx_k_tqdm), 0, 0, 1, 1},
  {&__pyx_n_s_transpose, __pyx_k_transpose, sizeof(__pyx_k_transpose), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_usp_days, __pyx_k_usp_days, sizeof(__pyx_k_usp_days), 0, 0, 1, 1},
  {&__pyx_n_s_utils, __pyx_k_utils, sizeof(__pyx_k_utils), 0, 0, 1, 1},
  {&__pyx_n_s_validate_input, __pyx_k_validate_input, sizeof(__pyx_k_validate_input), 0, 0, 1, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {&__pyx_n_s_verbose, __pyx_k_verbose, sizeof(__pyx_k_verbose), 0, 0, 1, 1},
  {&__pyx_n_s_waste_cost_per_kg, __pyx_k_waste_cost_per_kg, sizeof(__pyx_k_waste_cost_per_kg), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 442, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 665, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "biopharma_scheduling/single_site/stochastic.pyx":255
 *         cdef vector[vector[double]] cpp_kg_inventory_target
 *         if kg_inventory_target is not None:
 *             cpp_kg_inventory_target = kg_inventory_target.fillna(0).transpose().values.tolist()             # <<<<<<<<<<<<<<
 * 
 *         self.input_data = SingleSiteSimpleInputData(
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "biopharma_scheduling/single_site/stochastic.pyx":264
 *             days_per_period,
 * 
 *             kg_demand_min.fillna(0).transpose().values.tolist(),             # <<<<<<<<<<<<<<
 *             kg_demand_mode.fillna(0).transpose().values.tolist(),
 *             kg_demand_max.fillna(0).transpose().values.tolist(),
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "biopharma_scheduling/single_site/stochastic.pyx":265
 * 
 *             kg_demand_min.fillna(0).transpose().values.tolist(),
 *             kg_demand_mode.fillna(0).transpose().values.tolist(),             # <<<<<<<<<<<<<<
 *             kg_demand_max.fillna(0).transpose().values.tolist(),
 * 
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "biopharma_scheduling/single_site/stochastic.pyx":266
 *             kg_demand_min.fillna(0).transpose().values.tolist(),
 *             kg_demand_mode.fillna(0).transpose().values.tolist(),
 *             kg_demand_max.fillna(0).transpose().values.tolist(),             # <<<<<<<<<<<<<<
 * 
 *             product_data.kg_yield_per_batch_min.fillna(0).values,
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "biopharma_scheduling/single_site/stochastic.pyx":268
 *             kg_demand_max.fillna(0).transpose().values.tolist(),
 * 
 *             product_data.kg_yield_per_batch_min.fillna(0).values,             # <<<<<<<<<<<<<<
 *             product_data.kg_yield_per_batch_mode.fillna(0).values,
 *             product_data.kg_yield_per_batch_max.fillna(0).values,
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "biopharma_scheduling/single_site/stochastic.pyx":269
 * 
 *             product_data.kg_yield_per_batch_min.fillna(0).values,
 *             product_data.kg_yield_per_batch_mode.fillna(0).values,             # <<<<<<<<<<<<<<
 *             product_data.kg_yield_per_batch_max.fillna(0).values,
 * 
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "biopharma_scheduling/single_site/stochastic.pyx":270
 *             product_data.kg_yield_per_batch_min.fillna(0).values,
 *             product_data.kg_yield_per_batch_mode.fillna(0).values,
 *             product_data.kg_yield_per_batch_max.fillna(0).values,             # <<<<<<<<<<<<<<
 * 
 *             product_data.kg_opening_stock.fillna(0).values.tolist(),
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "biopharma_scheduling/single_site/stochastic.pyx":272
 *             product_data.kg_yield_per_batch_max.fillna(0).values,
 * 
 *             product_data.kg_opening_stock.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.kg_storage_limits.fillna(0).values.tolist(),
 * 
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "biopharma_scheduling/single_site/stochastic.pyx":273
 * 
 *             product_data.kg_opening_stock.fillna(0).values.tolist(),
 *             product_data.kg_storage_limits.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 * 
 *             product_data.inventory_penalty_per_kg.fillna(0).values.tolist(),
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "biopharma_scheduling/single_site/stochastic.pyx":275
 *             product_data.kg_storage_limits.fillna(0).values.tolist(),
 * 
 *             product_data.inventory_penalty_per_kg.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.backlog_penalty_per_kg.fillna(0).values.tolist(),
 *             product_data.production_cost_per_kg.fillna(0).values.tolist(),
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "biopharma_scheduling/single_site/stochastic.pyx":276
 * 
 *             product_data.inventory_penalty_per_kg.fillna(0).values.tolist(),
 *             product_data.backlog_penalty_per_kg.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.production_cost_per_kg.fillna(0).values.tolist(),
 *             product_data.storage_cost_per_kg.fillna(0).values.tolist(),
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "biopharma_scheduling/single_site/stochastic.pyx":277
 *             product_data.inventory_penalty_per_kg.fillna(0).values.tolist(),
 *             product_data.backlog_penalty_per_kg.fillna(0).values.tolist(),
 *             product_data.production_cost_per_kg.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.storage_cost_per_kg.fillna(0).values.tolist(),
 *             product_data.waste_cost_per_kg.fillna(0).values.tolist(),
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "biopharma_scheduling/single_site/stochastic.pyx":278
 *             product_data.backlog_penalty_per_kg.fillna(0).values.tolist(),
 *             product_data.production_cost_per_kg.fillna(0).values.tolist(),
 *             product_data.storage_cost_per_kg.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.waste_cost_per_kg.fillna(0).values.tolist(),
 *             product_data.sell_price_per_kg.fillna(0).values.tolist(),
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "biopharma_scheduling/single_site/stochastic.pyx":279
 *             product_data.production_cost_per_kg.fillna(0).values.tolist(),
 *             product_data.storage_cost_per_kg.fillna(0).values.tolist(),
 *             product_data.waste_cost_per_kg.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.sell_price_per_kg.fillna(0).values.tolist(),
 * 
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "biopharma_scheduling/single_site/stochastic.pyx":280
 *             product_data.storage_cost_per_kg.fillna(0).values.tolist(),
 *             product_data.waste_cost_per_kg.fillna(0).values.tolist(),
 *             product_data.sell_price_per_kg.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 * 
 *             product_data.inoculation_days.fillna(0).values.tolist(),
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "biopharma_scheduling/single_site/stochastic.pyx":282
 *             product_data.sell_price_per_kg.fillna(0).values.tolist(),
 * 
 *             product_data.inoculation_days.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.seed_days.fillna(0).values.tolist(),
 *             product_data.production_days.fillna(0).values.tolist(),
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "biopharma_scheduling/single_site/stochastic.pyx":283
 * 
 *             product_data.inoculation_days.fillna(0).values.tolist(),
 *             product_data.seed_days.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.production_days.fillna(0).values.tolist(),
 *             product_data.usp_days.fillna(0).values.tolist(),
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "biopharma_scheduling/single_site/stochastic.pyx":284
 *             product_data.inoculation_days.fillna(0).values.tolist(),
 *             product_data.seed_days.fillna(0).values.tolist(),
 *             product_data.production_days.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.usp_days.fillna(0).values.tolist(),
 *             product_data.dsp_days.fillna(0).values.tolist(),
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "biopharma_scheduling/single_site/stochastic.pyx":285
 *             product_data.seed_days.fillna(0).values.tolist(),
 *             product_data.production_days.fillna(0).values.tolist(),
 *             product_data.usp_days.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.dsp_days.fillna(0).values.tolist(),
 *             product_data.approval_days.fillna(0).values.tolist(),
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "biopharma_scheduling/single_site/stochastic.pyx":286
 *             product_data.production_days.fillna(0).values.tolist(),
 *             product_data.usp_days.fillna(0).values.tolist(),
 *             product_data.dsp_days.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.approval_days.fillna(0).values.tolist(),
 *             product_data.shelf_life_days.fillna(0).values.tolist(),
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "biopharma_scheduling/single_site/stochastic.pyx":287
 *             product_data.usp_days.fillna(0).values.tolist(),
 *             product_data.dsp_days.fillna(0).values.tolist(),
 *             product_data.approval_days.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.shelf_life_days.fillna(0).values.tolist(),
 *             product_data.min_batches_per_campaign.fillna(0).values.tolist(),
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "biopharma_scheduling/single_site/stochastic.pyx":288
 *             product_data.dsp_days.fillna(0).values.tolist(),
 *             product_data.approval_days.fillna(0).values.tolist(),
 *             product_data.shelf_life_days.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.min_batches_per_campaign.fillna(0).values.tolist(),
 *             product_data.max_batches_per_campaign.fillna(0).values.tolist(),
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "biopharma_scheduling/single_site/stochastic.pyx":289
 *             product_data.approval_days.fillna(0).values.tolist(),
 *             product_data.shelf_life_days.fillna(0).values.tolist(),
 *             product_data.min_batches_per_campaign.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.max_batches_per_campaign.fillna(0).values.tolist(),
 *             product_data.batches_multiples_of_per_campaign.fillna(0).values.tolist(),
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "biopharma_scheduling/single_site/stochastic.pyx":290
 *             product_data.shelf_life_days.fillna(0).values.tolist(),
 *             product_data.min_batches_per_campaign.fillna(0).values.tolist(),
 *             product_data.max_batches_per_campaign.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             product_data.batches_multiples_of_per_campaign.fillna(0).values.tolist(),
 *             changeover_days.drop('product', axis=1).fillna(0).values.tolist(),
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "biopharma_scheduling/single_site/stochastic.pyx":291
 *             product_data.min_batches_per_campaign.fillna(0).values.tolist(),
 *             product_data.max_batches_per_campaign.fillna(0).values.tolist(),
 *             product_data.batches_multiples_of_per_campaign.fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 *             changeover_days.drop('product', axis=1).fillna(0).values.tolist(),
 * 
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "biopharma_scheduling/single_site/stochastic.pyx":292
 *             product_data.max_batches_per_campaign.fillna(0).values.tolist(),
 *             product_data.batches_multiples_of_per_campaign.fillna(0).values.tolist(),
 *             changeover_days.drop('product', axis=1).fillna(0).values.tolist(),             # <<<<<<<<<<<<<<
 * 
 *             &cpp_kg_inventory_target if kg_inventory_target is not None else NULL,
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_n_s_product); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "biopharma_scheduling/single_site/stochastic.pyx":392
 *                    "Product labels from 'kg_demand_max' and 'kg_inventory_target' do not match."
 * 
 *         for col in [             # <<<<<<<<<<<<<<
 *             'product',
 *             'inventory_penalty_per_kg',
 */
  __pyx_tuple__28 = PyTuple_Pack(22, __pyx_n_s_product, __pyx_n_s_inventory_penalty_per_kg, __pyx_n_s_backlog_penalty_per_kg, __pyx_n_s_production_cost_per_kg, __pyx_n_s_storage_cost_per_kg, __pyx_n_s_waste_cost_per_kg, __pyx_n_s_sell_price_per_kg, __pyx_n_s_inoculation_days, __pyx_n_s_seed_days, __pyx_n_s_production_days, __pyx_n_s_usp_days, __pyx_n_s_dsp_days, __pyx_n_s_approval_days, __pyx_n_s_shelf_life_days, __pyx_n_s_kg_yield_per_batch_min, __pyx_n_s_kg_yield_per_batch_mode, __pyx_n_s_kg_yield_per_batch_max, __pyx_n_s_kg_storage_limits, __pyx_n_s_kg_opening_stock, __pyx_n_s_min_batches_per_campaign, __pyx_n_s_max_batches_per_campaign, __pyx_n_s_batches_multiples_of_per_campaig); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "biopharma_scheduling/single_site/stochastic.pyx":430
 * 
 *         changeover_days_product_columns = changeover_days.columns.values.tolist()
 *         changeover_days_product_columns.remove('product')             # <<<<<<<<<<<<<<
 * 
 *         assert len(self.product_labels) == len(changeover_days_product_columns) and \
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_n_s_product); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "biopharma_scheduling/single_site/stochastic.pyx":487
 * 
 *         if self.verbose and self.save_history:
 *             pbar.set_description('Processing history')             # <<<<<<<<<<<<<<
 * 
 *         if self.save_history:
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_Processing_history); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "biopharma_scheduling/single_site/stochastic.pyx":497
 * 
 *         if self.verbose:
 *             pbar.set_description('Collecting schedules')             # <<<<<<<<<<<<<<
 * 
 *         self.schedules = []
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_Collecting_schedules); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "biopharma_scheduling/single_site/stochastic.pyx":509
 * 
 *         if self.verbose:
 *             pbar.set_description('Done')             # <<<<<<<<<<<<<<
 *             pbar.close()
 * 
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_n_s_Done); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "biopharma_scheduling/single_site/stochastic.pyx":556
 * 
 *         if self.verbose and self.save_history:
 *             pbar.set_description('Processing history')             # <<<<<<<<<<<<<<
 * 
 *         if self.save_history:
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_Processing_history); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "biopharma_scheduling/single_site/stochastic.pyx":568
 * 
 *         if self.verbose:
 *             pbar.set_description('Collecting schedules')             # <<<<<<<<<<<<<<
 * 
 *         self.schedules = []
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_Collecting_schedules); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "biopharma_scheduling/single_site/stochastic.pyx":578
 * 
 *         if self.verbose:
 *             pbar.set_description('Done')             # <<<<<<<<<<<<<<
 *             pbar.close()
 * 
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_n_s_Done); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "biopharma_scheduling/single_site/stochastic.pyx":582
 * 
 *     cdef __make_pyschedule(self, SingleSiteSimpleSchedule &schedule):
 *         def get_date_of(delta):             # <<<<<<<<<<<<<<
 *             return pd.Timedelta('%d days' % delta) + pd.to_datetime(self.start_date).date()
 * 
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_n_s_delta); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_biopharma_scheduling_single_site, __pyx_n_s_get_date_of, 582, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 582, __pyx_L1_error)

  /* "biopharma_scheduling/single_site/stochastic.pyx":613
 *                 tasks_table.append(OrderedDict([
 *                     ('Product', self.product_labels[campaign.product_num - 1]),
 *                     ('Task', 'Inoculation'),             # <<<<<<<<<<<<<<
 *                     ('Start', batches_table[-1]['Start']),
 *                     (
 */
  __pyx_tuple__38 = PyTuple_Pack(2, __pyx_n_s_Task, __pyx_n_s_Inoculation); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "biopharma_scheduling/single_site/stochastic.pyx":625
 *                 tasks_table.append(OrderedDict([
 *                     ('Product', self.product_labels[campaign.product_num - 1]),
 *                     ('Task', 'Seed'),             # <<<<<<<<<<<<<<
 *                     ('Start', tasks_table[-1]['Finish']),
 *                     (
 */
  __pyx_tuple__39 = PyTuple_Pack(2, __pyx_n_s_Task, __pyx_n_s_Seed); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "biopharma_scheduling/single_site/stochastic.pyx":637
 *                 tasks_table.append(OrderedDict([
 *                     ('Product', self.product_labels[campaign.product_num - 1]),
 *                     ('Task', 'Production'),             # <<<<<<<<<<<<<<
 *                     ('Start', tasks_table[-1]['Finish']),
 *                     (
 */
  __pyx_tuple__40 = PyTuple_Pack(2, __pyx_n_s_Task, __pyx_n_s_Production); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "biopharma_scheduling/single_site/stochastic.pyx":649
 *                 tasks_table.append(OrderedDict([
 *                     ('Product', self.product_labels[campaign.product_num - 1]),
 *                     ('Task', 'DSP'),             # <<<<<<<<<<<<<<
 *                     ('Start', tasks_table[-1]['Finish']),
 *                     (
 */
  __pyx_tuple__41 = PyTuple_Pack(2, __pyx_n_s_Task, __pyx_n_s_DSP); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.input_data,self.single_site_simple cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.input_data,self.single_site_simple cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_s_self_input_data_self_single_site); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "(tree fragment)":4
 *     raise TypeError("self.input_data,self.single_site_simple cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.input_data,self.single_site_simple cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_s_self_input_data_self_single_site); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_017718 = PyFloat_FromDouble(0.017718); if (unlikely(!__pyx_float_0_017718)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_130878 = PyFloat_FromDouble(0.130878); if (unlikely(!__pyx_float_0_130878)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_531073 = PyFloat_FromDouble(0.531073); if (unlikely(!__pyx_float_0_531073)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_707202 = PyFloat_FromDouble(0.707202); if (unlikely(!__pyx_float_0_707202)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_834735 = PyFloat_FromDouble(0.834735); if (unlikely(!__pyx_float_0_834735)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_20 = PyInt_FromLong(20); if (unlikely(!__pyx_int_20)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_100 = PyInt_FromLong(100); if (unlikely(!__pyx_int_100)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initstochastic(void); /*proto*/
PyMODINIT_FUNC initstochastic(void)
#else
PyMODINIT_FUNC PyInit_stochastic(void); /*proto*/
PyMODINIT_FUNC PyInit_stochastic(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_stochastic(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("stochastic", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_biopharma_scheduling__single_site__stochastic) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "biopharma_scheduling.single_site.stochastic")) {
      if (unlikely(PyDict_SetItemString(modules, "biopharma_scheduling.single_site.stochastic", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple = &__pyx_vtable_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple;
  __pyx_vtable_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple.__pyx___make_pyschedule = (PyObject *(*)(struct __pyx_obj_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple *, struct types::SingleSiteSimpleSchedule &))__pyx_f_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple___make_pyschedule;
  if (PyType_Ready(&__pyx_type_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  __pyx_type_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple.tp_print = 0;
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 29, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple___init__.doc = __pyx_doc_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_20biopharma_scheduling_11single_site_10stochastic_21StochSingleSiteSimple___init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple.tp_dict, __pyx_vtabptr_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "StochSingleSiteSimple", (PyObject *)&__pyx_type_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  __pyx_ptype_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple = &__pyx_type_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple;
  if (PyType_Ready(&__pyx_type_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule) < 0) __PYX_ERR(0, 581, __pyx_L1_error)
  __pyx_type_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule.tp_print = 0;
  __pyx_ptype_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule = &__pyx_type_20biopharma_scheduling_11single_site_10stochastic___pyx_scope_struct____pyx___make_pyschedule;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "biopharma_scheduling/single_site/stochastic.pyx":1
 * import numpy as np             # <<<<<<<<<<<<<<
 * import pandas as pd
 * from tqdm import tqdm
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":2
 * import numpy as np
 * import pandas as pd             # <<<<<<<<<<<<<<
 * from tqdm import tqdm
 * from collections import OrderedDict
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pandas, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pd, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":3
 * import numpy as np
 * import pandas as pd
 * from tqdm import tqdm             # <<<<<<<<<<<<<<
 * from collections import OrderedDict
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_tqdm);
  __Pyx_GIVEREF(__pyx_n_s_tqdm);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_tqdm);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_tqdm, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_tqdm); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_tqdm, __pyx_t_1) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":4
 * import pandas as pd
 * from tqdm import tqdm
 * from collections import OrderedDict             # <<<<<<<<<<<<<<
 * 
 * from libcpp.utility cimport pair
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_OrderedDict);
  __Pyx_GIVEREF(__pyx_n_s_OrderedDict);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_OrderedDict);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderedDict, __pyx_t_2) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":18
 * from ..gene cimport SingleSiteSimpleGene, SingleSiteMultiSuiteGene
 * 
 * from ..utils import hypervolume             # <<<<<<<<<<<<<<
 * from ..pyschedule import PySingleSiteSimpleSchedule, PySingleSiteMultiSuiteSchedule
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_hypervolume);
  __Pyx_GIVEREF(__pyx_n_s_hypervolume);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_hypervolume);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_utils, __pyx_t_1, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_hypervolume); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_hypervolume, __pyx_t_1) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":19
 * 
 * from ..utils import hypervolume
 * from ..pyschedule import PySingleSiteSimpleSchedule, PySingleSiteMultiSuiteSchedule             # <<<<<<<<<<<<<<
 * 
 * from stochastic cimport (
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_PySingleSiteSimpleSchedule);
  __Pyx_GIVEREF(__pyx_n_s_PySingleSiteSimpleSchedule);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PySingleSiteSimpleSchedule);
  __Pyx_INCREF(__pyx_n_s_PySingleSiteMultiSuiteSchedule);
  __Pyx_GIVEREF(__pyx_n_s_PySingleSiteMultiSuiteSchedule);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_PySingleSiteMultiSuiteSchedule);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pyschedule, __pyx_t_2, 2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_PySingleSiteSimpleSchedule); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PySingleSiteSimpleSchedule, __pyx_t_2) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_PySingleSiteMultiSuiteSchedule); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PySingleSiteMultiSuiteSchedule, __pyx_t_2) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "biopharma_scheduling/single_site/stochastic.pyx":70
 * 
 *     AVAILABLE_OBJECTIVES = {
 *         'total_kg_inventory_deficit_mean',             # <<<<<<<<<<<<<<
 *         'total_kg_throughput_mean',
 *         'total_kg_backlog_mean',
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PySet_Add(__pyx_t_1, __pyx_n_s_total_kg_inventory_deficit_mean) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_total_kg_throughput_mean) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_total_kg_backlog_mean) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_total_kg_supply_mean) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_total_kg_waste_mean) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_total_inventory_penalty_mean) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_total_backlog_penalty_mean) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_total_production_cost_mean) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_total_storage_cost_mean) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_total_waste_cost_mean) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_total_revenue_mean) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_total_profit_mean) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_total_cost_mean) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  if (PyDict_SetItem((PyObject *)__pyx_ptype_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple->tp_dict, __pyx_n_s_AVAILABLE_OBJECTIVES, __pyx_t_1) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_20biopharma_scheduling_11single_site_10stochastic_StochSingleSiteSimple);

  /* "biopharma_scheduling/single_site/stochastic.pyx":1
 * import numpy as np             # <<<<<<<<<<<<<<
 * import pandas as pd
 * from tqdm import tqdm
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init biopharma_scheduling.single_site.stochastic", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init biopharma_scheduling.single_site.stochastic");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = PyThreadState_GET();
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* RaiseTooManyValuesToUnpack */
  static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
  static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
  static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
  static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyObjectCallMethod1 */
  static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto done;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
done:
    Py_XDECREF(method);
    return result;
}

/* append */
  static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* PyIntBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) {
            Py_RETURN_TRUE;
        } else {
            Py_RETURN_FALSE;
        }
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                #if PyLong_SHIFT < 30 && PyLong_SHIFT != 15
                default: return PyLong_Type.tp_richcompare(op1, op2, Py_EQ);
                #else
                default: Py_RETURN_FALSE;
                #endif
            }
        }
            if (a == b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            if ((double)a == (double)b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    return PyObject_RichCompare(op1, op2, Py_EQ);
}
#endif

/* GetItemInt */
  static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* GetModuleGlobalName */
  static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* BytesEquals */
    static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
    static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyIntBinop */
    #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* None */
    static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* PyIntBinop */
    #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* None */
    static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* FetchCommonType */
    static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
    static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0 = PySequence_ITEM(arg, 0);
                if (unlikely(!arg0)) return NULL;
                result = (*meth)(self, arg0);
                Py_DECREF(arg0);
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* PyErrFetchRestore */
        #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
        #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* SetVTable */
          static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* SetupReduce */
          #define __Pyx_setup_reduce_GET_ATTR_OR_BAD(res, obj, name) res = PyObject_GetAttrString(obj, name); if (res == NULL) goto BAD;
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = PyObject_GetAttrString(meth, "__name__");
  if (name_attr) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (ret < 0) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject* builtin_object = NULL;
    static PyObject *object_reduce = NULL;
    static PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    if (PyObject_HasAttrString(type_obj, "__getstate__")) goto GOOD;
    if (object_reduce_ex == NULL) {
        __Pyx_setup_reduce_GET_ATTR_OR_BAD(builtin_object, __pyx_b, "object");
        __Pyx_setup_reduce_GET_ATTR_OR_BAD(object_reduce, builtin_object, "__reduce__");
        __Pyx_setup_reduce_GET_ATTR_OR_BAD(object_reduce_ex, builtin_object, "__reduce_ex__");
    }
    __Pyx_setup_reduce_GET_ATTR_OR_BAD(reduce_ex, type_obj, "__reduce_ex__");
    if (reduce_ex == object_reduce_ex) {
        __Pyx_setup_reduce_GET_ATTR_OR_BAD(reduce, type_obj, "__reduce__");
        if (object_reduce == reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            __Pyx_setup_reduce_GET_ATTR_OR_BAD(reduce_cython, type_obj, "__reduce_cython__");
            ret = PyDict_SetItemString(((PyTypeObject*)type_obj)->tp_dict, "__reduce__", reduce_cython); if (ret < 0) goto BAD;
            ret = PyDict_DelItemString(((PyTypeObject*)type_obj)->tp_dict, "__reduce_cython__"); if (ret < 0) goto BAD;
            setstate = PyObject_GetAttrString(type_obj, "__setstate__");
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
            __Pyx_setup_reduce_GET_ATTR_OR_BAD(setstate_cython, type_obj, "__setstate_cython__");
                ret = PyDict_SetItemString(((PyTypeObject*)type_obj)->tp_dict, "__setstate__", setstate_cython); if (ret < 0) goto BAD;
                ret = PyDict_DelItemString(((PyTypeObject*)type_obj)->tp_dict, "__setstate_cython__"); if (ret < 0) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred()) PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
    Py_XDECREF(builtin_object);
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* Import */
          static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
          static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CLineInTraceback */
          static int __Pyx_CLineForTraceback(int c_line) {
#ifdef CYTHON_CLINE_IN_TRACEBACK
    return ((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0;
#else
    PyObject **cython_runtime_dict;
    PyObject *use_cline;
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (unlikely(!cython_runtime_dict)) {
      PyObject *ptype, *pvalue, *ptraceback;
      PyObject *use_cline_obj;
      PyErr_Fetch(&ptype, &pvalue, &ptraceback);
      use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        use_cline = NULL;
      }
      PyErr_Restore(ptype, pvalue, ptraceback);
    } else {
      use_cline = PyDict_GetItem(*_PyObject_GetDictPtr(__pyx_cython_runtime), __pyx_n_s_cline_in_traceback);
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    return c_line;
#endif
}

/* CodeObjectCache */
          static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
          #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
          #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__stochastic_3a__3a_OBJECTIVES(enum stochastic::OBJECTIVES value) {
    const enum stochastic::OBJECTIVES neg_one = (enum stochastic::OBJECTIVES) -1, const_zero = (enum stochastic::OBJECTIVES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum stochastic::OBJECTIVES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum stochastic::OBJECTIVES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum stochastic::OBJECTIVES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum stochastic::OBJECTIVES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum stochastic::OBJECTIVES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum stochastic::OBJECTIVES),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
          static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
          static CYTHON_INLINE enum stochastic::OBJECTIVES __Pyx_PyInt_As_enum__stochastic_3a__3a_OBJECTIVES(PyObject *x) {
    const enum stochastic::OBJECTIVES neg_one = (enum stochastic::OBJECTIVES) -1, const_zero = (enum stochastic::OBJECTIVES) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum stochastic::OBJECTIVES) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum stochastic::OBJECTIVES, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum stochastic::OBJECTIVES) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum stochastic::OBJECTIVES) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum stochastic::OBJECTIVES, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum stochastic::OBJECTIVES) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum stochastic::OBJECTIVES, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum stochastic::OBJECTIVES) >= 2 * PyLong_SHIFT) {
                            return (enum stochastic::OBJECTIVES) (((((enum stochastic::OBJECTIVES)digits[1]) << PyLong_SHIFT) | (enum stochastic::OBJECTIVES)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum stochastic::OBJECTIVES) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum stochastic::OBJECTIVES, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum stochastic::OBJECTIVES) >= 3 * PyLong_SHIFT) {
                            return (enum stochastic::OBJECTIVES) (((((((enum stochastic::OBJECTIVES)digits[2]) << PyLong_SHIFT) | (enum stochastic::OBJECTIVES)digits[1]) << PyLong_SHIFT) | (enum stochastic::OBJECTIVES)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum stochastic::OBJECTIVES) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum stochastic::OBJECTIVES, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum stochastic::OBJECTIVES) >= 4 * PyLong_SHIFT) {
                            return (enum stochastic::OBJECTIVES) (((((((((enum stochastic::OBJECTIVES)digits[3]) << PyLong_SHIFT) | (enum stochastic::OBJECTIVES)digits[2]) << PyLong_SHIFT) | (enum stochastic::OBJECTIVES)digits[1]) << PyLong_SHIFT) | (enum stochastic::OBJECTIVES)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum stochastic::OBJECTIVES) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum stochastic::OBJECTIVES) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum stochastic::OBJECTIVES, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum stochastic::OBJECTIVES) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum stochastic::OBJECTIVES, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum stochastic::OBJECTIVES) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum stochastic::OBJECTIVES, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum stochastic::OBJECTIVES,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum stochastic::OBJECTIVES) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum stochastic::OBJECTIVES, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum stochastic::OBJECTIVES) - 1 > 2 * PyLong_SHIFT) {
                            return (enum stochastic::OBJECTIVES) (((enum stochastic::OBJECTIVES)-1)*(((((enum stochastic::OBJECTIVES)digits[1]) << PyLong_SHIFT) | (enum stochastic::OBJECTIVES)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum stochastic::OBJECTIVES) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum stochastic::OBJECTIVES, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum stochastic::OBJECTIVES) - 1 > 2 * PyLong_SHIFT) {
                            return (enum stochastic::OBJECTIVES) ((((((enum stochastic::OBJECTIVES)digits[1]) << PyLong_SHIFT) | (enum stochastic::OBJECTIVES)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum stochastic::OBJECTIVES) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum stochastic::OBJECTIVES, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum stochastic::OBJECTIVES) - 1 > 3 * PyLong_SHIFT) {
                            return (enum stochastic::OBJECTIVES) (((enum stochastic::OBJECTIVES)-1)*(((((((enum stochastic::OBJECTIVES)digits[2]) << PyLong_SHIFT) | (enum stochastic::OBJECTIVES)digits[1]) << PyLong_SHIFT) | (enum stochastic::OBJECTIVES)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum stochastic::OBJECTIVES) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum stochastic::OBJECTIVES, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum stochastic::OBJECTIVES) - 1 > 3 * PyLong_SHIFT) {
                            return (enum stochastic::OBJECTIVES) ((((((((enum stochastic::OBJECTIVES)digits[2]) << PyLong_SHIFT) | (enum stochastic::OBJECTIVES)digits[1]) << PyLong_SHIFT) | (enum stochastic::OBJECTIVES)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum stochastic::OBJECTIVES) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum stochastic::OBJECTIVES, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum stochastic::OBJECTIVES) - 1 > 4 * PyLong_SHIFT) {
                            return (enum stochastic::OBJECTIVES) (((enum stochastic::OBJECTIVES)-1)*(((((((((enum stochastic::OBJECTIVES)digits[3]) << PyLong_SHIFT) | (enum stochastic::OBJECTIVES)digits[2]) << PyLong_SHIFT) | (enum stochastic::OBJECTIVES)digits[1]) << PyLong_SHIFT) | (enum stochastic::OBJECTIVES)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum stochastic::OBJECTIVES) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum stochastic::OBJECTIVES, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum stochastic::OBJECTIVES) - 1 > 4 * PyLong_SHIFT) {
                            return (enum stochastic::OBJECTIVES) ((((((((((enum stochastic::OBJECTIVES)digits[3]) << PyLong_SHIFT) | (enum stochastic::OBJECTIVES)digits[2]) << PyLong_SHIFT) | (enum stochastic::OBJECTIVES)digits[1]) << PyLong_SHIFT) | (enum stochastic::OBJECTIVES)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum stochastic::OBJECTIVES) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum stochastic::OBJECTIVES, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum stochastic::OBJECTIVES) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum stochastic::OBJECTIVES, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum stochastic::OBJECTIVES val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum stochastic::OBJECTIVES) -1;
        }
    } else {
        enum stochastic::OBJECTIVES val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum stochastic::OBJECTIVES) -1;
        val = __Pyx_PyInt_As_enum__stochastic_3a__3a_OBJECTIVES(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum stochastic::OBJECTIVES");
    return (enum stochastic::OBJECTIVES) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum stochastic::OBJECTIVES");
    return (enum stochastic::OBJECTIVES) -1;
}

/* CIntFromPy */
          static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
          static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CheckBinaryVersion */
          static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
          static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            PyErr_Clear();
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
